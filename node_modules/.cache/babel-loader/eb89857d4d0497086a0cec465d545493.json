{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports\";\nimport { createGuid } from \"../../common/Exports\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { PropertyId } from \"../../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase\";\nimport { ConversationTranslatorConfig } from \"./ConversationUtils\";\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter\";\n/**\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\n * The conversation must already have been started or joined.\n */\n\nexport class ConversationConnectionFactory extends ConnectionFactoryBase {\n  create(config, authInfo, connectionId) {\n    const endpointHost = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationTranslatorConfig.host);\n    const correlationId = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\n    const endpoint = `wss://${endpointHost}${ConversationTranslatorConfig.webSocketPath}`;\n    const token = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\n    Contracts.throwIfNullOrUndefined(token, \"token\");\n    const queryParams = {};\n    queryParams[ConversationTranslatorConfig.params.apiVersion] = ConversationTranslatorConfig.apiVersion;\n    queryParams[ConversationTranslatorConfig.params.token] = token;\n    queryParams[ConversationTranslatorConfig.params.correlationId] = correlationId;\n    return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), connectionId);\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/Transcription/ConversationConnectionFactory.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,SAAT,EAAoB,mBAApB,QAA+C,8BAA/C;AACA,SAAS,UAAT,QAA2D,sBAA3D;AACA,SAAS,SAAT,QAA0B,qBAA1B;AACA,SAAS,UAAT,QAA2B,mBAA3B;AACA,SAAS,qBAAT,QAAsC,0BAAtC;AAEA,SAAS,4BAAT,QAA6C,qBAA7C;AACA,SAAS,qCAAT,QAAsD,yCAAtD;AAEA;;;;;AAIA,OAAM,MAAO,6BAAP,SAA6C,qBAA7C,CAAkE;AAE7D,EAAA,MAAM,CAAC,MAAD,EAA2B,QAA3B,EAA+C,YAA/C,EAAoE;AAE7E,UAAM,YAAY,GAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,2BAAzC,EAAsE,4BAA4B,CAAC,IAAnG,CAA7B;AACA,UAAM,aAAa,GAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,oCAAzC,EAA+E,UAAU,EAAzF,CAA9B;AAEA,UAAM,QAAQ,GAAW,SAAS,YAAY,GAAG,4BAA4B,CAAC,aAAa,EAA3F;AACA,UAAM,KAAK,GAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,4BAAzC,EAAuE,SAAvE,CAAtB;AACA,IAAA,SAAS,CAAC,sBAAV,CAAiC,KAAjC,EAAwC,OAAxC;AAEA,UAAM,WAAW,GAA8B,EAA/C;AACA,IAAA,WAAW,CAAC,4BAA4B,CAAC,MAA7B,CAAoC,UAArC,CAAX,GAA8D,4BAA4B,CAAC,UAA3F;AACA,IAAA,WAAW,CAAC,4BAA4B,CAAC,MAA7B,CAAoC,KAArC,CAAX,GAAyD,KAAzD;AACA,IAAA,WAAW,CAAC,4BAA4B,CAAC,MAA7B,CAAoC,aAArC,CAAX,GAAiE,aAAjE;AACA,WAAO,IAAI,mBAAJ,CAAwB,QAAxB,EAAkC,WAAlC,EAA+C,EAA/C,EAAmD,IAAI,qCAAJ,EAAnD,EAAgG,SAAS,CAAC,oBAAV,CAA+B,MAA/B,CAAhG,EAAwI,YAAxI,CAAP;AAEH;;AAjBmE","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports\";\r\nimport { createGuid, IConnection, IStringDictionary } from \"../../common/Exports\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { PropertyId } from \"../../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig } from \"../Exports\";\r\nimport { ConversationTranslatorConfig } from \"./ConversationUtils\";\r\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter\";\r\n\r\n/**\r\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\r\n * The conversation must already have been started or joined.\r\n */\r\nexport class ConversationConnectionFactory extends ConnectionFactoryBase  {\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n\r\n        const endpointHost: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationTranslatorConfig.host);\r\n        const correlationId: string = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\r\n\r\n        const endpoint: string = `wss://${endpointHost}${ConversationTranslatorConfig.webSocketPath}`;\r\n        const token: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\r\n        Contracts.throwIfNullOrUndefined(token, \"token\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[ConversationTranslatorConfig.params.apiVersion] = ConversationTranslatorConfig.apiVersion;\r\n        queryParams[ConversationTranslatorConfig.params.token] = token;\r\n        queryParams[ConversationTranslatorConfig.params.correlationId] = correlationId;\r\n        return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), connectionId);\r\n\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}