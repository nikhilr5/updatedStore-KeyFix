{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { AudioSourceErrorEvent, AudioStreamNodeAttachedEvent, AudioStreamNodeAttachingEvent, AudioStreamNodeDetachedEvent, AudioStreamNodeErrorEvent, ConnectionEstablishedEvent, ConnectionEstablishErrorEvent, ConnectionMessageReceivedEvent, ConnectionStartEvent } from \"../common/Exports\";\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents\"; // tslint:disable-next-line:max-classes-per-file\n\nexport class ServiceTelemetryListener {\n  constructor(requestId, audioSourceId, audioNodeId) {\n    this.privIsDisposed = false;\n    this.privListeningTriggerMetric = null;\n    this.privMicMetric = null;\n    this.privConnectionEstablishMetric = null;\n\n    this.onEvent = e => {\n      if (this.privIsDisposed) {\n        return;\n      }\n\n      if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\n        this.privListeningTriggerMetric = {\n          End: e.eventTime,\n          Name: \"ListeningTrigger\",\n          Start: e.eventTime\n        };\n      }\n\n      if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n        this.privMicStartTime = e.eventTime;\n      }\n\n      if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n        this.privMicStartTime = e.eventTime;\n      }\n\n      if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\n        if (!this.privMicMetric) {\n          this.privMicMetric = {\n            End: e.eventTime,\n            Error: e.error,\n            Name: \"Microphone\",\n            Start: this.privMicStartTime\n          };\n        }\n      }\n\n      if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n        if (!this.privMicMetric) {\n          this.privMicMetric = {\n            End: e.eventTime,\n            Error: e.error,\n            Name: \"Microphone\",\n            Start: this.privMicStartTime\n          };\n        }\n      }\n\n      if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n        if (!this.privMicMetric) {\n          this.privMicMetric = {\n            End: e.eventTime,\n            Name: \"Microphone\",\n            Start: this.privMicStartTime\n          };\n        }\n      }\n\n      if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\n        this.privConnectionId = e.sessionId;\n      }\n\n      if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\n        this.privConnectionStartTime = e.eventTime;\n      }\n\n      if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\n        if (!this.privConnectionEstablishMetric) {\n          this.privConnectionEstablishMetric = {\n            End: e.eventTime,\n            Id: this.privConnectionId,\n            Name: \"Connection\",\n            Start: this.privConnectionStartTime\n          };\n        }\n      }\n\n      if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\n        if (!this.privConnectionEstablishMetric) {\n          this.privConnectionEstablishMetric = {\n            End: e.eventTime,\n            Error: this.getConnectionError(e.statusCode),\n            Id: this.privConnectionId,\n            Name: \"Connection\",\n            Start: this.privConnectionStartTime\n          };\n        }\n      }\n\n      if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\n        if (e.message && e.message.headers && e.message.headers.path) {\n          if (!this.privReceivedMessages[e.message.headers.path]) {\n            this.privReceivedMessages[e.message.headers.path] = new Array();\n          }\n\n          this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\n        }\n      }\n    };\n\n    this.getTelemetry = () => {\n      const metrics = new Array();\n\n      if (this.privListeningTriggerMetric) {\n        metrics.push(this.privListeningTriggerMetric);\n      }\n\n      if (this.privMicMetric) {\n        metrics.push(this.privMicMetric);\n      }\n\n      if (this.privConnectionEstablishMetric) {\n        metrics.push(this.privConnectionEstablishMetric);\n      }\n\n      if (this.privPhraseLatencies.length > 0) {\n        metrics.push({\n          PhraseLatencyMs: this.privPhraseLatencies\n        });\n      }\n\n      if (this.privHypothesisLatencies.length > 0) {\n        metrics.push({\n          FirstHypothesisLatencyMs: this.privHypothesisLatencies\n        });\n      }\n\n      const telemetry = {\n        Metrics: metrics,\n        ReceivedMessages: this.privReceivedMessages\n      };\n      const json = JSON.stringify(telemetry); // We dont want to send the same telemetry again. So clean those out.\n\n      this.privReceivedMessages = {};\n      this.privListeningTriggerMetric = null;\n      this.privMicMetric = null;\n      this.privConnectionEstablishMetric = null;\n      this.privPhraseLatencies = [];\n      this.privHypothesisLatencies = [];\n      return json;\n    };\n\n    this.dispose = () => {\n      this.privIsDisposed = true;\n    };\n\n    this.getConnectionError = statusCode => {\n      /*\n      -- Websocket status codes --\n      NormalClosure = 1000,\n      EndpointUnavailable = 1001,\n      ProtocolError = 1002,\n      InvalidMessageType = 1003,\n      Empty = 1005,\n      InvalidPayloadData = 1007,\n      PolicyViolation = 1008,\n      MessageTooBig = 1009,\n      MandatoryExtension = 1010,\n      InternalServerError = 1011\n      */\n      switch (statusCode) {\n        case 400:\n        case 1002:\n        case 1003:\n        case 1005:\n        case 1007:\n        case 1008:\n        case 1009:\n          return \"BadRequest\";\n\n        case 401:\n          return \"Unauthorized\";\n\n        case 403:\n          return \"Forbidden\";\n\n        case 503:\n        case 1001:\n          return \"ServerUnavailable\";\n\n        case 500:\n        case 1011:\n          return \"ServerError\";\n\n        case 408:\n        case 504:\n          return \"Timeout\";\n\n        default:\n          return \"statuscode:\" + statusCode.toString();\n      }\n    };\n\n    this.privRequestId = requestId;\n    this.privAudioSourceId = audioSourceId;\n    this.privAudioNodeId = audioNodeId;\n    this.privReceivedMessages = {};\n    this.privPhraseLatencies = [];\n    this.privHypothesisLatencies = [];\n  }\n\n  phraseReceived(audioReceivedTime) {\n    if (audioReceivedTime > 0) {\n      // 0 indicates the time is unknown. Drop it.\n      this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\n    }\n  }\n\n  hypothesisReceived(audioReceivedTime) {\n    if (audioReceivedTime > 0) {\n      // 0 indicates the time is unknown. Drop it.\n      this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\n    }\n  } // Determines if there are any telemetry events to send to the service.\n\n\n  get hasTelemetry() {\n    return Object.keys(this.privReceivedMessages).length !== 0 || this.privListeningTriggerMetric !== null || this.privMicMetric !== null || this.privConnectionEstablishMetric !== null || this.privPhraseLatencies.length !== 0 || this.privHypothesisLatencies.length !== 0;\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/ServiceTelemetryListener.Internal.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SACI,qBADJ,EAEI,4BAFJ,EAGI,6BAHJ,EAII,4BAJJ,EAKI,yBALJ,EAMI,0BANJ,EAOI,6BAPJ,EAQI,8BARJ,EASI,oBATJ,QAaO,mBAbP;AAcA,SAAS,wBAAT,EAAmC,yBAAnC,QAAoE,qBAApE,C,CAkBA;;AACA,OAAM,MAAO,wBAAP,CAA+B;AAoBjC,EAAA,WAAA,CAAY,SAAZ,EAA+B,aAA/B,EAAsD,WAAtD,EAAyE;AAnBjE,SAAA,cAAA,GAA0B,KAA1B;AAMA,SAAA,0BAAA,GAAsC,IAAtC;AACA,SAAA,aAAA,GAAyB,IAAzB;AACA,SAAA,6BAAA,GAAyC,IAAzC;;AAiCD,SAAA,OAAA,GAAW,CAAD,IAA2B;AACxC,UAAI,KAAK,cAAT,EAAyB;AACrB;AACH;;AAED,UAAI,CAAC,YAAY,yBAAb,IAA0C,CAAC,CAAC,SAAF,KAAgB,KAAK,aAAnE,EAAkF;AAC9E,aAAK,0BAAL,GAAkC;AAC9B,UAAA,GAAG,EAAE,CAAC,CAAC,SADuB;AAE9B,UAAA,IAAI,EAAE,kBAFwB;AAG9B,UAAA,KAAK,EAAE,CAAC,CAAC;AAHqB,SAAlC;AAKH;;AAED,UAAI,CAAC,YAAY,6BAAb,IAA8C,CAAC,CAAC,aAAF,KAAoB,KAAK,iBAAvE,IAA4F,CAAC,CAAC,WAAF,KAAkB,KAAK,eAAvH,EAAwI;AACpI,aAAK,gBAAL,GAAwB,CAAC,CAAC,SAA1B;AACH;;AAED,UAAI,CAAC,YAAY,4BAAb,IAA6C,CAAC,CAAC,aAAF,KAAoB,KAAK,iBAAtE,IAA2F,CAAC,CAAC,WAAF,KAAkB,KAAK,eAAtH,EAAuI;AACnI,aAAK,gBAAL,GAAwB,CAAC,CAAC,SAA1B;AACH;;AAED,UAAI,CAAC,YAAY,qBAAb,IAAsC,CAAC,CAAC,aAAF,KAAoB,KAAK,iBAAnE,EAAsF;AAClF,YAAI,CAAC,KAAK,aAAV,EAAyB;AACrB,eAAK,aAAL,GAAqB;AACjB,YAAA,GAAG,EAAE,CAAC,CAAC,SADU;AAEjB,YAAA,KAAK,EAAE,CAAC,CAAC,KAFQ;AAGjB,YAAA,IAAI,EAAE,YAHW;AAIjB,YAAA,KAAK,EAAE,KAAK;AAJK,WAArB;AAMH;AACJ;;AAED,UAAI,CAAC,YAAY,yBAAb,IAA0C,CAAC,CAAC,aAAF,KAAoB,KAAK,iBAAnE,IAAwF,CAAC,CAAC,WAAF,KAAkB,KAAK,eAAnH,EAAoI;AAChI,YAAI,CAAC,KAAK,aAAV,EAAyB;AACrB,eAAK,aAAL,GAAqB;AACjB,YAAA,GAAG,EAAE,CAAC,CAAC,SADU;AAEjB,YAAA,KAAK,EAAE,CAAC,CAAC,KAFQ;AAGjB,YAAA,IAAI,EAAE,YAHW;AAIjB,YAAA,KAAK,EAAE,KAAK;AAJK,WAArB;AAMH;AACJ;;AAED,UAAI,CAAC,YAAY,4BAAb,IAA6C,CAAC,CAAC,aAAF,KAAoB,KAAK,iBAAtE,IAA2F,CAAC,CAAC,WAAF,KAAkB,KAAK,eAAtH,EAAuI;AACnI,YAAI,CAAC,KAAK,aAAV,EAAyB;AACrB,eAAK,aAAL,GAAqB;AACjB,YAAA,GAAG,EAAE,CAAC,CAAC,SADU;AAEjB,YAAA,IAAI,EAAE,YAFW;AAGjB,YAAA,KAAK,EAAE,KAAK;AAHK,WAArB;AAKH;AACJ;;AAED,UAAI,CAAC,YAAY,wBAAb,IAAyC,CAAC,CAAC,SAAF,KAAgB,KAAK,aAAlE,EAAiF;AAC7E,aAAK,gBAAL,GAAwB,CAAC,CAAC,SAA1B;AACH;;AAED,UAAI,CAAC,YAAY,oBAAb,IAAqC,CAAC,CAAC,YAAF,KAAmB,KAAK,gBAAjE,EAAmF;AAC/E,aAAK,uBAAL,GAA+B,CAAC,CAAC,SAAjC;AACH;;AAED,UAAI,CAAC,YAAY,0BAAb,IAA2C,CAAC,CAAC,YAAF,KAAmB,KAAK,gBAAvE,EAAyF;AACrF,YAAI,CAAC,KAAK,6BAAV,EAAyC;AACrC,eAAK,6BAAL,GAAqC;AACjC,YAAA,GAAG,EAAE,CAAC,CAAC,SAD0B;AAEjC,YAAA,EAAE,EAAE,KAAK,gBAFwB;AAGjC,YAAA,IAAI,EAAE,YAH2B;AAIjC,YAAA,KAAK,EAAE,KAAK;AAJqB,WAArC;AAMH;AACJ;;AAED,UAAI,CAAC,YAAY,6BAAb,IAA8C,CAAC,CAAC,YAAF,KAAmB,KAAK,gBAA1E,EAA4F;AACxF,YAAI,CAAC,KAAK,6BAAV,EAAyC;AACrC,eAAK,6BAAL,GAAqC;AACjC,YAAA,GAAG,EAAE,CAAC,CAAC,SAD0B;AAEjC,YAAA,KAAK,EAAE,KAAK,kBAAL,CAAwB,CAAC,CAAC,UAA1B,CAF0B;AAGjC,YAAA,EAAE,EAAE,KAAK,gBAHwB;AAIjC,YAAA,IAAI,EAAE,YAJ2B;AAKjC,YAAA,KAAK,EAAE,KAAK;AALqB,WAArC;AAOH;AACJ;;AAED,UAAI,CAAC,YAAY,8BAAb,IAA+C,CAAC,CAAC,YAAF,KAAmB,KAAK,gBAA3E,EAA6F;AACzF,YAAI,CAAC,CAAC,OAAF,IAAa,CAAC,CAAC,OAAF,CAAU,OAAvB,IAAkC,CAAC,CAAC,OAAF,CAAU,OAAV,CAAkB,IAAxD,EAA8D;AAC1D,cAAI,CAAC,KAAK,oBAAL,CAA0B,CAAC,CAAC,OAAF,CAAU,OAAV,CAAkB,IAA5C,CAAL,EAAwD;AACpD,iBAAK,oBAAL,CAA0B,CAAC,CAAC,OAAF,CAAU,OAAV,CAAkB,IAA5C,IAAoD,IAAI,KAAJ,EAApD;AACH;;AAED,eAAK,oBAAL,CAA0B,CAAC,CAAC,OAAF,CAAU,OAAV,CAAkB,IAA5C,EAAkD,IAAlD,CAAuD,CAAC,CAAC,mBAAzD;AACH;AACJ;AACJ,KA7FM;;AA+FA,SAAA,YAAA,GAAe,MAAa;AAC/B,YAAM,OAAO,GAAG,IAAI,KAAJ,EAAhB;;AAEA,UAAI,KAAK,0BAAT,EAAqC;AACjC,QAAA,OAAO,CAAC,IAAR,CAAa,KAAK,0BAAlB;AACH;;AAED,UAAI,KAAK,aAAT,EAAwB;AACpB,QAAA,OAAO,CAAC,IAAR,CAAa,KAAK,aAAlB;AACH;;AAED,UAAI,KAAK,6BAAT,EAAwC;AACpC,QAAA,OAAO,CAAC,IAAR,CAAa,KAAK,6BAAlB;AACH;;AAED,UAAI,KAAK,mBAAL,CAAyB,MAAzB,GAAkC,CAAtC,EAAyC;AACrC,QAAA,OAAO,CAAC,IAAR,CAAa;AACT,UAAA,eAAe,EAAE,KAAK;AADb,SAAb;AAGH;;AAED,UAAI,KAAK,uBAAL,CAA6B,MAA7B,GAAsC,CAA1C,EAA6C;AACzC,QAAA,OAAO,CAAC,IAAR,CAAa;AACT,UAAA,wBAAwB,EAAE,KAAK;AADtB,SAAb;AAGH;;AAED,YAAM,SAAS,GAAe;AAC1B,QAAA,OAAO,EAAE,OADiB;AAE1B,QAAA,gBAAgB,EAAE,KAAK;AAFG,OAA9B;AAKA,YAAM,IAAI,GAAG,IAAI,CAAC,SAAL,CAAe,SAAf,CAAb,CAhC+B,CAkC/B;;AACA,WAAK,oBAAL,GAA4B,EAA5B;AACA,WAAK,0BAAL,GAAkC,IAAlC;AACA,WAAK,aAAL,GAAqB,IAArB;AACA,WAAK,6BAAL,GAAqC,IAArC;AACA,WAAK,mBAAL,GAA2B,EAA3B;AACA,WAAK,uBAAL,GAA+B,EAA/B;AACA,aAAO,IAAP;AACH,KA1CM;;AAsDA,SAAA,OAAA,GAAU,MAAW;AACxB,WAAK,cAAL,GAAsB,IAAtB;AACH,KAFM;;AAIC,SAAA,kBAAA,GAAsB,UAAD,IAA+B;AACxD;;;;;;;;;;;;;AAcA,cAAQ,UAAR;AACI,aAAK,GAAL;AACA,aAAK,IAAL;AACA,aAAK,IAAL;AACA,aAAK,IAAL;AACA,aAAK,IAAL;AACA,aAAK,IAAL;AACA,aAAK,IAAL;AAAW,iBAAO,YAAP;;AACX,aAAK,GAAL;AAAU,iBAAO,cAAP;;AACV,aAAK,GAAL;AAAU,iBAAO,WAAP;;AACV,aAAK,GAAL;AACA,aAAK,IAAL;AAAW,iBAAO,mBAAP;;AACX,aAAK,GAAL;AACA,aAAK,IAAL;AAAW,iBAAO,aAAP;;AACX,aAAK,GAAL;AACA,aAAK,GAAL;AAAU,iBAAO,SAAP;;AACV;AAAS,iBAAO,gBAAgB,UAAU,CAAC,QAAX,EAAvB;AAhBb;AAkBH,KAjCO;;AA9KJ,SAAK,aAAL,GAAqB,SAArB;AACA,SAAK,iBAAL,GAAyB,aAAzB;AACA,SAAK,eAAL,GAAuB,WAAvB;AAEA,SAAK,oBAAL,GAA4B,EAA5B;AACA,SAAK,mBAAL,GAA2B,EAA3B;AACA,SAAK,uBAAL,GAA+B,EAA/B;AACH;;AAEM,EAAA,cAAc,CAAC,iBAAD,EAA0B;AAC3C,QAAI,iBAAiB,GAAG,CAAxB,EAA2B;AAAE;AACzB,WAAK,mBAAL,CAAyB,IAAzB,CAA8B,IAAI,CAAC,GAAL,KAAa,iBAA3C;AACH;AACJ;;AAEM,EAAA,kBAAkB,CAAC,iBAAD,EAA0B;AAC/C,QAAI,iBAAiB,GAAG,CAAxB,EAA2B;AAAE;AACzB,WAAK,uBAAL,CAA6B,IAA7B,CAAkC,IAAI,CAAC,GAAL,KAAa,iBAA/C;AACH;AACJ,GAxCgC,CAqLjC;;;AACA,MAAW,YAAX,GAAuB;AACnB,WAAQ,MAAM,CAAC,IAAP,CAAY,KAAK,oBAAjB,EAAuC,MAAvC,KAAkD,CAAlD,IACJ,KAAK,0BAAL,KAAoC,IADhC,IAEJ,KAAK,aAAL,KAAuB,IAFnB,IAGJ,KAAK,6BAAL,KAAuC,IAHnC,IAIJ,KAAK,mBAAL,CAAyB,MAAzB,KAAoC,CAJhC,IAKJ,KAAK,uBAAL,CAA6B,MAA7B,KAAwC,CAL5C;AAMH;;AA7LgC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionStartEvent,\r\n    IEventListener,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n} from \"../common/Exports\";\r\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents\";\r\n\r\nexport interface ITelemetry {\r\n    Metrics: IMetric[];\r\n    ReceivedMessages: IStringDictionary<string[]>;\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport interface IMetric {\r\n    End?: string;\r\n    Error?: string;\r\n    Id?: string;\r\n    Name?: string;\r\n    Start?: string;\r\n    PhraseLatencyMs?: number[];\r\n    FirstHypothesisLatencyMs?: number[];\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\r\n    private privIsDisposed: boolean = false;\r\n\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    private privListeningTriggerMetric: IMetric = null;\r\n    private privMicMetric: IMetric = null;\r\n    private privConnectionEstablishMetric: IMetric = null;\r\n\r\n    private privMicStartTime: string;\r\n\r\n    private privConnectionId: string;\r\n    private privConnectionStartTime: string;\r\n\r\n    private privReceivedMessages: IStringDictionary<string[]>;\r\n    private privPhraseLatencies: number[];\r\n    private privHypothesisLatencies: number[];\r\n\r\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n\r\n        this.privReceivedMessages = {};\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n    }\r\n\r\n    public phraseReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public hypothesisReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public onEvent = (e: PlatformEvent): void => {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\r\n            this.privListeningTriggerMetric = {\r\n                End: e.eventTime,\r\n                Name: \"ListeningTrigger\",\r\n                Start: e.eventTime,\r\n            };\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\r\n            this.privConnectionId = e.sessionId;\r\n        }\r\n\r\n        if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\r\n            this.privConnectionStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Error: this.getConnectionError(e.statusCode),\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\r\n            if (e.message && e.message.headers && e.message.headers.path) {\r\n                if (!this.privReceivedMessages[e.message.headers.path]) {\r\n                    this.privReceivedMessages[e.message.headers.path] = new Array<string>();\r\n                }\r\n\r\n                this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTelemetry = (): string => {\r\n        const metrics = new Array<IMetric>();\r\n\r\n        if (this.privListeningTriggerMetric) {\r\n            metrics.push(this.privListeningTriggerMetric);\r\n        }\r\n\r\n        if (this.privMicMetric) {\r\n            metrics.push(this.privMicMetric);\r\n        }\r\n\r\n        if (this.privConnectionEstablishMetric) {\r\n            metrics.push(this.privConnectionEstablishMetric);\r\n        }\r\n\r\n        if (this.privPhraseLatencies.length > 0) {\r\n            metrics.push({\r\n                PhraseLatencyMs: this.privPhraseLatencies,\r\n            });\r\n        }\r\n\r\n        if (this.privHypothesisLatencies.length > 0) {\r\n            metrics.push({\r\n                FirstHypothesisLatencyMs: this.privHypothesisLatencies,\r\n            });\r\n        }\r\n\r\n        const telemetry: ITelemetry = {\r\n            Metrics: metrics,\r\n            ReceivedMessages: this.privReceivedMessages,\r\n        };\r\n\r\n        const json = JSON.stringify(telemetry);\r\n\r\n        // We dont want to send the same telemetry again. So clean those out.\r\n        this.privReceivedMessages = {};\r\n        this.privListeningTriggerMetric = null;\r\n        this.privMicMetric = null;\r\n        this.privConnectionEstablishMetric = null;\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n        return json;\r\n    }\r\n\r\n    // Determines if there are any telemetry events to send to the service.\r\n    public get hasTelemetry(): boolean {\r\n        return (Object.keys(this.privReceivedMessages).length !== 0 ||\r\n            this.privListeningTriggerMetric !== null ||\r\n            this.privMicMetric !== null ||\r\n            this.privConnectionEstablishMetric !== null ||\r\n            this.privPhraseLatencies.length !== 0 ||\r\n            this.privHypothesisLatencies.length !== 0);\r\n    }\r\n\r\n    public dispose = (): void => {\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    private getConnectionError = (statusCode: number): string => {\r\n        /*\r\n        -- Websocket status codes --\r\n        NormalClosure = 1000,\r\n        EndpointUnavailable = 1001,\r\n        ProtocolError = 1002,\r\n        InvalidMessageType = 1003,\r\n        Empty = 1005,\r\n        InvalidPayloadData = 1007,\r\n        PolicyViolation = 1008,\r\n        MessageTooBig = 1009,\r\n        MandatoryExtension = 1010,\r\n        InternalServerError = 1011\r\n        */\r\n\r\n        switch (statusCode) {\r\n            case 400:\r\n            case 1002:\r\n            case 1003:\r\n            case 1005:\r\n            case 1007:\r\n            case 1008:\r\n            case 1009: return \"BadRequest\";\r\n            case 401: return \"Unauthorized\";\r\n            case 403: return \"Forbidden\";\r\n            case 503:\r\n            case 1001: return \"ServerUnavailable\";\r\n            case 500:\r\n            case 1011: return \"ServerError\";\r\n            case 408:\r\n            case 504: return \"Timeout\";\r\n            default: return \"statuscode:\" + statusCode.toString();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}