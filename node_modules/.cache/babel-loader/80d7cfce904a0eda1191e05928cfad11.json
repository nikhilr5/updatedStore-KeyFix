{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\nimport { ConnectionState, createGuid, createNoDashGuid, Deferred, MessageType, PromiseHelper, ServiceEvent } from \"../common/Exports\";\nimport { ActivityReceivedEventArgs, CancellationErrorCode, CancellationReason, PropertyCollection, PropertyId, RecognitionEventArgs, ResultReason, SessionEventArgs, SpeechRecognitionCanceledEventArgs, SpeechRecognitionEventArgs, SpeechRecognitionResult } from \"../sdk/Exports\";\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager\";\nimport { CancellationErrorCodePropertyName, EnumTranslation, RecognitionStatus, RequestSession, ServiceRecognizerBase, SimpleSpeechPhrase, SpeechDetected, SpeechHypothesis } from \"./Exports\";\nimport { ActivityPayloadResponse } from \"./ServiceMessages/ActivityResponsePayload\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\nexport class DialogServiceAdapter extends ServiceRecognizerBase {\n  constructor(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector) {\n    super(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector);\n\n    this.sendMessage = message => {\n      const interactionGuid = createGuid();\n      const requestId = createNoDashGuid();\n      const agentMessage = {\n        context: {\n          interactionId: interactionGuid\n        },\n        messagePayload: message,\n        version: 0.5\n      };\n      const agentMessageJson = JSON.stringify(agentMessage);\n      this.fetchDialogConnection().onSuccessContinueWith(connection => {\n        connection.send(new SpeechConnectionMessage(MessageType.Text, \"agent\", requestId, \"application/json\", agentMessageJson));\n      });\n    };\n\n    this.listenOnce = (recoMode, successCallback, errorCallback) => {\n      this.privRecognizerConfig.recognitionMode = recoMode;\n      this.privSuccessCallback = successCallback;\n      this.privErrorCallback = errorCallback;\n      this.privDialogRequestSession.startNewRecognition();\n      this.privDialogRequestSession.listenForServiceTelemetry(this.privDialogAudioSource.events); // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\n\n      this.dialogConnectImpl();\n      this.sendPreAudioMessages();\n      return this.privDialogAudioSource.attach(this.privDialogRequestSession.audioNodeId).continueWithPromise(result => {\n        let audioNode;\n\n        if (result.isError) {\n          this.cancelRecognition(this.privDialogRequestSession.sessionId, this.privDialogRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error);\n          return PromiseHelper.fromError(result.error);\n        }\n\n        return this.privDialogAudioSource.format.onSuccessContinueWithPromise(format => {\n          audioNode = new ReplayableAudioNode(result.result, format.avgBytesPerSec);\n          this.privDialogRequestSession.onAudioSourceAttachCompleted(audioNode, false);\n          return this.privDialogAudioSource.deviceInfo.onSuccessContinueWithPromise(deviceInfo => {\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = {\n              source: deviceInfo\n            };\n            return this.configConnection().continueWithPromise(result => {\n              if (result.isError) {\n                this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error);\n                return PromiseHelper.fromError(result.error);\n              }\n\n              const sessionStartEventArgs = new SessionEventArgs(this.privDialogRequestSession.sessionId);\n\n              if (!!this.privRecognizer.sessionStarted) {\n                this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\n              }\n\n              const audioSendPromise = this.sendAudio(audioNode); // /* tslint:disable:no-empty */\n\n              audioSendPromise.on(_ => {}, error => {\n                this.cancelRecognition(this.privDialogRequestSession.sessionId, this.privDialogRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\n              });\n              return PromiseHelper.fromResult(true);\n            });\n          });\n        });\n      });\n    };\n\n    this.sendAudio = audioStreamNode => {\n      return this.privDialogAudioSource.format.onSuccessContinueWithPromise(audioFormat => {\n        // NOTE: Home-baked promises crash ios safari during the invocation\n        // of the error callback chain (looks like the recursion is way too deep, and\n        // it blows up the stack). The following construct is a stop-gap that does not\n        // bubble the error up the callback chain and hence circumvents this problem.\n        // TODO: rewrite with ES6 promises.\n        const deferred = new Deferred(); // The time we last sent data to the service.\n\n        let nextSendTime = Date.now(); // Max amount to send before we start to throttle\n\n        const fastLaneSizeMs = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\n        const maxSendUnthrottledBytes = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\n        const startRecogNumber = this.privDialogRequestSession.recogNumber;\n\n        const readAndUploadCycle = () => {\n          // If speech is done, stop sending audio.\n          if (!this.privDialogIsDisposed && !this.privDialogRequestSession.isSpeechEnded && this.privDialogRequestSession.isRecognizing && this.privDialogRequestSession.recogNumber === startRecogNumber) {\n            this.fetchDialogConnection().on(connection => {\n              audioStreamNode.read().on(audioStreamChunk => {\n                // we have a new audio chunk to upload.\n                if (this.privDialogRequestSession.isSpeechEnded) {\n                  // If service already recognized audio end then don't send any more audio\n                  deferred.resolve(true);\n                  return;\n                }\n\n                let payload;\n                let sendDelay;\n\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\n                  payload = null;\n                  sendDelay = 0;\n                } else {\n                  payload = audioStreamChunk.buffer;\n                  this.privDialogRequestSession.onAudioSent(payload.byteLength);\n\n                  if (maxSendUnthrottledBytes >= this.privDialogRequestSession.bytesSent) {\n                    sendDelay = 0;\n                  } else {\n                    sendDelay = Math.max(0, nextSendTime - Date.now());\n                  }\n                } // Are we ready to send, or need we delay more?\n\n\n                setTimeout(() => {\n                  if (payload !== null) {\n                    nextSendTime = Date.now() + payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2);\n                  }\n\n                  const uploaded = connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privDialogRequestSession.requestId, null, payload));\n\n                  if (audioStreamChunk && !audioStreamChunk.isEnd) {\n                    uploaded.continueWith(_ => {\n                      // Regardless of success or failure, schedule the next upload.\n                      // If the underlying connection was broken, the next cycle will\n                      // get a new connection and re-transmit missing audio automatically.\n                      readAndUploadCycle();\n                    });\n                  } else {\n                    // the audio stream has been closed, no need to schedule next\n                    // read-upload cycle.\n                    this.privDialogRequestSession.onSpeechEnded();\n                    deferred.resolve(true);\n                  }\n                }, sendDelay);\n              }, error => {\n                if (this.privDialogRequestSession.isSpeechEnded) {\n                  // For whatever reason, Reject is used to remove queue subscribers inside\n                  // the Queue.DrainAndDispose invoked from DetachAudioNode down below, which\n                  // means that sometimes things can be rejected in normal circumstances, without\n                  // any errors.\n                  deferred.resolve(true); // TODO: remove the argument, it's is completely meaningless.\n                } else {\n                  // Only reject, if there was a proper error.\n                  deferred.reject(error);\n                }\n              });\n            }, error => {\n              deferred.reject(error);\n            });\n          }\n        };\n\n        readAndUploadCycle();\n        return deferred.promise();\n      });\n    };\n\n    this.receiveDialogMessageOverride = () => {\n      // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\n      const communicationCustodian = new Deferred();\n      this.fetchDialogConnection().on(connection => {\n        return connection.read().onSuccessContinueWithPromise(message => {\n          const isDisposed = this.isDisposed();\n          const terminateMessageLoop = !this.isDisposed() && this.terminateMessageLoop;\n\n          if (isDisposed || terminateMessageLoop) {\n            // We're done.\n            communicationCustodian.resolve(undefined);\n            return PromiseHelper.fromResult(undefined);\n          }\n\n          if (!message) {\n            return this.receiveDialogMessageOverride();\n          }\n\n          const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\n\n          switch (connectionMessage.path.toLowerCase()) {\n            case \"turn.start\":\n              {\n                const turnRequestId = connectionMessage.requestId.toUpperCase();\n                const audioSessionReqId = this.privDialogRequestSession.requestId.toUpperCase(); // turn started by the service\n\n                if (turnRequestId !== audioSessionReqId) {\n                  this.privTurnStateManager.StartTurn(turnRequestId);\n                } else {\n                  this.privDialogRequestSession.onServiceTurnStartResponse();\n                }\n              }\n              break;\n\n            case \"speech.startdetected\":\n              const speechStartDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\n              const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privDialogRequestSession.sessionId);\n\n              if (!!this.privRecognizer.speechStartDetected) {\n                this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\n              }\n\n              break;\n\n            case \"speech.enddetected\":\n              let json;\n\n              if (connectionMessage.textBody.length > 0) {\n                json = connectionMessage.textBody;\n              } else {\n                // If the request was empty, the JSON returned is empty.\n                json = \"{ Offset: 0 }\";\n              }\n\n              const speechStopDetected = SpeechDetected.fromJSON(json);\n              this.privDialogRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privDialogRequestSession.currentTurnAudioOffset);\n              const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privDialogRequestSession.currentTurnAudioOffset, this.privDialogRequestSession.sessionId);\n\n              if (!!this.privRecognizer.speechEndDetected) {\n                this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\n              }\n\n              break;\n\n            case \"turn.end\":\n              {\n                const turnEndRequestId = connectionMessage.requestId.toUpperCase();\n                const audioSessionReqId = this.privDialogRequestSession.requestId.toUpperCase(); // turn started by the service\n\n                if (turnEndRequestId !== audioSessionReqId) {\n                  this.privTurnStateManager.CompleteTurn(turnEndRequestId);\n                } else {\n                  // Audio session turn\n                  const sessionStopEventArgs = new SessionEventArgs(this.privDialogRequestSession.sessionId);\n                  this.privDialogRequestSession.onServiceTurnEndResponse(false);\n\n                  if (this.privDialogRequestSession.isSpeechEnded) {\n                    if (!!this.privRecognizer.sessionStopped) {\n                      this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\n                    }\n                  } // report result to promise.\n\n\n                  if (!!this.privSuccessCallback && this.privLastResult) {\n                    try {\n                      this.privSuccessCallback(this.privLastResult);\n                      this.privLastResult = null;\n                    } catch (e) {\n                      if (!!this.privErrorCallback) {\n                        this.privErrorCallback(e);\n                      }\n                    } // Only invoke the call back once.\n                    // and if it's successful don't invoke the\n                    // error after that.\n\n\n                    this.privSuccessCallback = undefined;\n                    this.privErrorCallback = undefined;\n                  }\n                }\n              }\n              break;\n\n            default:\n              if (!this.processTypeSpecificMessages(connectionMessage)) {\n                if (!!this.serviceEvents) {\n                  this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\n                }\n              }\n\n          }\n\n          return this.receiveDialogMessageOverride();\n        });\n      }, error => {\n        this.terminateMessageLoop = true;\n        communicationCustodian.resolve(undefined);\n        return PromiseHelper.fromResult(undefined);\n      });\n      return communicationCustodian.promise();\n    };\n\n    this.fetchDialogConnection = () => {\n      return this.configConnection();\n    };\n\n    this.sendAgentConfig = connection => {\n      if (this.agentConfig && !this.agentConfigSent) {\n        if (this.privRecognizerConfig.parameters.getProperty(PropertyId.Conversation_DialogType) === \"custom_commands\") {\n          const config = this.agentConfig.get();\n          config.botInfo.commandsCulture = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-us\");\n          this.agentConfig.set(config);\n        }\n\n        const agentConfigJson = this.agentConfig.toJsonString(); // guard against sending this multiple times on one connection\n\n        this.agentConfigSent = true;\n        return connection.send(new SpeechConnectionMessage(MessageType.Text, \"agent.config\", this.privDialogRequestSession.requestId, \"application/json\", agentConfigJson));\n      }\n\n      return PromiseHelper.fromResult(true);\n    };\n\n    this.sendAgentContext = connection => {\n      const guid = createGuid();\n      const speechActivityTemplate = this.privDialogServiceConnector.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\n      const agentContext = {\n        channelData: \"\",\n        context: {\n          interactionId: guid\n        },\n        messagePayload: typeof speechActivityTemplate === undefined ? undefined : speechActivityTemplate,\n        version: 0.5\n      };\n      const agentContextJson = JSON.stringify(agentContext);\n      return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.agent.context\", this.privDialogRequestSession.requestId, \"application/json\", agentContextJson));\n    };\n\n    this.privDialogServiceConnector = dialogServiceConnector;\n    this.privDialogAuthentication = authentication;\n    this.receiveMessageOverride = this.receiveDialogMessageOverride;\n    this.privTurnStateManager = new DialogServiceTurnStateManager();\n    this.recognizeOverride = this.listenOnce;\n    this.connectImplOverride = this.dialogConnectImpl;\n    this.configConnectionOverride = this.configConnection;\n    this.fetchConnectionOverride = this.fetchDialogConnection;\n    this.disconnectOverride = this.privDisconnect;\n    this.privDialogAudioSource = audioSource;\n    this.privDialogRequestSession = new RequestSession(audioSource.id());\n    this.privDialogConnectionFactory = connectionFactory;\n    this.privDialogIsDisposed = false;\n    this.agentConfigSent = false;\n    this.privLastResult = null;\n  }\n\n  isDisposed() {\n    return this.privDialogIsDisposed;\n  }\n\n  dispose(reason) {\n    this.privDialogIsDisposed = true;\n\n    if (this.privConnectionConfigPromise) {\n      this.privConnectionConfigPromise.onSuccessContinueWith(connection => {\n        connection.dispose(reason);\n      });\n    }\n  }\n\n  privDisconnect() {\n    this.cancelRecognition(this.privDialogRequestSession.sessionId, this.privDialogRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.NoError, \"Disconnecting\");\n    this.terminateMessageLoop = true;\n    this.agentConfigSent = false;\n\n    if (this.privDialogConnectionPromise.result().isCompleted) {\n      if (!this.privDialogConnectionPromise.result().isError) {\n        this.privDialogConnectionPromise.result().result.dispose();\n        this.privDialogConnectionPromise = null;\n      }\n    } else {\n      this.privDialogConnectionPromise.onSuccessContinueWith(connection => {\n        connection.dispose();\n      });\n    }\n  }\n\n  processTypeSpecificMessages(connectionMessage) {\n    const resultProps = new PropertyCollection();\n\n    if (connectionMessage.messageType === MessageType.Text) {\n      resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n    }\n\n    let result;\n    let processed;\n\n    switch (connectionMessage.path.toLowerCase()) {\n      case \"speech.phrase\":\n        const speechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n        this.privDialogRequestSession.onPhraseRecognized(this.privDialogRequestSession.currentTurnAudioOffset + speechPhrase.Offset + speechPhrase.Duration);\n\n        if (speechPhrase.RecognitionStatus === RecognitionStatus.Success) {\n          const args = this.fireEventForResult(speechPhrase, resultProps);\n          this.privLastResult = args.result;\n\n          if (!!this.privDialogServiceConnector.recognized) {\n            try {\n              this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, args);\n              /* tslint:disable:no-empty */\n            } catch (error) {// Not going to let errors in the event handler\n              // trip things up.\n            }\n          }\n        }\n\n        processed = true;\n        break;\n\n      case \"speech.hypothesis\":\n        const hypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n        const offset = hypothesis.Offset + this.privDialogRequestSession.currentTurnAudioOffset;\n        result = new SpeechRecognitionResult(this.privDialogRequestSession.requestId, ResultReason.RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, undefined, connectionMessage.textBody, resultProps);\n        this.privDialogRequestSession.onHypothesis(offset);\n        const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privDialogRequestSession.sessionId);\n\n        if (!!this.privDialogServiceConnector.recognizing) {\n          try {\n            this.privDialogServiceConnector.recognizing(this.privDialogServiceConnector, ev);\n            /* tslint:disable:no-empty */\n          } catch (error) {// Not going to let errors in the event handler\n            // trip things up.\n          }\n        }\n\n        processed = true;\n        break;\n\n      case \"audio\":\n        {\n          const audioRequestId = connectionMessage.requestId.toUpperCase();\n          const turn = this.privTurnStateManager.GetTurn(audioRequestId);\n\n          try {\n            // Empty binary message signals end of stream.\n            if (!connectionMessage.binaryBody) {\n              turn.endAudioStream();\n            } else {\n              turn.audioStream.write(connectionMessage.binaryBody);\n            }\n          } catch (error) {// Not going to let errors in the event handler\n            // trip things up.\n          }\n        }\n        processed = true;\n        break;\n\n      case \"response\":\n        {\n          const responseRequestId = connectionMessage.requestId.toUpperCase();\n          const activityPayload = ActivityPayloadResponse.fromJSON(connectionMessage.textBody);\n          const turn = this.privTurnStateManager.GetTurn(responseRequestId); // update the conversation Id\n\n          if (activityPayload.conversationId) {\n            const updateAgentConfig = this.agentConfig.get();\n            updateAgentConfig.botInfo.conversationId = activityPayload.conversationId;\n            this.agentConfig.set(updateAgentConfig);\n          }\n\n          const pullAudioOutputStream = turn.processActivityPayload(activityPayload);\n          const activity = new ActivityReceivedEventArgs(activityPayload.messagePayload, pullAudioOutputStream);\n\n          if (!!this.privDialogServiceConnector.activityReceived) {\n            try {\n              this.privDialogServiceConnector.activityReceived(this.privDialogServiceConnector, activity);\n              /* tslint:disable:no-empty */\n            } catch (error) {// Not going to let errors in the event handler\n              // trip things up.\n            }\n          }\n        }\n        processed = true;\n        break;\n\n      default:\n        break;\n    }\n\n    return processed;\n  } // Cancels recognition.\n\n\n  cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {\n    this.terminateMessageLoop = true;\n\n    if (!!this.privDialogRequestSession.isRecognizing) {\n      this.privDialogRequestSession.onStopRecognizing();\n    }\n\n    if (!!this.privDialogServiceConnector.canceled) {\n      const properties = new PropertyCollection();\n      properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n      const cancelEvent = new SpeechRecognitionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);\n\n      try {\n        this.privDialogServiceConnector.canceled(this.privDialogServiceConnector, cancelEvent);\n        /* tslint:disable:no-empty */\n      } catch (_a) {}\n\n      if (!!this.privSuccessCallback) {\n        const result = new SpeechRecognitionResult(undefined, // ResultId\n        ResultReason.Canceled, undefined, // Text\n        undefined, // Druation\n        undefined, // Offset\n        error, undefined, // Json\n        properties);\n\n        try {\n          this.privSuccessCallback(result);\n          this.privSuccessCallback = undefined;\n          /* tslint:disable:no-empty */\n        } catch (_b) {}\n      }\n    }\n  }\n\n  sendWaveHeader(connection) {\n    return this.audioSource.format.onSuccessContinueWithPromise(format => {\n      return connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privDialogRequestSession.requestId, \"audio/x-wav\", format.header));\n    });\n  } // Establishes a websocket connection to the end point.\n\n\n  dialogConnectImpl(isUnAuthorized = false) {\n    if (this.privDialogConnectionPromise) {\n      if (this.privDialogConnectionPromise.result().isCompleted && (this.privDialogConnectionPromise.result().isError || this.privDialogConnectionPromise.result().result.state() === ConnectionState.Disconnected)) {\n        this.agentConfigSent = false;\n        this.privDialogConnectionPromise = null;\n        this.terminateMessageLoop = true;\n        return this.configConnection();\n      } else {\n        return this.privDialogConnectionPromise;\n      }\n    }\n\n    this.privDialogAuthFetchEventId = createNoDashGuid(); // keep the connectionId for reconnect events\n\n    if (this.privConnectionId === undefined) {\n      this.privConnectionId = createNoDashGuid();\n    }\n\n    this.privDialogRequestSession.onPreConnectionStart(this.privDialogAuthFetchEventId, this.privConnectionId);\n    const authPromise = isUnAuthorized ? this.privDialogAuthentication.fetchOnExpiry(this.privDialogAuthFetchEventId) : this.privDialogAuthentication.fetch(this.privDialogAuthFetchEventId);\n    this.privDialogConnectionPromise = authPromise.continueWithPromise(result => {\n      if (result.isError) {\n        this.privDialogRequestSession.onAuthCompleted(true, result.error);\n        throw new Error(result.error);\n      } else {\n        this.privDialogRequestSession.onAuthCompleted(false);\n      }\n\n      const connection = this.privDialogConnectionFactory.create(this.privRecognizerConfig, result.result, this.privConnectionId);\n      this.privDialogRequestSession.listenForServiceTelemetry(connection.events); // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\n      // it'll stop sending events.\n\n      connection.events.attach(event => {\n        this.connectionEvents.onEvent(event);\n      });\n      return connection.open().onSuccessContinueWithPromise(response => {\n        if (response.statusCode === 200) {\n          this.privDialogRequestSession.onPreConnectionStart(this.privDialogAuthFetchEventId, this.privConnectionId);\n          this.privDialogRequestSession.onConnectionEstablishCompleted(response.statusCode);\n          return PromiseHelper.fromResult(connection);\n        } else if (response.statusCode === 403 && !isUnAuthorized) {\n          return this.dialogConnectImpl(true);\n        } else {\n          this.privDialogRequestSession.onConnectionEstablishCompleted(response.statusCode, response.reason);\n          return PromiseHelper.fromError(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\n        }\n      });\n    });\n    this.privConnectionLoop = this.startMessageLoop();\n    return this.privDialogConnectionPromise;\n  }\n\n  startMessageLoop() {\n    this.terminateMessageLoop = false;\n    const messageRetrievalPromise = this.receiveDialogMessageOverride();\n    return messageRetrievalPromise.on(r => {\n      return true;\n    }, error => {\n      this.cancelRecognition(this.privDialogRequestSession.sessionId, this.privDialogRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\n    });\n  } // Takes an established websocket connection to the endpoint and sends speech configuration information.\n\n\n  configConnection() {\n    if (this.privConnectionConfigPromise) {\n      if (this.privConnectionConfigPromise.result().isCompleted && (this.privConnectionConfigPromise.result().isError || this.privConnectionConfigPromise.result().result.state() === ConnectionState.Disconnected)) {\n        this.privConnectionConfigPromise = null;\n        return this.configConnection();\n      } else {\n        return this.privConnectionConfigPromise;\n      }\n    }\n\n    if (this.terminateMessageLoop) {\n      this.terminateMessageLoop = false;\n      return PromiseHelper.fromError(`Connection to service terminated.`);\n    }\n\n    this.privConnectionConfigPromise = this.dialogConnectImpl().onSuccessContinueWithPromise(connection => {\n      return this.sendSpeechServiceConfig(connection, this.privDialogRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize()).onSuccessContinueWithPromise(_ => {\n        return this.sendAgentConfig(connection).onSuccessContinueWith(_ => {\n          return connection;\n        });\n      });\n    });\n    return this.privConnectionConfigPromise;\n  }\n\n  sendPreAudioMessages() {\n    this.fetchDialogConnection().onSuccessContinueWith(connection => {\n      this.sendAgentContext(connection);\n      this.sendWaveHeader(connection);\n    });\n  }\n\n  fireEventForResult(serviceResult, properties) {\n    const resultReason = EnumTranslation.implTranslateRecognitionResult(serviceResult.RecognitionStatus);\n    const offset = serviceResult.Offset + this.privDialogRequestSession.currentTurnAudioOffset;\n    const result = new SpeechRecognitionResult(this.privDialogRequestSession.requestId, resultReason, serviceResult.DisplayText, serviceResult.Duration, offset, undefined, JSON.stringify(serviceResult), properties);\n    const ev = new SpeechRecognitionEventArgs(result, offset, this.privDialogRequestSession.sessionId);\n    return ev;\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/DialogServiceAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport {\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createGuid,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IStreamChunk,\r\n    MessageType,\r\n    Promise,\r\n    PromiseHelper,\r\n    PromiseResult,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    ActivityReceivedEventArgs,\r\n    AudioOutputStream,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    DialogServiceConnector,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    PullAudioOutputStream,\r\n    RecognitionEventArgs,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager\";\r\nimport {\r\n    AgentConfig,\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionStatus,\r\n    RequestSession,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechDetected,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognitionMode, RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { ActivityPayloadResponse } from \"./ServiceMessages/ActivityResponsePayload\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport class DialogServiceAdapter extends ServiceRecognizerBase {\r\n    private privDialogServiceConnector: DialogServiceConnector;\r\n    private privDialogConnectionFactory: IConnectionFactory;\r\n    private privDialogAuthFetchEventId: string;\r\n    private privDialogIsDisposed: boolean;\r\n    private privDialogAuthentication: IAuthentication;\r\n    private privDialogAudioSource: IAudioSource;\r\n    private privDialogRequestSession: RequestSession;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchDialogConnection instead.\r\n    private privConnectionConfigPromise: Promise<IConnection>;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchDialogConnection instead.\r\n    private privDialogConnectionPromise: Promise<IConnection>;\r\n\r\n    private privConnectionLoop: Promise<IConnection>;\r\n    private terminateMessageLoop: boolean;\r\n    private agentConfigSent: boolean;\r\n    private privLastResult: SpeechRecognitionResult;\r\n\r\n    // Turns are of two kinds:\r\n    // 1: SR turns, end when the SR result is returned and then turn end.\r\n    // 2: Service turns where an activity is sent by the service along with the audio.\r\n    private privTurnStateManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        dialogServiceConnector: DialogServiceConnector) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector);\r\n\r\n        this.privDialogServiceConnector = dialogServiceConnector;\r\n        this.privDialogAuthentication = authentication;\r\n        this.receiveMessageOverride = this.receiveDialogMessageOverride;\r\n        this.privTurnStateManager = new DialogServiceTurnStateManager();\r\n        this.recognizeOverride = this.listenOnce;\r\n        this.connectImplOverride = this.dialogConnectImpl;\r\n        this.configConnectionOverride = this.configConnection;\r\n        this.fetchConnectionOverride = this.fetchDialogConnection;\r\n        this.disconnectOverride = this.privDisconnect;\r\n        this.privDialogAudioSource = audioSource;\r\n        this.privDialogRequestSession = new RequestSession(audioSource.id());\r\n        this.privDialogConnectionFactory = connectionFactory;\r\n        this.privDialogIsDisposed = false;\r\n        this.agentConfigSent = false;\r\n        this.privLastResult = null;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privDialogIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        this.privDialogIsDisposed = true;\r\n        if (this.privConnectionConfigPromise) {\r\n            this.privConnectionConfigPromise.onSuccessContinueWith((connection: IConnection) => {\r\n                connection.dispose(reason);\r\n            });\r\n        }\r\n    }\r\n\r\n    public sendMessage = (message: string): void => {\r\n        const interactionGuid: string = createGuid();\r\n        const requestId: string = createNoDashGuid();\r\n\r\n        const agentMessage: any = {\r\n            context: {\r\n                interactionId: interactionGuid\r\n            },\r\n            messagePayload: message,\r\n            version: 0.5\r\n        };\r\n\r\n        const agentMessageJson = JSON.stringify(agentMessage);\r\n\r\n        this.fetchDialogConnection().onSuccessContinueWith((connection: IConnection) => {\r\n            connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"agent\",\r\n                requestId,\r\n                \"application/json\",\r\n                agentMessageJson));\r\n        });\r\n    }\r\n\r\n    protected privDisconnect(): void {\r\n        this.cancelRecognition(this.privDialogRequestSession.sessionId,\r\n            this.privDialogRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        this.agentConfigSent = false;\r\n        if (this.privDialogConnectionPromise.result().isCompleted) {\r\n            if (!this.privDialogConnectionPromise.result().isError) {\r\n                this.privDialogConnectionPromise.result().result.dispose();\r\n                this.privDialogConnectionPromise = null;\r\n            }\r\n        } else {\r\n            this.privDialogConnectionPromise.onSuccessContinueWith((connection: IConnection) => {\r\n                connection.dispose();\r\n            });\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): boolean {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        let result: SpeechRecognitionResult;\r\n        let processed: boolean;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.phrase\":\r\n                const speechPhrase: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                this.privDialogRequestSession.onPhraseRecognized(this.privDialogRequestSession.currentTurnAudioOffset + speechPhrase.Offset + speechPhrase.Duration);\r\n\r\n                if (speechPhrase.RecognitionStatus === RecognitionStatus.Success) {\r\n                    const args: SpeechRecognitionEventArgs = this.fireEventForResult(speechPhrase, resultProps);\r\n                    this.privLastResult = args.result;\r\n\r\n                    if (!!this.privDialogServiceConnector.recognized) {\r\n                        try {\r\n                            this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, args);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.hypothesis\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privDialogRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privDialogRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privDialogRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privDialogRequestSession.sessionId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognizing) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognizing(this.privDialogServiceConnector, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            case \"audio\":\r\n                {\r\n                    const audioRequestId = connectionMessage.requestId.toUpperCase();\r\n                    const turn = this.privTurnStateManager.GetTurn(audioRequestId);\r\n                    try {\r\n                        // Empty binary message signals end of stream.\r\n                        if (!connectionMessage.binaryBody) {\r\n                            turn.endAudioStream();\r\n                        } else {\r\n                            turn.audioStream.write(connectionMessage.binaryBody);\r\n                        }\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            case \"response\":\r\n                {\r\n                    const responseRequestId = connectionMessage.requestId.toUpperCase();\r\n                    const activityPayload: ActivityPayloadResponse = ActivityPayloadResponse.fromJSON(connectionMessage.textBody);\r\n                    const turn = this.privTurnStateManager.GetTurn(responseRequestId);\r\n\r\n                    // update the conversation Id\r\n                    if (activityPayload.conversationId) {\r\n                        const updateAgentConfig = this.agentConfig.get();\r\n                        updateAgentConfig.botInfo.conversationId = activityPayload.conversationId;\r\n                        this.agentConfig.set(updateAgentConfig);\r\n                    }\r\n\r\n                    const pullAudioOutputStream: PullAudioOutputStreamImpl = turn.processActivityPayload(activityPayload);\r\n                    const activity = new ActivityReceivedEventArgs(activityPayload.messagePayload, pullAudioOutputStream);\r\n                    if (!!this.privDialogServiceConnector.activityReceived) {\r\n                        try {\r\n                            this.privDialogServiceConnector.activityReceived(this.privDialogServiceConnector, activity);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        if (!!this.privDialogRequestSession.isRecognizing) {\r\n            this.privDialogRequestSession.onStopRecognizing();\r\n        }\r\n\r\n        if (!!this.privDialogServiceConnector.canceled) {\r\n            const properties: PropertyCollection = new PropertyCollection();\r\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n\r\n            try {\r\n                this.privDialogServiceConnector.canceled(this.privDialogServiceConnector, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n\r\n            if (!!this.privSuccessCallback) {\r\n                const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                    undefined, // ResultId\r\n                    ResultReason.Canceled,\r\n                    undefined, // Text\r\n                    undefined, // Druation\r\n                    undefined, // Offset\r\n                    error,\r\n                    undefined, // Json\r\n                    properties);\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                    this.privSuccessCallback = undefined;\r\n                    /* tslint:disable:no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected listenOnce = (\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallback: (e: string) => void\r\n    ): Promise<boolean> => {\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallback;\r\n\r\n        this.privDialogRequestSession.startNewRecognition();\r\n        this.privDialogRequestSession.listenForServiceTelemetry(this.privDialogAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        this.dialogConnectImpl();\r\n\r\n        this.sendPreAudioMessages();\r\n\r\n        return this.privDialogAudioSource\r\n            .attach(this.privDialogRequestSession.audioNodeId)\r\n            .continueWithPromise<boolean>((result: PromiseResult<IAudioStreamNode>) => {\r\n                let audioNode: ReplayableAudioNode;\r\n\r\n                if (result.isError) {\r\n                    this.cancelRecognition(this.privDialogRequestSession.sessionId, this.privDialogRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error);\r\n                    return PromiseHelper.fromError<boolean>(result.error);\r\n                }\r\n\r\n                return this.privDialogAudioSource.format.onSuccessContinueWithPromise<boolean>((format: AudioStreamFormatImpl) => {\r\n                    audioNode = new ReplayableAudioNode(result.result, format.avgBytesPerSec);\r\n                    this.privDialogRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n                    return this.privDialogAudioSource.deviceInfo.onSuccessContinueWithPromise<boolean>((deviceInfo: ISpeechConfigAudioDevice): Promise<boolean> => {\r\n                        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n                        return this.configConnection()\r\n                            .continueWithPromise<boolean>((result: PromiseResult<IConnection>): Promise<boolean> => {\r\n                                if (result.isError) {\r\n                                    this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error);\r\n                                    return PromiseHelper.fromError(result.error);\r\n                                }\r\n\r\n                                const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privDialogRequestSession.sessionId);\r\n\r\n                                if (!!this.privRecognizer.sessionStarted) {\r\n                                    this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n                                }\r\n\r\n                                const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n                                // /* tslint:disable:no-empty */\r\n                                audioSendPromise.on((_: boolean) => { /*add? return true;*/ }, (error: string) => {\r\n                                    this.cancelRecognition(this.privDialogRequestSession.sessionId, this.privDialogRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n                                });\r\n\r\n                                return PromiseHelper.fromResult(true);\r\n                            });\r\n                    });\r\n                });\r\n            });\r\n    }\r\n\r\n    protected sendAudio = (audioStreamNode: IAudioStreamNode): Promise<boolean> => {\r\n        return this.privDialogAudioSource.format.onSuccessContinueWithPromise<boolean>((audioFormat: AudioStreamFormatImpl) => {\r\n            // NOTE: Home-baked promises crash ios safari during the invocation\r\n            // of the error callback chain (looks like the recursion is way too deep, and\r\n            // it blows up the stack). The following construct is a stop-gap that does not\r\n            // bubble the error up the callback chain and hence circumvents this problem.\r\n            // TODO: rewrite with ES6 promises.\r\n            const deferred = new Deferred<boolean>();\r\n\r\n            // The time we last sent data to the service.\r\n            let nextSendTime: number = Date.now();\r\n\r\n            // Max amount to send before we start to throttle\r\n            const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n            const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n            const startRecogNumber: number = this.privDialogRequestSession.recogNumber;\r\n\r\n            const readAndUploadCycle = () => {\r\n\r\n                // If speech is done, stop sending audio.\r\n                if (!this.privDialogIsDisposed &&\r\n                    !this.privDialogRequestSession.isSpeechEnded &&\r\n                    this.privDialogRequestSession.isRecognizing &&\r\n                    this.privDialogRequestSession.recogNumber === startRecogNumber) {\r\n                    this.fetchDialogConnection().on((connection: IConnection) => {\r\n                        audioStreamNode.read().on(\r\n                            (audioStreamChunk: IStreamChunk<ArrayBuffer>) => {\r\n                                // we have a new audio chunk to upload.\r\n                                if (this.privDialogRequestSession.isSpeechEnded) {\r\n                                    // If service already recognized audio end then don't send any more audio\r\n                                    deferred.resolve(true);\r\n                                    return;\r\n                                }\r\n\r\n                                let payload: ArrayBuffer;\r\n                                let sendDelay: number;\r\n\r\n                                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                                    payload = null;\r\n                                    sendDelay = 0;\r\n                                } else {\r\n                                    payload = audioStreamChunk.buffer;\r\n                                    this.privDialogRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                                    if (maxSendUnthrottledBytes >= this.privDialogRequestSession.bytesSent) {\r\n                                        sendDelay = 0;\r\n                                    } else {\r\n                                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                                    }\r\n                                }\r\n\r\n                                // Are we ready to send, or need we delay more?\r\n                                setTimeout(() => {\r\n                                    if (payload !== null) {\r\n                                        nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                                    }\r\n\r\n                                    const uploaded: Promise<boolean> = connection.send(\r\n                                        new SpeechConnectionMessage(\r\n                                            MessageType.Binary, \"audio\", this.privDialogRequestSession.requestId, null, payload));\r\n\r\n                                    if (audioStreamChunk && !audioStreamChunk.isEnd) {\r\n                                        uploaded.continueWith((_: PromiseResult<boolean>) => {\r\n\r\n                                            // Regardless of success or failure, schedule the next upload.\r\n                                            // If the underlying connection was broken, the next cycle will\r\n                                            // get a new connection and re-transmit missing audio automatically.\r\n                                            readAndUploadCycle();\r\n                                        });\r\n                                    } else {\r\n                                        // the audio stream has been closed, no need to schedule next\r\n                                        // read-upload cycle.\r\n                                        this.privDialogRequestSession.onSpeechEnded();\r\n                                        deferred.resolve(true);\r\n                                    }\r\n                                }, sendDelay);\r\n                            },\r\n                            (error: string) => {\r\n                                if (this.privDialogRequestSession.isSpeechEnded) {\r\n                                    // For whatever reason, Reject is used to remove queue subscribers inside\r\n                                    // the Queue.DrainAndDispose invoked from DetachAudioNode down below, which\r\n                                    // means that sometimes things can be rejected in normal circumstances, without\r\n                                    // any errors.\r\n                                    deferred.resolve(true); // TODO: remove the argument, it's is completely meaningless.\r\n                                } else {\r\n                                    // Only reject, if there was a proper error.\r\n                                    deferred.reject(error);\r\n                                }\r\n                            });\r\n                    }, (error: string) => {\r\n                        deferred.reject(error);\r\n                    });\r\n                }\r\n            };\r\n\r\n            readAndUploadCycle();\r\n\r\n            return deferred.promise();\r\n        });\r\n    }\r\n\r\n    protected sendWaveHeader(connection: IConnection): Promise<boolean> {\r\n        return this.audioSource.format.onSuccessContinueWithPromise<boolean>((format: AudioStreamFormatImpl) => {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Binary,\r\n                \"audio\",\r\n                this.privDialogRequestSession.requestId,\r\n                \"audio/x-wav\",\r\n                format.header));\r\n        });\r\n    }\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    private dialogConnectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n        if (this.privDialogConnectionPromise) {\r\n            if (this.privDialogConnectionPromise.result().isCompleted &&\r\n                (this.privDialogConnectionPromise.result().isError\r\n                    || this.privDialogConnectionPromise.result().result.state() === ConnectionState.Disconnected)) {\r\n                this.agentConfigSent = false;\r\n                this.privDialogConnectionPromise = null;\r\n                this.terminateMessageLoop = true;\r\n                return this.configConnection();\r\n            } else {\r\n                return this.privDialogConnectionPromise;\r\n            }\r\n        }\r\n\r\n        this.privDialogAuthFetchEventId = createNoDashGuid();\r\n\r\n        // keep the connectionId for reconnect events\r\n        if (this.privConnectionId === undefined) {\r\n            this.privConnectionId = createNoDashGuid();\r\n        }\r\n\r\n        this.privDialogRequestSession.onPreConnectionStart(this.privDialogAuthFetchEventId, this.privConnectionId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privDialogAuthentication.fetchOnExpiry(this.privDialogAuthFetchEventId) : this.privDialogAuthentication.fetch(this.privDialogAuthFetchEventId);\r\n\r\n        this.privDialogConnectionPromise = authPromise\r\n            .continueWithPromise((result: PromiseResult<AuthInfo>) => {\r\n                if (result.isError) {\r\n                    this.privDialogRequestSession.onAuthCompleted(true, result.error);\r\n                    throw new Error(result.error);\r\n                } else {\r\n                    this.privDialogRequestSession.onAuthCompleted(false);\r\n                }\r\n\r\n                const connection: IConnection = this.privDialogConnectionFactory.create(this.privRecognizerConfig, result.result, this.privConnectionId);\r\n\r\n                this.privDialogRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n                // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n                // it'll stop sending events.\r\n                connection.events.attach((event: ConnectionEvent) => {\r\n                    this.connectionEvents.onEvent(event);\r\n                });\r\n\r\n                return connection.open().onSuccessContinueWithPromise((response: ConnectionOpenResponse): Promise<IConnection> => {\r\n                    if (response.statusCode === 200) {\r\n                        this.privDialogRequestSession.onPreConnectionStart(this.privDialogAuthFetchEventId, this.privConnectionId);\r\n                        this.privDialogRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n\r\n                        return PromiseHelper.fromResult<IConnection>(connection);\r\n                    } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                        return this.dialogConnectImpl(true);\r\n                    } else {\r\n                        this.privDialogRequestSession.onConnectionEstablishCompleted(response.statusCode, response.reason);\r\n                        return PromiseHelper.fromError<IConnection>(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\r\n                    }\r\n                });\r\n            });\r\n\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return this.privDialogConnectionPromise;\r\n    }\r\n\r\n    private receiveDialogMessageOverride = (): Promise<IConnection> => {\r\n\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<IConnection> = new Deferred<IConnection>();\r\n\r\n        this.fetchDialogConnection().on((connection: IConnection): Promise<IConnection> => {\r\n            return connection.read()\r\n                .onSuccessContinueWithPromise((message: ConnectionMessage): Promise<IConnection> => {\r\n                    const isDisposed: boolean = this.isDisposed();\r\n                    const terminateMessageLoop = (!this.isDisposed() && this.terminateMessageLoop);\r\n                    if (isDisposed || terminateMessageLoop) {\r\n                        // We're done.\r\n                        communicationCustodian.resolve(undefined);\r\n                        return PromiseHelper.fromResult<IConnection>(undefined);\r\n                    }\r\n\r\n                    if (!message) {\r\n                        return this.receiveDialogMessageOverride();\r\n                    }\r\n\r\n                    const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n                    switch (connectionMessage.path.toLowerCase()) {\r\n                        case \"turn.start\":\r\n                            {\r\n                                const turnRequestId = connectionMessage.requestId.toUpperCase();\r\n                                const audioSessionReqId = this.privDialogRequestSession.requestId.toUpperCase();\r\n\r\n                                // turn started by the service\r\n                                if (turnRequestId !== audioSessionReqId) {\r\n                                    this.privTurnStateManager.StartTurn(turnRequestId);\r\n                                } else {\r\n                                    this.privDialogRequestSession.onServiceTurnStartResponse();\r\n                                }\r\n                            }\r\n                            break;\r\n                        case \"speech.startdetected\":\r\n                            const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n\r\n                            const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privDialogRequestSession.sessionId);\r\n\r\n                            if (!!this.privRecognizer.speechStartDetected) {\r\n                                this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                            }\r\n\r\n                            break;\r\n                        case \"speech.enddetected\":\r\n\r\n                            let json: string;\r\n\r\n                            if (connectionMessage.textBody.length > 0) {\r\n                                json = connectionMessage.textBody;\r\n                            } else {\r\n                                // If the request was empty, the JSON returned is empty.\r\n                                json = \"{ Offset: 0 }\";\r\n                            }\r\n\r\n                            const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n\r\n                            this.privDialogRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privDialogRequestSession.currentTurnAudioOffset);\r\n\r\n                            const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privDialogRequestSession.currentTurnAudioOffset, this.privDialogRequestSession.sessionId);\r\n\r\n                            if (!!this.privRecognizer.speechEndDetected) {\r\n                                this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                            }\r\n                            break;\r\n\r\n                        case \"turn.end\":\r\n                            {\r\n                                const turnEndRequestId = connectionMessage.requestId.toUpperCase();\r\n\r\n                                const audioSessionReqId = this.privDialogRequestSession.requestId.toUpperCase();\r\n\r\n                                // turn started by the service\r\n                                if (turnEndRequestId !== audioSessionReqId) {\r\n                                    this.privTurnStateManager.CompleteTurn(turnEndRequestId);\r\n                                } else {\r\n                                    // Audio session turn\r\n\r\n                                    const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privDialogRequestSession.sessionId);\r\n                                    this.privDialogRequestSession.onServiceTurnEndResponse(false);\r\n\r\n                                    if (this.privDialogRequestSession.isSpeechEnded) {\r\n                                        if (!!this.privRecognizer.sessionStopped) {\r\n                                            this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                                        }\r\n                                    }\r\n\r\n                                    // report result to promise.\r\n                                    if (!!this.privSuccessCallback && this.privLastResult) {\r\n                                        try {\r\n                                            this.privSuccessCallback(this.privLastResult);\r\n                                            this.privLastResult = null;\r\n                                        } catch (e) {\r\n                                            if (!!this.privErrorCallback) {\r\n                                                this.privErrorCallback(e);\r\n                                            }\r\n                                        }\r\n                                        // Only invoke the call back once.\r\n                                        // and if it's successful don't invoke the\r\n                                        // error after that.\r\n                                        this.privSuccessCallback = undefined;\r\n                                        this.privErrorCallback = undefined;\r\n                                    }\r\n                                }\r\n                            }\r\n                            break;\r\n\r\n                        default:\r\n                            if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                                if (!!this.serviceEvents) {\r\n                                    this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                                }\r\n                            }\r\n                    }\r\n\r\n                    return this.receiveDialogMessageOverride();\r\n                });\r\n        }, (error: string) => {\r\n            this.terminateMessageLoop = true;\r\n            communicationCustodian.resolve(undefined);\r\n            return PromiseHelper.fromResult<IConnection>(undefined);\r\n        });\r\n\r\n        return communicationCustodian.promise();\r\n    }\r\n\r\n    private startMessageLoop(): Promise<IConnection> {\r\n\r\n        this.terminateMessageLoop = false;\r\n\r\n        const messageRetrievalPromise = this.receiveDialogMessageOverride();\r\n\r\n        return messageRetrievalPromise.on((r: IConnection) => {\r\n            return true;\r\n        }, (error: string) => {\r\n            this.cancelRecognition(this.privDialogRequestSession.sessionId, this.privDialogRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private configConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigPromise) {\r\n            if (this.privConnectionConfigPromise.result().isCompleted &&\r\n                (this.privConnectionConfigPromise.result().isError\r\n                    || this.privConnectionConfigPromise.result().result.state() === ConnectionState.Disconnected)) {\r\n\r\n                this.privConnectionConfigPromise = null;\r\n                return this.configConnection();\r\n            } else {\r\n                return this.privConnectionConfigPromise;\r\n            }\r\n        }\r\n\r\n        if (this.terminateMessageLoop) {\r\n            this.terminateMessageLoop = false;\r\n            return PromiseHelper.fromError(`Connection to service terminated.`);\r\n        }\r\n\r\n        this.privConnectionConfigPromise = this.dialogConnectImpl().onSuccessContinueWithPromise((connection: IConnection): Promise<IConnection> => {\r\n            return this.sendSpeechServiceConfig(connection, this.privDialogRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize())\r\n                .onSuccessContinueWithPromise((_: boolean) => {\r\n                    return this.sendAgentConfig(connection).onSuccessContinueWith((_: boolean) => {\r\n                        return connection;\r\n                    });\r\n                });\r\n        });\r\n\r\n        return this.privConnectionConfigPromise;\r\n    }\r\n\r\n    private fetchDialogConnection = (): Promise<IConnection> => {\r\n        return this.configConnection();\r\n    }\r\n\r\n    private sendPreAudioMessages(): void {\r\n        this.fetchDialogConnection().onSuccessContinueWith((connection: IConnection): void => {\r\n            this.sendAgentContext(connection);\r\n            this.sendWaveHeader(connection);\r\n        });\r\n    }\r\n\r\n    private sendAgentConfig = (connection: IConnection): Promise<boolean> => {\r\n        if (this.agentConfig && !this.agentConfigSent) {\r\n\r\n            if (this.privRecognizerConfig.parameters.getProperty(PropertyId.Conversation_DialogType) === \"custom_commands\") {\r\n                const config = this.agentConfig.get();\r\n                config.botInfo.commandsCulture = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-us\");\r\n                this.agentConfig.set(config);\r\n            }\r\n            const agentConfigJson = this.agentConfig.toJsonString();\r\n\r\n            // guard against sending this multiple times on one connection\r\n            this.agentConfigSent = true;\r\n\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"agent.config\",\r\n                this.privDialogRequestSession.requestId,\r\n                \"application/json\",\r\n                agentConfigJson));\r\n        }\r\n\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    private sendAgentContext = (connection: IConnection): Promise<boolean> => {\r\n        const guid: string = createGuid();\r\n\r\n        const speechActivityTemplate = this.privDialogServiceConnector.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n\r\n        const agentContext: any = {\r\n            channelData: \"\",\r\n            context: {\r\n                interactionId: guid\r\n            },\r\n            messagePayload: typeof speechActivityTemplate === undefined ? undefined : speechActivityTemplate,\r\n            version: 0.5\r\n        };\r\n\r\n        const agentContextJson = JSON.stringify(agentContext);\r\n\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speech.agent.context\",\r\n            this.privDialogRequestSession.requestId,\r\n            \"application/json\",\r\n            agentContextJson));\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: SimpleSpeechPhrase, properties: PropertyCollection): SpeechRecognitionEventArgs {\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(serviceResult.RecognitionStatus);\r\n\r\n        const offset: number = serviceResult.Offset + this.privDialogRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privDialogRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.DisplayText,\r\n            serviceResult.Duration,\r\n            offset,\r\n            undefined,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new SpeechRecognitionEventArgs(result, offset, this.privDialogRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}