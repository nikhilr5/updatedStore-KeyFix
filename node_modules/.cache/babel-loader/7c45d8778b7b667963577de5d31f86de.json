{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { ForceDictationPropertyName, OutputFormatPropertyName } from \"../common.speech/Exports\";\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { RecognitionMode, WebsocketMessageFormatter } from \"./Exports\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\n  constructor() {\n    super(...arguments);\n    this.interactiveRelativeUri = \"/speech/recognition/interactive/cognitiveservices/v1\";\n    this.conversationRelativeUri = \"/speech/recognition/conversation/cognitiveservices/v1\";\n    this.dictationRelativeUri = \"/speech/recognition/dictation/cognitiveservices/v1\";\n\n    this.create = (config, authInfo, connectionId) => {\n      let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n      const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n      const hostSuffix = region && region.toLowerCase().startsWith(\"china\") ? \".azure.cn\" : \".microsoft.com\";\n      const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\n      const queryParams = {};\n      const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n      const language = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\n\n      if (endpointId) {\n        if (!endpoint || endpoint.search(QueryParameterNames.DeploymentIdParamName) === -1) {\n          queryParams[QueryParameterNames.DeploymentIdParamName] = endpointId;\n        }\n      } else if (language) {\n        if (!endpoint || endpoint.search(QueryParameterNames.LanguageParamName) === -1) {\n          queryParams[QueryParameterNames.LanguageParamName] = language;\n        }\n      }\n\n      if (!endpoint || endpoint.search(QueryParameterNames.FormatParamName) === -1) {\n        queryParams[QueryParameterNames.FormatParamName] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\n      }\n\n      this.setCommonUrlParams(config, queryParams, endpoint);\n\n      if (!endpoint) {\n        switch (config.recognitionMode) {\n          case RecognitionMode.Conversation:\n            if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\n              endpoint = host + this.dictationRelativeUri;\n            } else {\n              endpoint = host + this.conversationRelativeUri;\n            }\n\n            break;\n\n          case RecognitionMode.Dictation:\n            endpoint = host + this.dictationRelativeUri;\n            break;\n\n          default:\n            endpoint = host + this.interactiveRelativeUri; // default is interactive\n\n            break;\n        }\n      }\n\n      const headers = {};\n\n      if (authInfo.token !== undefined && authInfo.token !== \"\") {\n        headers[authInfo.headerName] = authInfo.token;\n      }\n\n      headers[QueryParameterNames.ConnectionIdHeader] = connectionId;\n      config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n      return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), connectionId);\n    };\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/SpeechConnectionFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly interactiveRelativeUri: string = \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n    private readonly conversationRelativeUri: string = \"/speech/recognition/conversation/cognitiveservices/v1\";\r\n    private readonly dictationRelativeUri: string = \"/speech/recognition/dictation/cognitiveservices/v1\";\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string =  (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.DeploymentIdParamName) === -1) {\r\n                queryParams[QueryParameterNames.DeploymentIdParamName] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.LanguageParamName) === -1) {\r\n                queryParams[QueryParameterNames.LanguageParamName] = language;\r\n            }\r\n        }\r\n\r\n        if (!endpoint || endpoint.search(QueryParameterNames.FormatParamName) === -1) {\r\n            queryParams[QueryParameterNames.FormatParamName] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            switch (config.recognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\r\n                        endpoint = host + this.dictationRelativeUri;\r\n                    } else {\r\n                        endpoint = host + this.conversationRelativeUri;\r\n                    }\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = host + this.dictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    endpoint = host + this.interactiveRelativeUri; // default is interactive\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[QueryParameterNames.ConnectionIdHeader] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}