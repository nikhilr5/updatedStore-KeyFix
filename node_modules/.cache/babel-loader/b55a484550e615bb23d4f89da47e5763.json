{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ForceDictationPropertyName, OutputFormatPropertyName, ServicePropertiesPropertyName } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { OutputFormat, ProfanityOption, PropertyCollection, PropertyId, SpeechSynthesisOutputFormat } from \"./Exports\";\n/**\n * Speech configuration.\n * @class SpeechConfig\n */\n\nexport class SpeechConfig {\n  /**\n   * Creates and initializes an instance.\n   * @constructor\n   */\n  constructor() {}\n  /**\n   * Static instance of SpeechConfig returned by passing subscriptionKey and service region.\n   * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\n   * @member SpeechConfig.fromSubscription\n   * @function\n   * @public\n   * @param {string} subscriptionKey - The subscription key.\n   * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {SpeechConfig} The speech factory\n   */\n\n\n  static fromSubscription(subscriptionKey, region) {\n    Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n    Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const speechImpl = new SpeechConfigImpl();\n    speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n    speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\n    speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    return speechImpl;\n  }\n  /**\n   * Creates an instance of the speech config with specified endpoint and subscription key.\n   * This method is intended only for users who use a non-standard service endpoint or parameters.\n   * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\n   * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\n   * For example, if language is defined in the uri as query parameter \"language=de-DE\", and also set by\n   *              SpeechConfig.speechRecognitionLanguage = \"en-US\", the language setting in uri takes precedence,\n   *              and the effective language is \"de-DE\". Only the parameters that are not specified in the\n   *              endpoint URL can be set by other APIs.\n   * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\n   *       fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\n   *       use the authorization token.\n   * @member SpeechConfig.fromEndpoint\n   * @function\n   * @public\n   * @param {URL} endpoint - The service endpoint to connect to.\n   * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\n   * @returns {SpeechConfig} A speech factory instance.\n   */\n\n\n  static fromEndpoint(endpoint, subscriptionKey) {\n    Contracts.throwIfNull(endpoint, \"endpoint\");\n    const speechImpl = new SpeechConfigImpl();\n    speechImpl.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\n\n    if (undefined !== subscriptionKey) {\n      speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    }\n\n    return speechImpl;\n  }\n  /**\n   * Creates an instance of the speech config with specified host and subscription key.\n   * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\n   * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\n   * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\n   * Note: To use an authorization token with fromHost, use fromHost(URL),\n   * and then set the AuthorizationToken property on the created SpeechConfig instance.\n   * Note: Added in version 1.9.0.\n   * @member SpeechConfig.fromHost\n   * @function\n   * @public\n   * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\n   * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\n   * @returns {SpeechConfig} A speech factory instance.\n   */\n\n\n  static fromHost(hostName, subscriptionKey) {\n    Contracts.throwIfNull(hostName, \"hostName\");\n    const speechImpl = new SpeechConfigImpl();\n    speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\n\n    if (undefined !== subscriptionKey) {\n      speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    }\n\n    return speechImpl;\n  }\n  /**\n   * Creates an instance of the speech factory with specified initial authorization token and region.\n   * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n   *       expires, the caller needs to refresh it by calling this setter with a new valid token.\n   * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want\n   *       to use the Intent recognizer. As configuration values are copied when creating a new recognizer,\n   *       the new token value will not apply to recognizers that have already been created. For recognizers\n   *       that have been created before, you need to set authorization token of the corresponding recognizer\n   *       to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\n   * @member SpeechConfig.fromAuthorizationToken\n   * @function\n   * @public\n   * @param {string} authorizationToken - The initial authorization token.\n   * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {SpeechConfig} A speech factory instance.\n   */\n\n\n  static fromAuthorizationToken(authorizationToken, region) {\n    Contracts.throwIfNull(authorizationToken, \"authorizationToken\");\n    Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const speechImpl = new SpeechConfigImpl();\n    speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n    speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\n    speechImpl.authorizationToken = authorizationToken;\n    return speechImpl;\n  }\n  /**\n   * Closes the configuration.\n   * @member SpeechConfig.prototype.close\n   * @function\n   * @public\n   */\n\n  /* tslint:disable:no-empty */\n\n\n  close() {}\n\n}\n/**\n * @public\n * @class SpeechConfigImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport class SpeechConfigImpl extends SpeechConfig {\n  constructor() {\n    super();\n    this.privProperties = new PropertyCollection();\n    this.speechRecognitionLanguage = \"en-US\"; // Should we have a default?\n\n    this.outputFormat = OutputFormat.Simple;\n  }\n\n  get properties() {\n    return this.privProperties;\n  }\n\n  get endPoint() {\n    return new URL(this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Endpoint));\n  }\n\n  get subscriptionKey() {\n    return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key);\n  }\n\n  get region() {\n    return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\n  }\n\n  get authorizationToken() {\n    return this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n\n  set authorizationToken(value) {\n    this.privProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n  }\n\n  get speechRecognitionLanguage() {\n    return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n  }\n\n  set speechRecognitionLanguage(value) {\n    this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\n  }\n\n  get outputFormat() {\n    return OutputFormat[this.privProperties.getProperty(OutputFormatPropertyName, undefined)];\n  }\n\n  set outputFormat(value) {\n    this.privProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\n  }\n\n  get endpointId() {\n    return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\n  }\n\n  set endpointId(value) {\n    this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\n  }\n\n  setProperty(name, value) {\n    Contracts.throwIfNull(value, \"value\");\n    this.privProperties.setProperty(name, value);\n  }\n\n  getProperty(name, def) {\n    return this.privProperties.getProperty(name, def);\n  }\n\n  setProxy(proxyHostName, proxyPort, proxyUserName, proxyPassword) {\n    this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);\n    this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);\n    this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);\n    this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);\n  }\n\n  setServiceProperty(name, value, channel) {\n    const currentProperties = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\"));\n    currentProperties[name] = value;\n    this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\n  }\n\n  setProfanity(profanity) {\n    this.privProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\n  }\n\n  enableAudioLogging() {\n    this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\n  }\n\n  requestWordLevelTimestamps() {\n    this.privProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\n  }\n\n  enableDictation() {\n    this.privProperties.setProperty(ForceDictationPropertyName, \"true\");\n  }\n\n  clone() {\n    const ret = new SpeechConfigImpl();\n    ret.privProperties = this.privProperties.clone();\n    return ret;\n  }\n\n  get speechSynthesisLanguage() {\n    return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\n  }\n\n  set speechSynthesisLanguage(language) {\n    this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\n  }\n\n  get speechSynthesisVoiceName() {\n    return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\n  }\n\n  set speechSynthesisVoiceName(voice) {\n    this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\n  }\n\n  get speechSynthesisOutputFormat() {\n    return SpeechSynthesisOutputFormat[this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\n  }\n\n  set speechSynthesisOutputFormat(format) {\n    this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\n  }\n\n}","map":{"version":3,"sources":["src/sdk/SpeechConfig.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SACI,0BADJ,EAEI,wBAFJ,EAGI,6BAHJ,QAIO,0BAJP;AAMA,SAAQ,SAAR,QAAwB,aAAxB;AACA,SACI,YADJ,EAEI,eAFJ,EAGI,kBAHJ,EAII,UAJJ,EAMI,2BANJ,QAOO,WAPP;AASA;;;;;AAIA,OAAM,MAAgB,YAAhB,CAA4B;AAC9B;;;;AAIA,EAAA,WAAA,GAAA,CAA2B;AAE3B;;;;;;;;;;;;AAUO,SAAO,gBAAP,CAAwB,eAAxB,EAAiD,MAAjD,EAA+D;AAClE,IAAA,SAAS,CAAC,uBAAV,CAAkC,eAAlC,EAAmD,iBAAnD;AACA,IAAA,SAAS,CAAC,uBAAV,CAAkC,MAAlC,EAA0C,QAA1C;AAEA,UAAM,UAAU,GAAqB,IAAI,gBAAJ,EAArC;AACA,IAAA,UAAU,CAAC,WAAX,CAAuB,UAAU,CAAC,8BAAlC,EAAkE,MAAlE;AACA,IAAA,UAAU,CAAC,WAAX,CAAuB,UAAU,CAAC,oCAAlC,EAAwE,MAAxE;AACA,IAAA,UAAU,CAAC,WAAX,CAAuB,UAAU,CAAC,2BAAlC,EAA+D,eAA/D;AAEA,WAAO,UAAP;AACH;AAED;;;;;;;;;;;;;;;;;;;;;AAmBO,SAAO,YAAP,CAAoB,QAApB,EAAmC,eAAnC,EAA2D;AAC9D,IAAA,SAAS,CAAC,WAAV,CAAsB,QAAtB,EAAgC,UAAhC;AAEA,UAAM,UAAU,GAAqB,IAAI,gBAAJ,EAArC;AACA,IAAA,UAAU,CAAC,WAAX,CAAuB,UAAU,CAAC,gCAAlC,EAAoE,QAAQ,CAAC,IAA7E;;AAEA,QAAI,SAAS,KAAK,eAAlB,EAAmC;AAC/B,MAAA,UAAU,CAAC,WAAX,CAAuB,UAAU,CAAC,2BAAlC,EAA+D,eAA/D;AACH;;AACD,WAAO,UAAP;AACH;AAED;;;;;;;;;;;;;;;;;AAeO,SAAO,QAAP,CAAgB,QAAhB,EAA+B,eAA/B,EAAuD;AAC1D,IAAA,SAAS,CAAC,WAAV,CAAsB,QAAtB,EAAgC,UAAhC;AAEA,UAAM,UAAU,GAAqB,IAAI,gBAAJ,EAArC;AACA,IAAA,UAAU,CAAC,WAAX,CAAuB,UAAU,CAAC,4BAAlC,EAAgE,QAAQ,CAAC,QAAT,GAAoB,IAApB,GAA2B,QAAQ,CAAC,QAApC,IAAgD,QAAQ,CAAC,IAAT,KAAkB,EAAlB,GAAuB,EAAvB,GAA4B,MAAM,QAAQ,CAAC,IAA3F,CAAhE;;AAEA,QAAI,SAAS,KAAK,eAAlB,EAAmC;AAC/B,MAAA,UAAU,CAAC,WAAX,CAAuB,UAAU,CAAC,2BAAlC,EAA+D,eAA/D;AACH;;AACD,WAAO,UAAP;AACH;AAED;;;;;;;;;;;;;;;;;;AAgBO,SAAO,sBAAP,CAA8B,kBAA9B,EAA0D,MAA1D,EAAwE;AAC3E,IAAA,SAAS,CAAC,WAAV,CAAsB,kBAAtB,EAA0C,oBAA1C;AACA,IAAA,SAAS,CAAC,uBAAV,CAAkC,MAAlC,EAA0C,QAA1C;AAEA,UAAM,UAAU,GAAqB,IAAI,gBAAJ,EAArC;AACA,IAAA,UAAU,CAAC,WAAX,CAAuB,UAAU,CAAC,8BAAlC,EAAkE,MAAlE;AACA,IAAA,UAAU,CAAC,WAAX,CAAuB,UAAU,CAAC,oCAAlC,EAAwE,MAAxE;AACA,IAAA,UAAU,CAAC,kBAAX,GAAgC,kBAAhC;AACA,WAAO,UAAP;AACH;AAsHD;;;;;;;AAMA;;;AACO,EAAA,KAAK,GAAA,CAAY;;AA7OM;AA0WlC;;;;AAIA;;AACA,OAAM,MAAO,gBAAP,SAAgC,YAAhC,CAA4C;AAI9C,EAAA,WAAA,GAAA;AACI;AACA,SAAK,cAAL,GAAsB,IAAI,kBAAJ,EAAtB;AACA,SAAK,yBAAL,GAAiC,OAAjC,CAHJ,CAG8C;;AAC1C,SAAK,YAAL,GAAoB,YAAY,CAAC,MAAjC;AACH;;AAED,MAAW,UAAX,GAAqB;AACjB,WAAO,KAAK,cAAZ;AACH;;AAED,MAAW,QAAX,GAAmB;AACf,WAAO,IAAI,GAAJ,CAAQ,KAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,gCAA3C,CAAR,CAAP;AACH;;AAED,MAAW,eAAX,GAA0B;AACtB,WAAO,KAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,2BAA3C,CAAP;AACH;;AAED,MAAW,MAAX,GAAiB;AACb,WAAO,KAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,8BAA3C,CAAP;AACH;;AAED,MAAW,kBAAX,GAA6B;AACzB,WAAO,KAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,gCAA3C,CAAP;AACH;;AAED,MAAW,kBAAX,CAA8B,KAA9B,EAA2C;AACvC,SAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,gCAA3C,EAA6E,KAA7E;AACH;;AAED,MAAW,yBAAX,GAAoC;AAChC,WAAO,KAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,oCAA3C,CAAP;AACH;;AAED,MAAW,yBAAX,CAAqC,KAArC,EAAkD;AAC9C,SAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,oCAA3C,EAAiF,KAAjF;AACH;;AAED,MAAW,YAAX,GAAuB;AACnB,WAAQ,YAAoB,CAAC,KAAK,cAAL,CAAoB,WAApB,CAAgC,wBAAhC,EAA0D,SAA1D,CAAD,CAA5B;AACH;;AAED,MAAW,YAAX,CAAwB,KAAxB,EAA2C;AACvC,SAAK,cAAL,CAAoB,WAApB,CAAgC,wBAAhC,EAA0D,YAAY,CAAC,KAAD,CAAtE;AACH;;AAED,MAAW,UAAX,GAAqB;AACjB,WAAO,KAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,kCAA3C,CAAP;AACH;;AAED,MAAW,UAAX,CAAsB,KAAtB,EAAmC;AAC/B,SAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,kCAA3C,EAA+E,KAA/E;AACH;;AAEM,EAAA,WAAW,CAAC,IAAD,EAA4B,KAA5B,EAAyC;AACvD,IAAA,SAAS,CAAC,WAAV,CAAsB,KAAtB,EAA6B,OAA7B;AAEA,SAAK,cAAL,CAAoB,WAApB,CAAgC,IAAhC,EAAsC,KAAtC;AACH;;AAEM,EAAA,WAAW,CAAC,IAAD,EAA4B,GAA5B,EAAwC;AAEtD,WAAO,KAAK,cAAL,CAAoB,WAApB,CAAgC,IAAhC,EAAsC,GAAtC,CAAP;AACH;;AAIM,EAAA,QAAQ,CAAC,aAAD,EAAqB,SAArB,EAAqC,aAArC,EAA0D,aAA1D,EAA6E;AACxF,SAAK,WAAL,CAAiB,UAAU,CAAC,UAAU,CAAC,qCAAZ,CAA3B,EAA+E,aAA/E;AACA,SAAK,WAAL,CAAiB,UAAU,CAAC,UAAU,CAAC,iCAAZ,CAA3B,EAA2E,SAA3E;AACA,SAAK,WAAL,CAAiB,UAAU,CAAC,UAAU,CAAC,qCAAZ,CAA3B,EAA+E,aAA/E;AACA,SAAK,WAAL,CAAiB,UAAU,CAAC,UAAU,CAAC,qCAAZ,CAA3B,EAA+E,aAA/E;AACH;;AAEM,EAAA,kBAAkB,CAAC,IAAD,EAAe,KAAf,EAA8B,OAA9B,EAA6D;AAClF,UAAM,iBAAiB,GAA8B,IAAI,CAAC,KAAL,CAAW,KAAK,cAAL,CAAoB,WAApB,CAAgC,6BAAhC,EAA+D,IAA/D,CAAX,CAArD;AAEA,IAAA,iBAAiB,CAAC,IAAD,CAAjB,GAA0B,KAA1B;AAEA,SAAK,cAAL,CAAoB,WAApB,CAAgC,6BAAhC,EAA+D,IAAI,CAAC,SAAL,CAAe,iBAAf,CAA/D;AACH;;AAEM,EAAA,YAAY,CAAC,SAAD,EAA2B;AAC1C,SAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,qCAA3C,EAAkF,eAAe,CAAC,SAAD,CAAjG;AACH;;AAEM,EAAA,kBAAkB,GAAA;AACrB,SAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,0CAA3C,EAAuF,MAAvF;AACH;;AACM,EAAA,0BAA0B,GAAA;AAC7B,SAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,gDAA3C,EAA6F,MAA7F;AACH;;AACM,EAAA,eAAe,GAAA;AAClB,SAAK,cAAL,CAAoB,WAApB,CAAgC,0BAAhC,EAA4D,MAA5D;AACH;;AAEM,EAAA,KAAK,GAAA;AACR,UAAM,GAAG,GAAqB,IAAI,gBAAJ,EAA9B;AACA,IAAA,GAAG,CAAC,cAAJ,GAAqB,KAAK,cAAL,CAAoB,KAApB,EAArB;AACA,WAAO,GAAP;AACH;;AAED,MAAW,uBAAX,GAAkC;AAC9B,WAAO,KAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,qCAA3C,CAAP;AACH;;AAED,MAAW,uBAAX,CAAmC,QAAnC,EAAmD;AAC/C,SAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,qCAA3C,EAAkF,QAAlF;AACH;;AAED,MAAW,wBAAX,GAAmC;AAC/B,WAAO,KAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,kCAA3C,CAAP;AACH;;AAED,MAAW,wBAAX,CAAoC,KAApC,EAAiD;AAC7C,SAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,kCAA3C,EAA+E,KAA/E;AACH;;AAED,MAAW,2BAAX,GAAsC;AAClC,WAAQ,2BAAmC,CAAC,KAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,yCAA3C,EAAsF,SAAtF,CAAD,CAA3C;AACH;;AAED,MAAW,2BAAX,CAAuC,MAAvC,EAA0E;AACtE,SAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,yCAA3C,EAAsF,2BAA2B,CAAC,MAAD,CAAjH;AACH;;AAjI6C","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports\";\r\nimport {IStringDictionary} from \"../common/Exports\";\r\nimport {Contracts} from \"./Contracts\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Speech configuration.\r\n * @class SpeechConfig\r\n */\r\nexport abstract class SpeechConfig {\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * @member SpeechConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} The speech factory\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * For example, if language is defined in the uri as query parameter \"language=de-DE\", and also set by\r\n     *              SpeechConfig.speechRecognitionLanguage = \"en-US\", the language setting in uri takes precedence,\r\n     *              and the effective language is \"de-DE\". Only the parameters that are not specified in the\r\n     *              endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     *       fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     *       use the authorization token.\r\n     * @member SpeechConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech factory with specified initial authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     *       expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want\r\n     *       to use the Intent recognizer. As configuration values are copied when creating a new recognizer,\r\n     *       the new token value will not apply to recognizers that have already been created. For recognizers\r\n     *       that have been created before, you need to set authorization token of the corresponding recognizer\r\n     *       to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The initial authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNull(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.authorizationToken = authorizationToken;\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param porxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Gets the authorization token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get authorizationToken(): string;\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n    /**\r\n     * Gets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * get synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} Returns the output format.\r\n     */\r\n    public abstract get outputFormat(): OutputFormat;\r\n\r\n    /**\r\n     * Gets/Sets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * set synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set outputFormat(format: OutputFormat);\r\n\r\n    /**\r\n     * Gets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @return {string} The endpoint ID\r\n     */\r\n    public abstract get endpointId(): string;\r\n\r\n    /**\r\n     * Gets/Sets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The endpoint ID\r\n     */\r\n    public abstract set endpointId(value: string);\r\n\r\n    /**\r\n     * Closes the configuration.\r\n     * @member SpeechConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    /* tslint:disable:no-empty */\r\n    public close(): void { }\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     * @return {string} The subscription key set on the config.\r\n     */\r\n    public abstract get subscriptionKey(): string;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.region\r\n     * @function\r\n     * @public\r\n     * @return {region} The region set on the config.\r\n     */\r\n    public abstract get region(): string;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     * @summary Sets a property value that will be passed to service using the specified channel.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.setProfanity\r\n     * @function\r\n     * @public\r\n     * @param {profanity} Profanity option to set.\r\n     * @summary Sets profanity option.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract setProfanity(profanity: ProfanityOption): void;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.enableAudioLogging\r\n     * @function\r\n     * @public\r\n     * @summary Enable audio logging in service.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract enableAudioLogging(): void;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.requestWordLevelTimestamps\r\n     * @function\r\n     * @public\r\n     * @summary Includes word-level timestamps.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract requestWordLevelTimestamps(): void;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.enableDictation\r\n     * @function\r\n     * @public\r\n     * @summary Enable dictation. Only supported in speech continuous recognition.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract enableDictation(): void;\r\n\r\n    /**\r\n     * Gets the language of the speech synthesizer.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis language.\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract get speechSynthesisLanguage(): string;\r\n\r\n    /**\r\n     * Sets the language of the speech synthesizer.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract set speechSynthesisLanguage(language: string);\r\n\r\n    /**\r\n     * Gets the voice of the speech synthesizer.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis voice.\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract get speechSynthesisVoiceName(): string;\r\n\r\n    /**\r\n     * Sets the voice of the speech synthesizer. (see <a href=\"https://aka.ms/speech/tts-languages\">available voices</a>).\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract set speechSynthesisVoiceName(voice: string);\r\n\r\n    /**\r\n     * Gets the speech synthesis output format.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisOutputFormat} Returns the speech synthesis output format\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat;\r\n\r\n    /**\r\n     * Sets the speech synthesis output format (e.g. Riff16Khz16BitMonoPcm).\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat);\r\n}\r\n\r\n/**\r\n * @public\r\n * @class SpeechConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechConfigImpl extends SpeechConfig {\r\n\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privProperties = new PropertyCollection();\r\n        this.speechRecognitionLanguage = \"en-US\"; // Should we have a default?\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get endPoint(): URL {\r\n        return new URL(this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Endpoint));\r\n    }\r\n\r\n    public get subscriptionKey(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n    }\r\n\r\n    public get region(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public set speechRecognitionLanguage(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return (OutputFormat as any)[this.privProperties.getProperty(OutputFormatPropertyName, undefined)];\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    public set endpointId(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        this.privProperties.setProperty(name, value);\r\n    }\r\n\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n\r\n        return this.privProperties.getProperty(name, def);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\"));\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public clone(): SpeechConfigImpl {\r\n        const ret: SpeechConfigImpl = new SpeechConfigImpl();\r\n        ret.privProperties = this.privProperties.clone();\r\n        return ret;\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        return (SpeechSynthesisOutputFormat as any)[this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}