{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { WebsocketMessageFormatter } from \"./Exports\";\nconst TestHooksParamName = \"testhooks\";\nconst ConnectionIdHeader = \"X-ConnectionId\";\nexport class IntentConnectionFactory extends ConnectionFactoryBase {\n  constructor() {\n    super(...arguments);\n\n    this.create = (config, authInfo, connectionId) => {\n      let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\n\n      if (!endpoint) {\n        const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\n        const hostSuffix = region && region.toLowerCase().startsWith(\"china\") ? \".azure.cn\" : \".microsoft.com\";\n        const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".sr.speech\" + hostSuffix);\n        endpoint = host + \"/speech/recognition/interactive/cognitiveservices/v1\";\n      }\n\n      const queryParams = {\n        format: \"simple\",\n        language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage)\n      };\n      this.setCommonUrlParams(config, queryParams, endpoint);\n      const headers = {};\n\n      if (authInfo.token !== undefined && authInfo.token !== \"\") {\n        headers[authInfo.headerName] = authInfo.token;\n      }\n\n      headers[ConnectionIdHeader] = connectionId;\n      config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n      return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), connectionId);\n    };\n  }\n\n  getSpeechRegionFromIntentRegion(intentRegion) {\n    switch (intentRegion) {\n      case \"West US\":\n      case \"US West\":\n      case \"westus\":\n        return \"uswest\";\n\n      case \"West US 2\":\n      case \"US West 2\":\n      case \"westus2\":\n        return \"uswest2\";\n\n      case \"South Central US\":\n      case \"US South Central\":\n      case \"southcentralus\":\n        return \"ussouthcentral\";\n\n      case \"West Central US\":\n      case \"US West Central\":\n      case \"westcentralus\":\n        return \"uswestcentral\";\n\n      case \"East US\":\n      case \"US East\":\n      case \"eastus\":\n        return \"useast\";\n\n      case \"East US 2\":\n      case \"US East 2\":\n      case \"eastus2\":\n        return \"useast2\";\n\n      case \"West Europe\":\n      case \"Europe West\":\n      case \"westeurope\":\n        return \"europewest\";\n\n      case \"North Europe\":\n      case \"Europe North\":\n      case \"northeurope\":\n        return \"europenorth\";\n\n      case \"Brazil South\":\n      case \"South Brazil\":\n      case \"southbrazil\":\n        return \"brazilsouth\";\n\n      case \"Australia East\":\n      case \"East Australia\":\n      case \"eastaustralia\":\n        return \"australiaeast\";\n\n      case \"Southeast Asia\":\n      case \"Asia Southeast\":\n      case \"southeastasia\":\n        return \"asiasoutheast\";\n\n      case \"East Asia\":\n      case \"Asia East\":\n      case \"eastasia\":\n        return \"asiaeast\";\n\n      default:\n        return intentRegion;\n    }\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/IntentConnectionFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\n\r\nconst TestHooksParamName: string = \"testhooks\";\r\nconst ConnectionIdHeader: string = \"X-ConnectionId\";\r\n\r\nexport class IntentConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\r\n            const hostSuffix = (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".sr.speech\" + hostSuffix);\r\n            endpoint = host + \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[ConnectionIdHeader] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), connectionId);\r\n    }\r\n\r\n    private getSpeechRegionFromIntentRegion(intentRegion: string): string {\r\n        switch (intentRegion) {\r\n            case \"West US\":\r\n            case \"US West\":\r\n            case \"westus\":\r\n                return \"uswest\";\r\n            case \"West US 2\":\r\n            case \"US West 2\":\r\n            case \"westus2\":\r\n                return \"uswest2\";\r\n            case \"South Central US\":\r\n            case \"US South Central\":\r\n            case \"southcentralus\":\r\n                return \"ussouthcentral\";\r\n            case \"West Central US\":\r\n            case \"US West Central\":\r\n            case \"westcentralus\":\r\n                return \"uswestcentral\";\r\n            case \"East US\":\r\n            case \"US East\":\r\n            case \"eastus\":\r\n                return \"useast\";\r\n            case \"East US 2\":\r\n            case \"US East 2\":\r\n            case \"eastus2\":\r\n                return \"useast2\";\r\n            case \"West Europe\":\r\n            case \"Europe West\":\r\n            case \"westeurope\":\r\n                return \"europewest\";\r\n            case \"North Europe\":\r\n            case \"Europe North\":\r\n            case \"northeurope\":\r\n                return \"europenorth\";\r\n            case \"Brazil South\":\r\n            case \"South Brazil\":\r\n            case \"southbrazil\":\r\n                return \"brazilsouth\";\r\n            case \"Australia East\":\r\n            case \"East Australia\":\r\n            case \"eastaustralia\":\r\n                return \"australiaeast\";\r\n            case \"Southeast Asia\":\r\n            case \"Asia Southeast\":\r\n            case \"southeastasia\":\r\n                return \"asiasoutheast\";\r\n            case \"East Asia\":\r\n            case \"Asia East\":\r\n            case \"eastasia\":\r\n                return \"asiaeast\";\r\n            default:\r\n                return intentRegion;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}