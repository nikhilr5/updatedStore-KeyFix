{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Contracts } from \"./Contracts\";\nimport { DialogServiceConfigImpl } from \"./DialogServiceConfig\";\nimport { PropertyId } from \"./Exports\";\n/**\n * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.\n * @class BotFrameworkConfig\n */\n\nexport class BotFrameworkConfig extends DialogServiceConfigImpl {\n  /**\n   * Creates an instance of BotFrameworkConfig.\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Creates an instance of the bot framework config with the specified subscription and region.\n   * @member BotFrameworkConfig.fromSubscription\n   * @function\n   * @public\n   * @param subscription Subscription key associated with the bot\n   * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @param botId Optional, ID for using a specific bot.\n   * @returns {BotFrameworkConfig} A new bot framework config.\n   */\n\n\n  static fromSubscription(subscription, region, botId) {\n    Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\n    Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const botFrameworkConfig = new DialogServiceConfigImpl();\n    botFrameworkConfig.setProperty(PropertyId.Conversation_DialogType, \"bot_framework\");\n    botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\n    botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n\n    if (botId) {\n      botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\n    }\n\n    return botFrameworkConfig;\n  }\n  /**\n   * Creates an instance of the bot framework config with the specified authorization token and region.\n   * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n   * expires, the caller needs to refresh it by calling this setter with a new valid token.\n   * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\n   * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\n   * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\n   * @member BotFrameworkConfig.fromAuthorizationToken\n   * @function\n   * @public\n   * @param authorizationToken The authorization token associated with the bot\n   * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {BotFrameworkConfig} A new bot framework config.\n   */\n\n\n  static fromAuthorizationToken(authorizationToken, region) {\n    Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n    Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const botFrameworkConfig = new DialogServiceConfigImpl();\n    botFrameworkConfig.setProperty(PropertyId.Conversation_DialogType, \"bot_framework\");\n    botFrameworkConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n    botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n    return botFrameworkConfig;\n  }\n\n}","map":{"version":3,"sources":["src/sdk/BotFrameworkConfig.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,uBAAT,QAAwC,uBAAxC;AACA,SAAS,UAAT,QAA2B,WAA3B;AAEA;;;;;AAIA,OAAM,MAAO,kBAAP,SAAkC,uBAAlC,CAAyD;AAE3D;;;AAGA,EAAA,WAAA,GAAA;AACI;AACH;AAED;;;;;;;;;;;;AAUO,SAAO,gBAAP,CAAwB,YAAxB,EAA8C,MAA9C,EAA8D,KAA9D,EAA4E;AAC/E,IAAA,SAAS,CAAC,uBAAV,CAAkC,YAAlC,EAAgD,cAAhD;AACA,IAAA,SAAS,CAAC,uBAAV,CAAkC,MAAlC,EAA0C,QAA1C;AAEA,UAAM,kBAAkB,GAAuB,IAAI,uBAAJ,EAA/C;AACA,IAAA,kBAAkB,CAAC,WAAnB,CAA+B,UAAU,CAAC,uBAA1C,EAAmE,eAAnE;AACA,IAAA,kBAAkB,CAAC,WAAnB,CAA+B,UAAU,CAAC,2BAA1C,EAAuE,YAAvE;AACA,IAAA,kBAAkB,CAAC,WAAnB,CAA+B,UAAU,CAAC,8BAA1C,EAA0E,MAA1E;;AAEA,QAAI,KAAJ,EAAW;AACP,MAAA,kBAAkB,CAAC,WAAnB,CAA+B,UAAU,CAAC,0BAA1C,EAAsE,KAAtE;AACH;;AAED,WAAO,kBAAP;AACH;AAED;;;;;;;;;;;;;;;;AAcO,SAAO,sBAAP,CAA8B,kBAA9B,EAA0D,MAA1D,EAAwE;AAC3E,IAAA,SAAS,CAAC,uBAAV,CAAkC,kBAAlC,EAAsD,oBAAtD;AACA,IAAA,SAAS,CAAC,uBAAV,CAAkC,MAAlC,EAA0C,QAA1C;AAEA,UAAM,kBAAkB,GAAuB,IAAI,uBAAJ,EAA/C;AACA,IAAA,kBAAkB,CAAC,WAAnB,CAA+B,UAAU,CAAC,uBAA1C,EAAmE,eAAnE;AACA,IAAA,kBAAkB,CAAC,WAAnB,CAA+B,UAAU,CAAC,gCAA1C,EAA4E,kBAA5E;AACA,IAAA,kBAAkB,CAAC,WAAnB,CAA+B,UAAU,CAAC,8BAA1C,EAA0E,MAA1E;AACA,WAAO,kBAAP;AACH;;AA1D0D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.\r\n * @class BotFrameworkConfig\r\n */\r\nexport class BotFrameworkConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of BotFrameworkConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified subscription and region.\r\n     * @member BotFrameworkConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional, ID for using a specific bot.\r\n     * @returns {BotFrameworkConfig} A new bot framework config.\r\n     */\r\n    public static fromSubscription(subscription: string, region: string, botId?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(PropertyId.Conversation_DialogType, \"bot_framework\");\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member BotFrameworkConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param authorizationToken The authorization token associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {BotFrameworkConfig} A new bot framework config.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(PropertyId.Conversation_DialogType, \"bot_framework\");\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return botFrameworkConfig;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}