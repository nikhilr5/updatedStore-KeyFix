{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ArgumentNullError } from \"./Error\";\nexport var PromiseState;\n\n(function (PromiseState) {\n  PromiseState[PromiseState[\"None\"] = 0] = \"None\";\n  PromiseState[PromiseState[\"Resolved\"] = 1] = \"Resolved\";\n  PromiseState[PromiseState[\"Rejected\"] = 2] = \"Rejected\";\n})(PromiseState || (PromiseState = {}));\n\nexport class PromiseResult {\n  constructor(promiseResultEventSource) {\n    this.throwIfError = () => {\n      if (this.isError) {\n        throw this.error;\n      }\n    };\n\n    promiseResultEventSource.on(result => {\n      if (!this.privIsCompleted) {\n        this.privIsCompleted = true;\n        this.privIsError = false;\n        this.privResult = result;\n      }\n    }, error => {\n      if (!this.privIsCompleted) {\n        this.privIsCompleted = true;\n        this.privIsError = true;\n        this.privError = error;\n      }\n    });\n  }\n\n  get isCompleted() {\n    return this.privIsCompleted;\n  }\n\n  get isError() {\n    return this.privIsError;\n  }\n\n  get error() {\n    return this.privError;\n  }\n\n  get result() {\n    return this.privResult;\n  }\n\n} // tslint:disable-next-line:max-classes-per-file\n\nexport class PromiseResultEventSource {\n  constructor() {\n    this.setResult = result => {\n      this.privOnSetResult(result);\n    };\n\n    this.setError = error => {\n      this.privOnSetError(error);\n    };\n\n    this.on = (onSetResult, onSetError) => {\n      this.privOnSetResult = onSetResult;\n      this.privOnSetError = onSetError;\n    };\n  }\n\n} // tslint:disable-next-line:max-classes-per-file\n\nexport class PromiseHelper {}\n\nPromiseHelper.whenAll = promises => {\n  if (!promises || promises.length === 0) {\n    throw new ArgumentNullError(\"promises\");\n  }\n\n  const deferred = new Deferred();\n  const errors = [];\n  let completedPromises = 0;\n\n  const checkForCompletion = () => {\n    completedPromises++;\n\n    if (completedPromises === promises.length) {\n      if (errors.length === 0) {\n        deferred.resolve(true);\n      } else {\n        deferred.reject(errors.join(\", \"));\n      }\n    }\n  };\n\n  for (const promise of promises) {\n    promise.on(r => {\n      checkForCompletion();\n    }, e => {\n      errors.push(e);\n      checkForCompletion();\n    });\n  }\n\n  return deferred.promise();\n};\n\nPromiseHelper.fromResult = result => {\n  const deferred = new Deferred();\n  deferred.resolve(result);\n  return deferred.promise();\n};\n\nPromiseHelper.fromError = error => {\n  const deferred = new Deferred();\n  deferred.reject(error);\n  return deferred.promise();\n}; // TODO: replace with ES6 promises\n// tslint:disable-next-line:max-classes-per-file\n\n\nexport class Promise {\n  constructor(sink) {\n    this.result = () => {\n      return this.privSink.result;\n    };\n\n    this.continueWith = continuationCallback => {\n      if (!continuationCallback) {\n        throw new ArgumentNullError(\"continuationCallback\");\n      }\n\n      const continuationDeferral = new Deferred();\n      this.privSink.on(r => {\n        try {\n          const continuationResult = continuationCallback(this.privSink.result);\n          continuationDeferral.resolve(continuationResult);\n        } catch (e) {\n          continuationDeferral.reject(e);\n        }\n      }, error => {\n        try {\n          const continuationResult = continuationCallback(this.privSink.result);\n          continuationDeferral.resolve(continuationResult);\n        } catch (e) {\n          continuationDeferral.reject(`'Error handler for error ${error} threw error ${e}'`);\n        }\n      });\n      return continuationDeferral.promise();\n    };\n\n    this.onSuccessContinueWith = continuationCallback => {\n      if (!continuationCallback) {\n        throw new ArgumentNullError(\"continuationCallback\");\n      }\n\n      const continuationDeferral = new Deferred();\n      this.privSink.on(r => {\n        try {\n          const continuationResult = continuationCallback(r);\n          continuationDeferral.resolve(continuationResult);\n        } catch (e) {\n          continuationDeferral.reject(e);\n        }\n      }, error => {\n        continuationDeferral.reject(error);\n      });\n      return continuationDeferral.promise();\n    };\n\n    this.continueWithPromise = continuationCallback => {\n      if (!continuationCallback) {\n        throw new ArgumentNullError(\"continuationCallback\");\n      }\n\n      const continuationDeferral = new Deferred();\n      this.privSink.on(r => {\n        try {\n          const continuationPromise = continuationCallback(this.privSink.result);\n\n          if (!continuationPromise) {\n            throw new Error(\"'Continuation callback did not return promise'\");\n          }\n\n          continuationPromise.on(continuationResult => {\n            continuationDeferral.resolve(continuationResult);\n          }, e => {\n            continuationDeferral.reject(e);\n          });\n        } catch (e) {\n          continuationDeferral.reject(e);\n        }\n      }, error => {\n        try {\n          const continuationPromise = continuationCallback(this.privSink.result);\n\n          if (!continuationPromise) {\n            throw new Error(\"Continuation callback did not return promise\");\n          }\n\n          continuationPromise.on(continuationResult => {\n            continuationDeferral.resolve(continuationResult);\n          }, e => {\n            continuationDeferral.reject(e);\n          });\n        } catch (e) {\n          continuationDeferral.reject(`'Error handler for error ${error} threw error ${e}'`);\n        }\n      });\n      return continuationDeferral.promise();\n    };\n\n    this.onSuccessContinueWithPromise = continuationCallback => {\n      if (!continuationCallback) {\n        throw new ArgumentNullError(\"continuationCallback\");\n      }\n\n      const continuationDeferral = new Deferred();\n      this.privSink.on(r => {\n        try {\n          const continuationPromise = continuationCallback(r);\n\n          if (!continuationPromise) {\n            throw new Error(\"Continuation callback did not return promise\");\n          }\n\n          continuationPromise.on(continuationResult => {\n            continuationDeferral.resolve(continuationResult);\n          }, e => {\n            continuationDeferral.reject(e);\n          });\n        } catch (e) {\n          continuationDeferral.reject(e);\n        }\n      }, error => {\n        continuationDeferral.reject(error);\n      });\n      return continuationDeferral.promise();\n    };\n\n    this.on = (successCallback, errorCallback) => {\n      if (!successCallback) {\n        throw new ArgumentNullError(\"successCallback\");\n      }\n\n      if (!errorCallback) {\n        throw new ArgumentNullError(\"errorCallback\");\n      }\n\n      this.privSink.on(successCallback, errorCallback);\n      return this;\n    };\n\n    this.finally = callback => {\n      if (!callback) {\n        throw new ArgumentNullError(\"callback\");\n      }\n\n      const callbackWrapper = _ => {\n        callback();\n      };\n\n      return this.on(callbackWrapper, callbackWrapper);\n    };\n\n    this.privSink = sink;\n  }\n\n} // tslint:disable-next-line:max-classes-per-file\n\nexport class Deferred {\n  constructor() {\n    this.state = () => {\n      return this.privSink.state;\n    };\n\n    this.promise = () => {\n      return this.privPromise;\n    };\n\n    this.resolve = result => {\n      this.privSink.resolve(result);\n      return this;\n    };\n\n    this.reject = error => {\n      this.privSink.reject(error);\n      return this;\n    };\n\n    this.privSink = new Sink();\n    this.privPromise = new Promise(this.privSink);\n  }\n\n} // tslint:disable-next-line:max-classes-per-file\n\nexport class Sink {\n  constructor() {\n    this.privState = PromiseState.None;\n    this.privPromiseResult = null;\n    this.privPromiseResultEvents = null;\n    this.privSuccessHandlers = [];\n    this.privErrorHandlers = [];\n\n    this.resolve = result => {\n      if (this.privState !== PromiseState.None) {\n        throw new Error(\"'Cannot resolve a completed promise'\");\n      }\n\n      this.privState = PromiseState.Resolved;\n      this.privPromiseResultEvents.setResult(result);\n\n      for (let i = 0; i < this.privSuccessHandlers.length; i++) {\n        this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\n      }\n\n      this.detachHandlers();\n    };\n\n    this.reject = error => {\n      if (this.privState !== PromiseState.None) {\n        throw new Error(\"'Cannot reject a completed promise'\");\n      }\n\n      this.privState = PromiseState.Rejected;\n      this.privPromiseResultEvents.setError(error);\n\n      for (const errorHandler of this.privErrorHandlers) {\n        this.executeErrorCallback(error, errorHandler);\n      }\n\n      this.detachHandlers();\n    };\n\n    this.on = (successCallback, errorCallback) => {\n      if (successCallback == null) {\n        successCallback = r => {\n          return;\n        };\n      }\n\n      if (this.privState === PromiseState.None) {\n        this.privSuccessHandlers.push(successCallback);\n        this.privErrorHandlers.push(errorCallback);\n      } else {\n        if (this.privState === PromiseState.Resolved) {\n          this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\n        } else if (this.privState === PromiseState.Rejected) {\n          this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\n        }\n\n        this.detachHandlers();\n      }\n    };\n\n    this.executeSuccessCallback = (result, successCallback, errorCallback) => {\n      try {\n        successCallback(result);\n      } catch (e) {\n        this.executeErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\n      }\n    };\n\n    this.executeErrorCallback = (error, errorCallback) => {\n      if (errorCallback) {\n        try {\n          errorCallback(error);\n        } catch (e) {\n          throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\n        }\n      } else {\n        throw new Error(`'Unhandled error: ${error}'`);\n      }\n    };\n\n    this.detachHandlers = () => {\n      this.privErrorHandlers = [];\n      this.privSuccessHandlers = [];\n    };\n\n    this.privPromiseResultEvents = new PromiseResultEventSource();\n    this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\n  }\n\n  get state() {\n    return this.privState;\n  }\n\n  get result() {\n    return this.privPromiseResult;\n  }\n\n}","map":{"version":3,"sources":["src/common/Promise.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError  } from \"./Error\";\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IPromise<T> {\r\n    result(): PromiseResult<T>;\r\n\r\n    continueWith<TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): IPromise<TContinuationResult>;\r\n\r\n    continueWithPromise<TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\r\n\r\n    onSuccessContinueWith<TContinuationResult>(\r\n        continuationCallback: (result: T) => TContinuationResult): IPromise<TContinuationResult>;\r\n\r\n    onSuccessContinueWithPromise<TContinuationResult>(\r\n        continuationCallback: (result: T) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\r\n\r\n    on(successCallback: (result: T) => void, errorCallback: (error: string) => void): IPromise<T>;\r\n\r\n    finally(callback: () => void): IPromise<T>;\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    state(): PromiseState;\r\n\r\n    promise(): IPromise<T>;\r\n\r\n    resolve(result: T): IDeferred<T>;\r\n\r\n    reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected privIsCompleted: boolean;\r\n    protected privIsError: boolean;\r\n    protected privError: string;\r\n    protected privResult: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.on((result: T) => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = false;\r\n                this.privResult = result;\r\n            }\r\n        }, (error: string) => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = true;\r\n                this.privError = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get isCompleted(): boolean {\r\n        return this.privIsCompleted;\r\n    }\r\n\r\n    public get isError(): boolean {\r\n        return this.privIsError;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n\r\n    public get result(): T {\r\n        return this.privResult;\r\n    }\r\n\r\n    public throwIfError = (): void => {\r\n        if (this.isError) {\r\n            throw this.error;\r\n        }\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private privOnSetResult: (result: T) => void;\r\n    private privOnSetError: (error: string) => void;\r\n\r\n    public setResult = (result: T): void => {\r\n        this.privOnSetResult(result);\r\n    }\r\n\r\n    public setError = (error: string): void => {\r\n        this.privOnSetError(error);\r\n    }\r\n\r\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.privOnSetResult = onSetResult;\r\n        this.privOnSetError = onSetError;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PromiseHelper {\r\n    public static whenAll = (promises: Array<Promise<any>>): Promise<boolean> => {\r\n        if (!promises || promises.length === 0) {\r\n            throw new ArgumentNullError(\"promises\");\r\n        }\r\n\r\n        const deferred = new Deferred<boolean>();\r\n        const errors: string[] = [];\r\n        let completedPromises: number = 0;\r\n\r\n        const checkForCompletion = () => {\r\n            completedPromises++;\r\n            if (completedPromises === promises.length) {\r\n                if (errors.length === 0) {\r\n                    deferred.resolve(true);\r\n                } else {\r\n                    deferred.reject(errors.join(\", \"));\r\n                }\r\n            }\r\n        };\r\n\r\n        for (const promise of promises) {\r\n            promise.on((r: any) => {\r\n                checkForCompletion();\r\n            }, (e: string) => {\r\n                errors.push(e);\r\n                checkForCompletion();\r\n            });\r\n        }\r\n\r\n        return deferred.promise();\r\n    }\r\n\r\n    public static fromResult = <TResult>(result: TResult): Promise<TResult> => {\r\n        const deferred = new Deferred<TResult>();\r\n        deferred.resolve(result);\r\n        return deferred.promise();\r\n    }\r\n\r\n    public static fromError = <TResult>(error: string): Promise<TResult> => {\r\n        const deferred = new Deferred<TResult>();\r\n        deferred.reject(error);\r\n        return deferred.promise();\r\n    }\r\n}\r\n\r\n// TODO: replace with ES6 promises\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Promise<T> implements IPromise<T> {\r\n    private privSink: Sink<T>;\r\n\r\n    public constructor(sink: Sink<T>) {\r\n        this.privSink = sink;\r\n    }\r\n\r\n    public result = (): PromiseResult<T> => {\r\n        return this.privSink.result;\r\n    }\r\n\r\n    public continueWith = <TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.privSink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(this.privSink.result);\r\n                    continuationDeferral.resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(this.privSink.result);\r\n                    continuationDeferral.resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.reject(`'Error handler for error ${error} threw error ${e}'`);\r\n                }\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.promise();\r\n    }\r\n\r\n    public onSuccessContinueWith = <TContinuationResult>(\r\n        continuationCallback: (result: T) => TContinuationResult): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.privSink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(r);\r\n                    continuationDeferral.resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                continuationDeferral.reject(error);\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.promise();\r\n    }\r\n\r\n    public continueWithPromise = <TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.privSink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.privSink.result);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"'Continuation callback did not return promise'\");\r\n                    }\r\n                    continuationPromise.on((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.privSink.result);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"Continuation callback did not return promise\");\r\n                    }\r\n                    continuationPromise.on((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.reject(`'Error handler for error ${error} threw error ${e}'`);\r\n                }\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.promise();\r\n    }\r\n\r\n    public onSuccessContinueWithPromise = <TContinuationResult>(\r\n        continuationCallback: (result: T) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.privSink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(r);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"Continuation callback did not return promise\");\r\n                    }\r\n                    continuationPromise.on((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                continuationDeferral.reject(error);\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.promise();\r\n    }\r\n\r\n    public on = (\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): Promise<T> => {\r\n        if (!successCallback) {\r\n            throw new ArgumentNullError(\"successCallback\");\r\n        }\r\n\r\n        if (!errorCallback) {\r\n            throw new ArgumentNullError(\"errorCallback\");\r\n        }\r\n\r\n        this.privSink.on(successCallback, errorCallback);\r\n        return this;\r\n    }\r\n\r\n    public finally = (callback: () => void): Promise<T> => {\r\n        if (!callback) {\r\n            throw new ArgumentNullError(\"callback\");\r\n        }\r\n\r\n        const callbackWrapper = (_: any) => {\r\n            callback();\r\n        };\r\n\r\n        return this.on(callbackWrapper, callbackWrapper);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Deferred<T> implements IDeferred<T> {\r\n    private privPromise: Promise<T>;\r\n    private privSink: Sink<T>;\r\n\r\n    public constructor() {\r\n        this.privSink = new Sink<T>();\r\n        this.privPromise = new Promise<T>(this.privSink);\r\n    }\r\n\r\n    public state = (): PromiseState => {\r\n        return this.privSink.state;\r\n    }\r\n\r\n    public promise = (): Promise<T> => {\r\n        return this.privPromise;\r\n    }\r\n\r\n    public resolve = (result: T): Deferred<T> => {\r\n        this.privSink.resolve(result);\r\n        return this;\r\n    }\r\n\r\n    public reject = (error: string): Deferred<T> => {\r\n        this.privSink.reject(error);\r\n        return this;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Sink<T> {\r\n    private privState: PromiseState = PromiseState.None;\r\n    private privPromiseResult: PromiseResult<T> = null;\r\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private privSuccessHandlers: Array<((result: T) => void)> = [];\r\n    private privErrorHandlers: Array<(e: string) => void> = [];\r\n\r\n    public constructor() {\r\n        this.privPromiseResultEvents = new PromiseResultEventSource();\r\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\r\n    }\r\n\r\n    public get state(): PromiseState {\r\n        return this.privState;\r\n    }\r\n\r\n    public get result(): PromiseResult<T> {\r\n        return this.privPromiseResult;\r\n    }\r\n\r\n    public resolve = (result: T): void => {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Resolved;\r\n        this.privPromiseResultEvents.setResult(result);\r\n\r\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\r\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public reject = (error: string): void => {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Rejected;\r\n        this.privPromiseResultEvents.setError(error);\r\n\r\n        for (const errorHandler of this.privErrorHandlers) {\r\n            this.executeErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public on = (\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void => {\r\n\r\n        if (successCallback == null) {\r\n            successCallback = (r: T) => { return; };\r\n        }\r\n\r\n        if (this.privState === PromiseState.None) {\r\n            this.privSuccessHandlers.push(successCallback);\r\n            this.privErrorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.privState === PromiseState.Resolved) {\r\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\r\n            } else if (this.privState === PromiseState.Rejected) {\r\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\r\n            }\r\n\r\n            this.detachHandlers();\r\n        }\r\n    }\r\n\r\n    private executeSuccessCallback = (result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void => {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.executeErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private executeErrorCallback = (error: string, errorCallback: (error: string) => void): void => {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private detachHandlers = (): void => {\r\n        this.privErrorHandlers = [];\r\n        this.privSuccessHandlers = [];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}