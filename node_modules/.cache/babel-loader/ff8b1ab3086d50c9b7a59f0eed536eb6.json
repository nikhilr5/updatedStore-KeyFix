{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, SpeechConfigImpl } from \"./Exports\";\n/**\n * Class that defines base configurations for dialog service connector\n * @class DialogServiceConfig\n */\n\nexport class DialogServiceConfig {\n  /**\n   * Creates an instance of DialogService config.\n   * @constructor\n   */\n  constructor() {}\n\n}\n/**\n * Dialog Service configuration.\n * @class DialogServiceConfigImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\n  /**\n   * Creates an instance of dialogService config.\n   */\n  constructor() {\n    super();\n    this.privSpeechConfig = new SpeechConfigImpl();\n  }\n  /**\n   * Provides access to custom properties.\n   * @member DialogServiceConfigImpl.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The properties.\n   */\n\n\n  get properties() {\n    return this.privSpeechConfig.properties;\n  }\n  /**\n   * Gets the speech recognition language.\n   * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   */\n\n\n  get speechRecognitionLanguage() {\n    return this.privSpeechConfig.speechRecognitionLanguage;\n  }\n  /**\n   * Sets the speech recognition language.\n   * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @param {string} value - The language to set.\n   */\n\n\n  set speechRecognitionLanguage(value) {\n    Contracts.throwIfNullOrWhitespace(value, \"value\");\n    this.privSpeechConfig.speechRecognitionLanguage = value;\n  }\n  /**\n   * Sets a named property as value\n   * @member DialogServiceConfigImpl.prototype.setProperty\n   * @function\n   * @public\n   * @param {PropertyId | string} name - The property to set.\n   * @param {string} value - The value.\n   */\n\n\n  setProperty(name, value) {\n    this.privSpeechConfig.setProperty(name, value);\n  }\n  /**\n   * Sets a named property as value\n   * @member DialogServiceConfigImpl.prototype.getProperty\n   * @function\n   * @public\n   * @param {PropertyId | string} name - The property to get.\n   * @param {string} def - The default value to return in case the property is not known.\n   * @returns {string} The current value, or provided default, of the given property.\n   */\n\n\n  getProperty(name, def) {\n    return this.privSpeechConfig.getProperty(name);\n  }\n  /**\n   * Sets the proxy configuration.\n   * Only relevant in Node.js environments.\n   * Added in version 1.4.0.\n   * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\n   * @param proxyPort The port number of the proxy server.\n   * @param proxyUserName The user name of the proxy server.\n   * @param proxyPassword The password of the proxy server.\n   */\n\n\n  setProxy(proxyHostName, proxyPort, proxyUserName, proxyPassword) {\n    this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\n    this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\n\n    if (proxyUserName) {\n      this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\n    }\n\n    if (proxyPassword) {\n      this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\n    }\n  }\n\n  setServiceProperty(name, value, channel) {\n    this.privSpeechConfig.setServiceProperty(name, value, channel);\n  }\n  /**\n   * Dispose of associated resources.\n   * @member DialogServiceConfigImpl.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close() {\n    return;\n  }\n\n}","map":{"version":3,"sources":["src/sdk/DialogServiceConfig.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAA6B,UAA7B,EAAiE,gBAAjE,QAAyF,WAAzF;AAEA;;;;;AAIA,OAAM,MAAgB,mBAAhB,CAAmC;AAErC;;;;AAIA,EAAA,WAAA,GAAA,CAA2B;;AANU;AAoFzC;;;;AAIA;;AACA,OAAM,MAAO,uBAAP,SAAuC,mBAAvC,CAA0D;AAI5D;;;AAGA,EAAA,WAAA,GAAA;AACI;AACA,SAAK,gBAAL,GAAwB,IAAI,gBAAJ,EAAxB;AACH;AAED;;;;;;;;;AAOA,MAAW,UAAX,GAAqB;AACjB,WAAO,KAAK,gBAAL,CAAsB,UAA7B;AACH;AAED;;;;;;;;AAMA,MAAW,yBAAX,GAAoC;AAChC,WAAO,KAAK,gBAAL,CAAsB,yBAA7B;AACH;AAED;;;;;;;;;AAOA,MAAW,yBAAX,CAAqC,KAArC,EAAkD;AAC9C,IAAA,SAAS,CAAC,uBAAV,CAAkC,KAAlC,EAAyC,OAAzC;AACA,SAAK,gBAAL,CAAsB,yBAAtB,GAAkD,KAAlD;AACH;AAED;;;;;;;;;;AAQO,EAAA,WAAW,CAAC,IAAD,EAA4B,KAA5B,EAAyC;AACvD,SAAK,gBAAL,CAAsB,WAAtB,CAAkC,IAAlC,EAAwC,KAAxC;AACH;AAED;;;;;;;;;;;AASO,EAAA,WAAW,CAAC,IAAD,EAA4B,GAA5B,EAAwC;AACtD,WAAO,KAAK,gBAAL,CAAsB,WAAtB,CAAkC,IAAlC,CAAP;AACH;AAED;;;;;;;;;;;AASO,EAAA,QAAQ,CAAC,aAAD,EAAwB,SAAxB,EAA2C,aAA3C,EAAmE,aAAnE,EAAyF;AACpG,SAAK,WAAL,CAAiB,UAAU,CAAC,qCAA5B,EAAmE,aAAnE;AACA,SAAK,WAAL,CAAiB,UAAU,CAAC,iCAA5B,EAA+D,GAAG,SAAS,EAA3E;;AACA,QAAI,aAAJ,EAAmB;AACf,WAAK,WAAL,CAAiB,UAAU,CAAC,qCAA5B,EAAmE,aAAnE;AACH;;AACD,QAAI,aAAJ,EAAmB;AACf,WAAK,WAAL,CAAiB,UAAU,CAAC,qCAA5B,EAAmE,aAAnE;AACH;AACJ;;AAEM,EAAA,kBAAkB,CAAC,IAAD,EAAe,KAAf,EAA8B,OAA9B,EAA6D;AAClF,SAAK,gBAAL,CAAsB,kBAAtB,CAAyC,IAAzC,EAA+C,KAA/C,EAAsD,OAAtD;AACH;AAED;;;;;;;;AAMO,EAAA,KAAK,GAAA;AACR;AACH;;AAtG2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { PropertyCollection, PropertyId, ServicePropertyChannel, SpeechConfigImpl } from \"./Exports\";\r\n\r\n/**\r\n * Class that defines base configurations for dialog service connector\r\n * @class DialogServiceConfig\r\n */\r\nexport abstract class DialogServiceConfig {\r\n\r\n    /**\r\n     * Creates an instance of DialogService config.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n    /**\r\n     * @member DialogServiceConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     * @summary Sets a property value that will be passed to service using the specified channel.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param porxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to use for recognition.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Not used in DialogServiceConfig\r\n     * @member DialogServiceConfig.applicationId\r\n     */\r\n    public applicationId: string;\r\n}\r\n\r\n/**\r\n * Dialog Service configuration.\r\n * @class DialogServiceConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\r\n\r\n    private privSpeechConfig: SpeechConfigImpl;\r\n\r\n    /**\r\n     * Creates an instance of dialogService config.\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechConfig = new SpeechConfigImpl();\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member DialogServiceConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechConfig.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechConfig.speechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to set.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechConfig.speechRecognitionLanguage = value;\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to set.\r\n     * @param {string} value - The value.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechConfig.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to get.\r\n     * @param {string} def - The default value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n        return this.privSpeechConfig.getProperty(name);\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName?: string, proxyPassword?: string): void {\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\r\n        if (proxyUserName) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\r\n        }\r\n        if (proxyPassword) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\r\n        }\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        this.privSpeechConfig.setServiceProperty(name, value, channel);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member DialogServiceConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}