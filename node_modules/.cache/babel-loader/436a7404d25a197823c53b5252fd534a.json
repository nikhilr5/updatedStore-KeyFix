{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Contracts } from \"./Contracts\";\nimport { DialogServiceConfigImpl } from \"./DialogServiceConfig\";\nimport { PropertyId } from \"./Exports\";\n/**\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\n * @class CustomCommandsConfig\n */\n\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\n  /**\n   * Creates an instance of CustomCommandsConfig.\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Creates an instance of the bot framework config with the specified subscription and region.\n   * @member CustomCommandsConfig.fromSubscription\n   * @function\n   * @public\n   * @param applicationId Speech Commands application id.\n   * @param subscription Subscription key associated with the bot\n   * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {CustomCommandsConfig} A new bot framework config.\n   */\n\n\n  static fromSubscription(applicationId, subscription, region) {\n    Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\n    Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\n    Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const customCommandsConfig = new DialogServiceConfigImpl();\n    customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, \"custom_commands\");\n    customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\n    customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\n    customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n    return customCommandsConfig;\n  }\n  /**\n   * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\n   * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n   * expires, the caller needs to refresh it by calling this setter with a new valid token.\n   * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\n   * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\n   * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\n   * @member CustomCommandsConfig.fromAuthorizationToken\n   * @function\n   * @public\n   * @param applicationId Speech Commands application id.\n   * @param authorizationToken The authorization token associated with the application.\n   * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {CustomCommandsConfig} A new speech commands config.\n   */\n\n\n  static fromAuthorizationToken(applicationId, authorizationToken, region) {\n    Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\n    Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n    Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const customCommandsConfig = new DialogServiceConfigImpl();\n    customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, \"custom_commands\");\n    customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\n    customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n    customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n    return customCommandsConfig;\n  }\n  /**\n   * Sets the corresponding backend application identifier.\n   * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\n   * @function\n   * @public\n   * @param {string} value - The application identifier to set.\n   */\n\n\n  set applicationId(value) {\n    Contracts.throwIfNullOrWhitespace(value, \"value\");\n    this.setProperty(PropertyId.Conversation_ApplicationId, value);\n  }\n  /**\n   * Gets the corresponding backend application identifier.\n   * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\n   * @function\n   * @public\n   * @param {string} value - The application identifier to get.\n   */\n\n\n  get applicationId() {\n    return this.getProperty(PropertyId.Conversation_ApplicationId);\n  }\n\n}","map":{"version":3,"sources":["src/sdk/CustomCommandsConfig.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,uBAAT,QAAwC,uBAAxC;AACA,SAAS,UAAT,QAA2B,WAA3B;AAEA;;;;;AAIA,OAAM,MAAO,oBAAP,SAAoC,uBAApC,CAA2D;AAE7D;;;AAGA,EAAA,WAAA,GAAA;AACI;AACH;AAED;;;;;;;;;;;;AAUO,SAAO,gBAAP,CAAwB,aAAxB,EAA+C,YAA/C,EAAqE,MAArE,EAAmF;AACtF,IAAA,SAAS,CAAC,uBAAV,CAAkC,aAAlC,EAAiD,eAAjD;AACA,IAAA,SAAS,CAAC,uBAAV,CAAkC,YAAlC,EAAgD,cAAhD;AACA,IAAA,SAAS,CAAC,uBAAV,CAAkC,MAAlC,EAA0C,QAA1C;AAEA,UAAM,oBAAoB,GAAyB,IAAI,uBAAJ,EAAnD;AACA,IAAA,oBAAoB,CAAC,WAArB,CAAiC,UAAU,CAAC,uBAA5C,EAAqE,iBAArE;AACA,IAAA,oBAAoB,CAAC,WAArB,CAAiC,UAAU,CAAC,0BAA5C,EAAwE,aAAxE;AACA,IAAA,oBAAoB,CAAC,WAArB,CAAiC,UAAU,CAAC,2BAA5C,EAAyE,YAAzE;AACA,IAAA,oBAAoB,CAAC,WAArB,CAAiC,UAAU,CAAC,8BAA5C,EAA4E,MAA5E;AACA,WAAO,oBAAP;AACH;AAED;;;;;;;;;;;;;;;;;AAeO,SAAO,sBAAP,CAA8B,aAA9B,EAAqD,kBAArD,EAAiF,MAAjF,EAA+F;AAClG,IAAA,SAAS,CAAC,uBAAV,CAAkC,aAAlC,EAAiD,eAAjD;AACA,IAAA,SAAS,CAAC,uBAAV,CAAkC,kBAAlC,EAAsD,oBAAtD;AACA,IAAA,SAAS,CAAC,uBAAV,CAAkC,MAAlC,EAA0C,QAA1C;AAEA,UAAM,oBAAoB,GAAyB,IAAI,uBAAJ,EAAnD;AACA,IAAA,oBAAoB,CAAC,WAArB,CAAiC,UAAU,CAAC,uBAA5C,EAAqE,iBAArE;AACA,IAAA,oBAAoB,CAAC,WAArB,CAAiC,UAAU,CAAC,0BAA5C,EAAwE,aAAxE;AACA,IAAA,oBAAoB,CAAC,WAArB,CAAiC,UAAU,CAAC,gCAA5C,EAA8E,kBAA9E;AACA,IAAA,oBAAoB,CAAC,WAArB,CAAiC,UAAU,CAAC,8BAA5C,EAA4E,MAA5E;AACA,WAAO,oBAAP;AACH;AAED;;;;;;;;;AAOA,MAAW,aAAX,CAAyB,KAAzB,EAAsC;AAClC,IAAA,SAAS,CAAC,uBAAV,CAAkC,KAAlC,EAAyC,OAAzC;AACA,SAAK,WAAL,CAAiB,UAAU,CAAC,0BAA5B,EAAwD,KAAxD;AACH;AAED;;;;;;;;;AAOA,MAAW,aAAX,GAAwB;AACpB,WAAO,KAAK,WAAL,CAAiB,UAAU,CAAC,0BAA5B,CAAP;AACH;;AAjF4D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\r\n * @class CustomCommandsConfig\r\n */\r\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of CustomCommandsConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified subscription and region.\r\n     * @member CustomCommandsConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new bot framework config.\r\n     */\r\n    public static fromSubscription(applicationId: string, subscription: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, \"custom_commands\");\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member CustomCommandsConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param authorizationToken The authorization token associated with the application.\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new speech commands config.\r\n     */\r\n    public static fromAuthorizationToken(applicationId: string, authorizationToken: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, \"custom_commands\");\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    public set applicationId(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.setProperty(PropertyId.Conversation_ApplicationId, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to get.\r\n     */\r\n    public get applicationId(): string {\r\n        return this.getProperty(PropertyId.Conversation_ApplicationId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}