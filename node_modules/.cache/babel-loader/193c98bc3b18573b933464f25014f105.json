{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { CognitiveSubscriptionKeyAuthentication, CognitiveTokenAuthentication, Context, OS, ServiceRecognizerBase, SpeechServiceConfig } from \"../common.speech/Exports\";\nimport { PromiseHelper } from \"../common/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { AudioConfig, PropertyId } from \"./Exports\";\n/**\n * Defines the base class Recognizer which mainly contains common event handlers.\n * @class Recognizer\n */\n\nexport class Recognizer {\n  /**\n   * Creates and initializes an instance of a Recognizer\n   * @constructor\n   * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\n   */\n  constructor(audioConfig, properties, connectionFactory) {\n    this.audioConfig = audioConfig !== undefined ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\n    this.privDisposed = false;\n    this.privProperties = properties.clone();\n    this.privConnectionFactory = connectionFactory;\n    this.implCommonRecognizerSetup();\n  }\n  /**\n   * Dispose of associated resources.\n   * @member Recognizer.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close() {\n    Contracts.throwIfDisposed(this.privDisposed);\n    this.dispose(true);\n  }\n  /**\n   * @Internal\n   * Internal data member to support fromRecognizer* pattern methods on other classes.\n   * Do not use externally, object returned will change without warning or notice.\n   */\n\n\n  get internalData() {\n    return this.privReco;\n  }\n  /**\n   * This method performs cleanup of resources.\n   * The Boolean parameter disposing indicates whether the method is called\n   * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\n   * Derived classes should override this method to dispose resource if needed.\n   * @member Recognizer.prototype.dispose\n   * @function\n   * @public\n   * @param {boolean} disposing - Flag to request disposal.\n   */\n\n\n  dispose(disposing) {\n    if (this.privDisposed) {\n      return;\n    }\n\n    if (disposing) {\n      if (this.privReco) {\n        this.privReco.audioSource.turnOff();\n        this.privReco.dispose();\n      }\n    }\n\n    this.privDisposed = true;\n  }\n  /**\n   * This method returns the current state of the telemetry setting.\n   * @member Recognizer.prototype.telemetryEnabled\n   * @function\n   * @public\n   * @returns true if the telemetry is enabled, false otherwise.\n   */\n\n\n  static get telemetryEnabled() {\n    return ServiceRecognizerBase.telemetryDataEnabled;\n  }\n  /**\n   * This method globally enables or disables telemetry.\n   * @member Recognizer.prototype.enableTelemetry\n   * @function\n   * @public\n   * @param enabled - Global setting for telemetry collection.\n   * If set to true, telemetry information like microphone errors,\n   * recognition errors are collected and sent to Microsoft.\n   * If set to false, no telemetry is sent to Microsoft.\n   */\n\n  /* tslint:disable:member-ordering */\n\n\n  static enableTelemetry(enabled) {\n    ServiceRecognizerBase.telemetryDataEnabled = enabled;\n  } // Does the generic recognizer setup that is common across all recognizer types.\n\n\n  implCommonRecognizerSetup() {\n    let osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n    let osName = \"unknown\";\n    let osVersion = \"unknown\";\n\n    if (typeof navigator !== \"undefined\") {\n      osPlatform = osPlatform + \"/\" + navigator.platform;\n      osName = navigator.userAgent;\n      osVersion = navigator.appVersion;\n    }\n\n    const recognizerConfig = this.createRecognizerConfig(new SpeechServiceConfig(new Context(new OS(osPlatform, osName, osVersion))));\n    const subscriptionKey = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\n    const authentication = subscriptionKey && subscriptionKey !== \"\" ? new CognitiveSubscriptionKeyAuthentication(subscriptionKey) : new CognitiveTokenAuthentication(authFetchEventId => {\n      const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\n      return PromiseHelper.fromResult(authorizationToken);\n    }, authFetchEventId => {\n      const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\n      return PromiseHelper.fromResult(authorizationToken);\n    });\n    this.privReco = this.createServiceRecognizer(authentication, this.privConnectionFactory, this.audioConfig, recognizerConfig);\n  }\n\n  recognizeOnceAsyncImpl(recognitionMode, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privDisposed);\n      this.implRecognizerStop().on(_ => {\n        try {\n          this.privReco.recognize(recognitionMode, e => {\n            this.implRecognizerStop().on(_ => {\n              if (!!cb) {\n                cb(e);\n              }\n            }, error => {\n              if (!!err) {\n                err(error);\n              }\n            });\n          }, e => {\n            this.implRecognizerStop(); // We're already in an error path so best effort here.\n\n            if (!!err) {\n              err(e);\n            }\n            /* tslint:disable:no-empty */\n\n          }).on(_ => {}, error => {\n            if (!!err) {\n              err(error);\n            }\n          });\n        } catch (error) {\n          if (!!err) {\n            if (error instanceof Error) {\n              const typedError = error;\n              err(typedError.name + \": \" + typedError.message);\n            } else {\n              err(error);\n            }\n          } // Destroy the recognizer.\n\n\n          this.dispose(true);\n        }\n      }, error => {\n        if (!!err) {\n          err(error);\n        }\n      });\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      } // Destroy the recognizer.\n\n\n      this.dispose(true);\n    }\n  }\n\n  startContinuousRecognitionAsyncImpl(recognitionMode, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privDisposed);\n      this.implRecognizerStop().on(_ => {\n        this.privReco.recognize(recognitionMode, undefined, undefined).on(_ => {\n          // report result to promise.\n          if (!!cb) {\n            try {\n              cb();\n            } catch (e) {\n              if (!!err) {\n                err(e);\n              }\n            }\n\n            cb = undefined;\n          }\n        }, error => {\n          if (!!err) {\n            err(error);\n          } // Destroy the recognizer.\n\n\n          this.dispose(true);\n        });\n      }, error => {\n        if (!!err) {\n          err(error);\n        } // Destroy the recognizer.\n\n\n        this.dispose(true);\n      });\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      } // Destroy the recognizer.\n\n\n      this.dispose(true);\n    }\n  }\n\n  stopContinuousRecognitionAsyncImpl(cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privDisposed);\n      this.implRecognizerStop().on(_ => {\n        if (!!cb) {\n          try {\n            cb();\n          } catch (e) {\n            if (!!err) {\n              err(e);\n            }\n          }\n        }\n      }, error => {\n        if (!!err) {\n          err(error);\n        }\n      });\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      } // Destroy the recognizer.\n\n\n      this.dispose(true);\n    }\n  }\n\n  implRecognizerStop() {\n    if (this.privReco) {\n      return this.privReco.stopRecognizing();\n    }\n\n    return PromiseHelper.fromResult(true);\n  }\n\n}","map":{"version":3,"sources":["src/sdk/Recognizer.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SACI,sCADJ,EAEI,4BAFJ,EAGI,OAHJ,EAMI,EANJ,EASI,qBATJ,EAUI,mBAVJ,QAWO,0BAXP;AAYA,SAAkB,aAAlB,QAAuC,mBAAvC;AACA,SAAS,SAAT,QAA0B,aAA1B;AACA,SACI,WADJ,EAII,UAJJ,QAQO,WARP;AAUA;;;;;AAIA,OAAM,MAAgB,UAAhB,CAA0B;AAO5B;;;;;AAKA,EAAA,WAAA,CAAsB,WAAtB,EAAgD,UAAhD,EAAgF,iBAAhF,EAAqH;AACjH,SAAK,WAAL,GAAoB,WAAW,KAAK,SAAjB,GAA8B,WAA9B,GAA4C,WAAW,CAAC,0BAAZ,EAA/D;AACA,SAAK,YAAL,GAAoB,KAApB;AACA,SAAK,cAAL,GAAsB,UAAU,CAAC,KAAX,EAAtB;AACA,SAAK,qBAAL,GAA6B,iBAA7B;AACA,SAAK,yBAAL;AACH;AAkCD;;;;;;;;AAMO,EAAA,KAAK,GAAA;AACR,IAAA,SAAS,CAAC,eAAV,CAA0B,KAAK,YAA/B;AAEA,SAAK,OAAL,CAAa,IAAb;AACH;AAED;;;;;;;AAKA,MAAW,YAAX,GAAuB;AACnB,WAAO,KAAK,QAAZ;AACH;AAED;;;;;;;;;;;;AAUU,EAAA,OAAO,CAAC,SAAD,EAAmB;AAChC,QAAI,KAAK,YAAT,EAAuB;AACnB;AACH;;AAED,QAAI,SAAJ,EAAe;AACX,UAAI,KAAK,QAAT,EAAmB;AACf,aAAK,QAAL,CAAc,WAAd,CAA0B,OAA1B;AACA,aAAK,QAAL,CAAc,OAAd;AACH;AACJ;;AAED,SAAK,YAAL,GAAoB,IAApB;AACH;AAED;;;;;;;;;AAOO,aAAW,gBAAX,GAA2B;AAC9B,WAAO,qBAAqB,CAAC,oBAA7B;AACH;AAED;;;;;;;;;;;AAUA;;;AACO,SAAO,eAAP,CAAuB,OAAvB,EAAuC;AAC1C,IAAA,qBAAqB,CAAC,oBAAtB,GAA6C,OAA7C;AACH,GA1H2B,CA2I5B;;;AACU,EAAA,yBAAyB,GAAA;AAE/B,QAAI,UAAU,GAAI,OAAO,MAAP,KAAkB,WAAnB,GAAkC,SAAlC,GAA8C,MAA/D;AACA,QAAI,MAAM,GAAG,SAAb;AACA,QAAI,SAAS,GAAG,SAAhB;;AAEA,QAAI,OAAO,SAAP,KAAqB,WAAzB,EAAsC;AAClC,MAAA,UAAU,GAAG,UAAU,GAAG,GAAb,GAAmB,SAAS,CAAC,QAA1C;AACA,MAAA,MAAM,GAAG,SAAS,CAAC,SAAnB;AACA,MAAA,SAAS,GAAG,SAAS,CAAC,UAAtB;AACH;;AAED,UAAM,gBAAgB,GAAG,KAAK,sBAAL,CACrB,IAAI,mBAAJ,CACI,IAAI,OAAJ,CAAY,IAAI,EAAJ,CAAO,UAAP,EAAmB,MAAnB,EAA2B,SAA3B,CAAZ,CADJ,CADqB,CAAzB;AAIA,UAAM,eAAe,GAAG,KAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,2BAA3C,EAAwE,SAAxE,CAAxB;AACA,UAAM,cAAc,GAAI,eAAe,IAAI,eAAe,KAAK,EAAxC,GACnB,IAAI,sCAAJ,CAA2C,eAA3C,CADmB,GAEnB,IAAI,4BAAJ,CACK,gBAAD,IAA8C;AAC1C,YAAM,kBAAkB,GAAG,KAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,gCAA3C,EAA6E,SAA7E,CAA3B;AACA,aAAO,aAAa,CAAC,UAAd,CAAyB,kBAAzB,CAAP;AACH,KAJL,EAKK,gBAAD,IAA8C;AAC1C,YAAM,kBAAkB,GAAG,KAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,gCAA3C,EAA6E,SAA7E,CAA3B;AACA,aAAO,aAAa,CAAC,UAAd,CAAyB,kBAAzB,CAAP;AACH,KARL,CAFJ;AAYA,SAAK,QAAL,GAAgB,KAAK,uBAAL,CACZ,cADY,EAEZ,KAAK,qBAFO,EAGZ,KAAK,WAHO,EAIZ,gBAJY,CAAhB;AAKH;;AAES,EAAA,sBAAsB,CAAC,eAAD,EAAmC,EAAnC,EAA8E,GAA9E,EAAuG;AACnI,QAAI;AACA,MAAA,SAAS,CAAC,eAAV,CAA0B,KAAK,YAA/B;AAEA,WAAK,kBAAL,GAA0B,EAA1B,CAA8B,CAAD,IAAqB;AAC9C,YAAI;AACA,eAAK,QAAL,CAAc,SAAd,CAAwB,eAAxB,EAA0C,CAAD,IAA+B;AACpE,iBAAK,kBAAL,GAA0B,EAA1B,CAA8B,CAAD,IAAqB;AAC9C,kBAAI,CAAC,CAAC,EAAN,EAAU;AACN,gBAAA,EAAE,CAAC,CAAD,CAAF;AACH;AACJ,aAJD,EAII,KAAD,IAAwB;AACvB,kBAAI,CAAC,CAAC,GAAN,EAAW;AACP,gBAAA,GAAG,CAAC,KAAD,CAAH;AACH;AACJ,aARD;AAUH,WAXD,EAWI,CAAD,IAAc;AACb,iBAAK,kBAAL,GADa,CACc;;AAC3B,gBAAI,CAAC,CAAC,GAAN,EAAW;AACP,cAAA,GAAG,CAAC,CAAD,CAAH;AACH;AACL;;AACC,WAjBD,EAiBG,EAjBH,CAiBO,CAAD,IAAqB,CAAI,CAjB/B,EAkBK,KAAD,IAAkB;AACd,gBAAI,CAAC,CAAC,GAAN,EAAW;AACP,cAAA,GAAG,CAAC,KAAD,CAAH;AACH;AACJ,WAtBL;AAuBH,SAxBD,CAwBE,OAAO,KAAP,EAAc;AACZ,cAAI,CAAC,CAAC,GAAN,EAAW;AACP,gBAAI,KAAK,YAAY,KAArB,EAA4B;AACxB,oBAAM,UAAU,GAAU,KAA1B;AACA,cAAA,GAAG,CAAC,UAAU,CAAC,IAAX,GAAkB,IAAlB,GAAyB,UAAU,CAAC,OAArC,CAAH;AACH,aAHD,MAGO;AACH,cAAA,GAAG,CAAC,KAAD,CAAH;AACH;AACJ,WARW,CAUZ;;;AACA,eAAK,OAAL,CAAa,IAAb;AACH;AACJ,OAtCD,EAsCI,KAAD,IAAwB;AACvB,YAAI,CAAC,CAAC,GAAN,EAAW;AACP,UAAA,GAAG,CAAC,KAAD,CAAH;AACH;AACJ,OA1CD;AA2CH,KA9CD,CA8CE,OAAO,KAAP,EAAc;AACZ,UAAI,CAAC,CAAC,GAAN,EAAW;AACP,YAAI,KAAK,YAAY,KAArB,EAA4B;AACxB,gBAAM,UAAU,GAAU,KAA1B;AACA,UAAA,GAAG,CAAC,UAAU,CAAC,IAAX,GAAkB,IAAlB,GAAyB,UAAU,CAAC,OAArC,CAAH;AACH,SAHD,MAGO;AACH,UAAA,GAAG,CAAC,KAAD,CAAH;AACH;AACJ,OARW,CAUZ;;;AACA,WAAK,OAAL,CAAa,IAAb;AACH;AACJ;;AAEM,EAAA,mCAAmC,CAAC,eAAD,EAAmC,EAAnC,EAAoD,GAApD,EAA6E;AACnH,QAAI;AACA,MAAA,SAAS,CAAC,eAAV,CAA0B,KAAK,YAA/B;AAEA,WAAK,kBAAL,GAA0B,EAA1B,CAA8B,CAAD,IAAqB;AAC9C,aAAK,QAAL,CAAc,SAAd,CAAwB,eAAxB,EAAyC,SAAzC,EAAoD,SAApD,EAA+D,EAA/D,CAAmE,CAAD,IAAqB;AACnF;AACA,cAAI,CAAC,CAAC,EAAN,EAAU;AACN,gBAAI;AACA,cAAA,EAAE;AACL,aAFD,CAEE,OAAO,CAAP,EAAU;AACR,kBAAI,CAAC,CAAC,GAAN,EAAW;AACP,gBAAA,GAAG,CAAC,CAAD,CAAH;AACH;AACJ;;AACD,YAAA,EAAE,GAAG,SAAL;AACH;AACJ,SAZD,EAYI,KAAD,IAAwB;AACvB,cAAI,CAAC,CAAC,GAAN,EAAW;AACP,YAAA,GAAG,CAAC,KAAD,CAAH;AACH,WAHsB,CAIvB;;;AACA,eAAK,OAAL,CAAa,IAAb;AACH,SAlBD;AAmBH,OApBD,EAoBI,KAAD,IAAwB;AACvB,YAAI,CAAC,CAAC,GAAN,EAAW;AACP,UAAA,GAAG,CAAC,KAAD,CAAH;AACH,SAHsB,CAIvB;;;AACA,aAAK,OAAL,CAAa,IAAb;AACH,OA1BD;AA2BH,KA9BD,CA8BE,OAAO,KAAP,EAAc;AACZ,UAAI,CAAC,CAAC,GAAN,EAAW;AACP,YAAI,KAAK,YAAY,KAArB,EAA4B;AACxB,gBAAM,UAAU,GAAU,KAA1B;AACA,UAAA,GAAG,CAAC,UAAU,CAAC,IAAX,GAAkB,IAAlB,GAAyB,UAAU,CAAC,OAArC,CAAH;AACH,SAHD,MAGO;AACH,UAAA,GAAG,CAAC,KAAD,CAAH;AACH;AACJ,OARW,CAUZ;;;AACA,WAAK,OAAL,CAAa,IAAb;AACH;AACJ;;AAES,EAAA,kCAAkC,CAAC,EAAD,EAAkB,GAAlB,EAA2C;AACnF,QAAI;AACA,MAAA,SAAS,CAAC,eAAV,CAA0B,KAAK,YAA/B;AAEA,WAAK,kBAAL,GAA0B,EAA1B,CAA8B,CAAD,IAAe;AACxC,YAAI,CAAC,CAAC,EAAN,EAAU;AACN,cAAI;AACA,YAAA,EAAE;AACL,WAFD,CAEE,OAAO,CAAP,EAAU;AACR,gBAAI,CAAC,CAAC,GAAN,EAAW;AACP,cAAA,GAAG,CAAC,CAAD,CAAH;AACH;AACJ;AACJ;AACJ,OAVD,EAUI,KAAD,IAAkB;AACjB,YAAI,CAAC,CAAC,GAAN,EAAW;AACP,UAAA,GAAG,CAAC,KAAD,CAAH;AACH;AACJ,OAdD;AAgBH,KAnBD,CAmBE,OAAO,KAAP,EAAc;AACZ,UAAI,CAAC,CAAC,GAAN,EAAW;AACP,YAAI,KAAK,YAAY,KAArB,EAA4B;AACxB,gBAAM,UAAU,GAAU,KAA1B;AACA,UAAA,GAAG,CAAC,UAAU,CAAC,IAAX,GAAkB,IAAlB,GAAyB,UAAU,CAAC,OAArC,CAAH;AACH,SAHD,MAGO;AACH,UAAA,GAAG,CAAC,KAAD,CAAH;AACH;AACJ,OARW,CAUZ;;;AACA,WAAK,OAAL,CAAa,IAAb;AACH;AACJ;;AAES,EAAA,kBAAkB,GAAA;AACxB,QAAI,KAAK,QAAT,EAAmB;AACf,aAAO,KAAK,QAAL,CAAc,eAAd,EAAP;AACH;;AACD,WAAO,aAAa,CAAC,UAAd,CAAyB,IAAzB,CAAP;AACH;;AApU2B","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OS,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { Promise, PromiseHelper } from \"../common/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    Connection,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines the base class Recognizer which mainly contains common event handlers.\r\n * @class Recognizer\r\n */\r\nexport abstract class Recognizer {\r\n    private privDisposed: boolean;\r\n    protected audioConfig: AudioConfig;\r\n    protected privReco: ServiceRecognizerBase;\r\n    protected privProperties: PropertyCollection;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\r\n     */\r\n    protected constructor(audioConfig: AudioConfig, properties: PropertyCollection, connectionFactory: IConnectionFactory) {\r\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\r\n        this.privDisposed = false;\r\n        this.privProperties = properties.clone();\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.implCommonRecognizerSetup();\r\n    }\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member Recognizer.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member Recognizer.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech started events.\r\n     * @member Recognizer.prototype.speechStartDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech stopped events.\r\n     * @member Recognizer.prototype.speechEndDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member Recognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privReco;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Recognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected dispose(disposing: boolean): void {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            if (this.privReco) {\r\n                this.privReco.audioSource.turnOff();\r\n                this.privReco.dispose();\r\n            }\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n\r\n    /**\r\n     * This method returns the current state of the telemetry setting.\r\n     * @member Recognizer.prototype.telemetryEnabled\r\n     * @function\r\n     * @public\r\n     * @returns true if the telemetry is enabled, false otherwise.\r\n     */\r\n    public static get telemetryEnabled(): boolean {\r\n        return ServiceRecognizerBase.telemetryDataEnabled;\r\n    }\r\n\r\n    /**\r\n     * This method globally enables or disables telemetry.\r\n     * @member Recognizer.prototype.enableTelemetry\r\n     * @function\r\n     * @public\r\n     * @param enabled - Global setting for telemetry collection.\r\n     * If set to true, telemetry information like microphone errors,\r\n     * recognition errors are collected and sent to Microsoft.\r\n     * If set to false, no telemetry is sent to Microsoft.\r\n     */\r\n    /* tslint:disable:member-ordering */\r\n    public static enableTelemetry(enabled: boolean): void {\r\n        ServiceRecognizerBase.telemetryDataEnabled = enabled;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected abstract createRecognizerConfig(speecgConfig: SpeechServiceConfig): RecognizerConfig;\r\n\r\n    // Creates the correct service recognizer for the type\r\n    protected abstract createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\r\n\r\n    // Does the generic recognizer setup that is common across all recognizer types.\r\n    protected implCommonRecognizerSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig = this.createRecognizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        const subscriptionKey = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return PromiseHelper.fromResult(authorizationToken);\r\n                },\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return PromiseHelper.fromResult(authorizationToken);\r\n                });\r\n\r\n        this.privReco = this.createServiceRecognizer(\r\n            authentication,\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            recognizerConfig);\r\n    }\r\n\r\n    protected recognizeOnceAsyncImpl(recognitionMode: RecognitionMode, cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n            this.implRecognizerStop().on((_: boolean): void => {\r\n                try {\r\n                    this.privReco.recognize(recognitionMode, (e: SpeechRecognitionResult) => {\r\n                        this.implRecognizerStop().on((_: boolean): void => {\r\n                            if (!!cb) {\r\n                                cb(e);\r\n                            }\r\n                        }, (error: string): void => {\r\n                            if (!!err) {\r\n                                err(error);\r\n                            }\r\n                        });\r\n\r\n                    }, (e: string) => {\r\n                        this.implRecognizerStop(); // We're already in an error path so best effort here.\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                    /* tslint:disable:no-empty */\r\n                    }).on((_: boolean): void => { },\r\n                        (error: string) => {\r\n                            if (!!err) {\r\n                                err(error);\r\n                            }\r\n                        });\r\n                } catch (error) {\r\n                    if (!!err) {\r\n                        if (error instanceof Error) {\r\n                            const typedError: Error = error as Error;\r\n                            err(typedError.name + \": \" + typedError.message);\r\n                        } else {\r\n                            err(error);\r\n                        }\r\n                    }\r\n\r\n                    // Destroy the recognizer.\r\n                    this.dispose(true);\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    public startContinuousRecognitionAsyncImpl(recognitionMode: RecognitionMode, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n            this.implRecognizerStop().on((_: boolean): void => {\r\n                this.privReco.recognize(recognitionMode, undefined, undefined).on((_: boolean): void => {\r\n                    // report result to promise.\r\n                    if (!!cb) {\r\n                        try {\r\n                            cb();\r\n                        } catch (e) {\r\n                            if (!!err) {\r\n                                err(e);\r\n                            }\r\n                        }\r\n                        cb = undefined;\r\n                    }\r\n                }, (error: string): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                    // Destroy the recognizer.\r\n                    this.dispose(true);\r\n                });\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n                // Destroy the recognizer.\r\n                this.dispose(true);\r\n            });\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    protected stopContinuousRecognitionAsyncImpl(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n            this.implRecognizerStop().on((_: boolean) => {\r\n                if (!!cb) {\r\n                    try {\r\n                        cb();\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                    }\r\n                }\r\n            }, (error: string) => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    protected implRecognizerStop(): Promise<boolean> {\r\n        if (this.privReco) {\r\n            return this.privReco.stopRecognizing();\r\n        }\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}