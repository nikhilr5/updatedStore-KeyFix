{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nexport var RecognitionMode;\n\n(function (RecognitionMode) {\n  RecognitionMode[RecognitionMode[\"Interactive\"] = 0] = \"Interactive\";\n  RecognitionMode[RecognitionMode[\"Conversation\"] = 1] = \"Conversation\";\n  RecognitionMode[RecognitionMode[\"Dictation\"] = 2] = \"Dictation\";\n})(RecognitionMode || (RecognitionMode = {}));\n\nexport var SpeechResultFormat;\n\n(function (SpeechResultFormat) {\n  SpeechResultFormat[SpeechResultFormat[\"Simple\"] = 0] = \"Simple\";\n  SpeechResultFormat[SpeechResultFormat[\"Detailed\"] = 1] = \"Detailed\";\n})(SpeechResultFormat || (SpeechResultFormat = {}));\n\nexport class RecognizerConfig {\n  constructor(speechServiceConfig, parameters) {\n    this.privRecognitionMode = RecognitionMode.Interactive;\n    this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\n    this.privParameters = parameters;\n  }\n\n  get parameters() {\n    return this.privParameters;\n  }\n\n  get recognitionMode() {\n    return this.privRecognitionMode;\n  }\n\n  set recognitionMode(value) {\n    this.privRecognitionMode = value;\n    this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\n    this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\n  }\n\n  get SpeechServiceConfig() {\n    return this.privSpeechServiceConfig;\n  }\n\n  get recognitionActivityTimeout() {\n    return this.privRecognitionActivityTimeout;\n  }\n\n  get isContinuousRecognition() {\n    return this.privRecognitionMode !== RecognitionMode.Interactive;\n  }\n\n} // The config is serialized and sent as the Speech.Config\n// tslint:disable-next-line:max-classes-per-file\n\nexport class SpeechServiceConfig {\n  constructor(context) {\n    this.serialize = () => {\n      return JSON.stringify(this, (key, value) => {\n        if (value && typeof value === \"object\") {\n          const replacement = {};\n\n          for (const k in value) {\n            if (Object.hasOwnProperty.call(value, k)) {\n              replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\n            }\n          }\n\n          return replacement;\n        }\n\n        return value;\n      });\n    };\n\n    this.context = context;\n  }\n\n  get Context() {\n    return this.context;\n  }\n\n  get Recognition() {\n    return this.recognition;\n  }\n\n  set Recognition(value) {\n    this.recognition = value.toLowerCase();\n  }\n\n} // tslint:disable-next-line:max-classes-per-file\n\nexport class Context {\n  constructor(os) {\n    this.system = new System();\n    this.os = os;\n  }\n\n} // tslint:disable-next-line:max-classes-per-file\n\nexport class System {\n  constructor() {\n    // Note: below will be patched for official builds.\n    const SPEECHSDK_CLIENTSDK_VERSION = \"1.12.0\";\n    this.name = \"SpeechSDK\";\n    this.version = SPEECHSDK_CLIENTSDK_VERSION;\n    this.build = \"JavaScript\";\n    this.lang = \"JavaScript\";\n  }\n\n} // tslint:disable-next-line:max-classes-per-file\n\nexport class OS {\n  constructor(platform, name, version) {\n    this.platform = platform;\n    this.name = name;\n    this.version = version;\n  }\n\n} // tslint:disable-next-line:max-classes-per-file\n\nexport class Device {\n  constructor(manufacturer, model, version) {\n    this.manufacturer = manufacturer;\n    this.model = model;\n    this.version = version;\n  }\n\n}\nexport var connectivity;\n\n(function (connectivity) {\n  connectivity[\"Bluetooth\"] = \"Bluetooth\";\n  connectivity[\"Wired\"] = \"Wired\";\n  connectivity[\"WiFi\"] = \"WiFi\";\n  connectivity[\"Cellular\"] = \"Cellular\";\n  connectivity[\"InBuilt\"] = \"InBuilt\";\n  connectivity[\"Unknown\"] = \"Unknown\";\n})(connectivity || (connectivity = {}));\n\nexport var type;\n\n(function (type) {\n  type[\"Phone\"] = \"Phone\";\n  type[\"Speaker\"] = \"Speaker\";\n  type[\"Car\"] = \"Car\";\n  type[\"Headset\"] = \"Headset\";\n  type[\"Thermostat\"] = \"Thermostat\";\n  type[\"Microphones\"] = \"Microphones\";\n  type[\"Deskphone\"] = \"Deskphone\";\n  type[\"RemoteControl\"] = \"RemoteControl\";\n  type[\"Unknown\"] = \"Unknown\";\n  type[\"File\"] = \"File\";\n  type[\"Stream\"] = \"Stream\";\n})(type || (type = {}));","map":{"version":3,"sources":["src/common.speech/RecognizerConfig.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"../sdk/Exports\";\r\n\r\nexport enum RecognitionMode {\r\n    Interactive,\r\n    Conversation,\r\n    Dictation,\r\n}\r\n\r\nexport enum SpeechResultFormat {\r\n    Simple,\r\n    Detailed,\r\n}\r\n\r\nexport class RecognizerConfig {\r\n    private privRecognitionMode: RecognitionMode = RecognitionMode.Interactive;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privRecognitionActivityTimeout: number;\r\n    private privParameters: PropertyCollection;\r\n\r\n    constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognitionMode;\r\n    }\r\n\r\n    public set recognitionMode(value: RecognitionMode) {\r\n        this.privRecognitionMode = value;\r\n        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\r\n        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n\r\n    public get recognitionActivityTimeout(): number {\r\n        return this.privRecognitionActivityTimeout;\r\n    }\r\n\r\n    public get isContinuousRecognition(): boolean {\r\n        return this.privRecognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n}\r\n\r\n// The config is serialized and sent as the Speech.Config\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechServiceConfig {\r\n    private context: Context;\r\n    private recognition: string;\r\n\r\n    constructor(context: Context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public serialize = (): string => {\r\n        return JSON.stringify(this, (key: any, value: any): any => {\r\n            if (value && typeof value === \"object\") {\r\n                const replacement: any = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.context;\r\n    }\r\n\r\n    public get Recognition(): string {\r\n        return this.recognition;\r\n    }\r\n\r\n    public set Recognition(value: string) {\r\n        this.recognition = value.toLowerCase();\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Context {\r\n    public system: System;\r\n    public os: OS;\r\n    public audio: ISpeechConfigAudio;\r\n\r\n    constructor(os: OS) {\r\n        this.system = new System();\r\n        this.os = os;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class System {\r\n    public name: string;\r\n    public version: string;\r\n    public build: string;\r\n    public lang: string;\r\n\r\n    constructor() {\r\n        // Note: below will be patched for official builds.\r\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.12.0\";\r\n\r\n        this.name = \"SpeechSDK\";\r\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\r\n        this.build = \"JavaScript\";\r\n        this.lang = \"JavaScript\";\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class OS {\r\n    public platform: string;\r\n    public name: string;\r\n    public version: string;\r\n\r\n    constructor(platform: string, name: string, version: string) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Device {\r\n    public manufacturer: string;\r\n    public model: string;\r\n    public version: string;\r\n\r\n    constructor(manufacturer: string, model: string, version: string) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport interface ISpeechConfigAudio {\r\n    source?: ISpeechConfigAudioDevice;\r\n    playback?: ISpeechConfigAudioDevice;\r\n}\r\n\r\nexport interface ISpeechConfigAudioDevice {\r\n    manufacturer: string;\r\n    model: string;\r\n    connectivity: connectivity;\r\n    type: type;\r\n    samplerate: number;\r\n    bitspersample: number;\r\n    channelcount: number;\r\n}\r\n\r\nexport enum connectivity {\r\n    Bluetooth = \"Bluetooth\",\r\n    Wired = \"Wired\",\r\n    WiFi = \"WiFi\",\r\n    Cellular = \"Cellular\",\r\n    InBuilt = \"InBuilt\",\r\n    Unknown = \"Unknown\",\r\n}\r\n\r\nexport enum type {\r\n    Phone = \"Phone\",\r\n    Speaker = \"Speaker\",\r\n    Car = \"Car\",\r\n    Headset = \"Headset\",\r\n    Thermostat = \"Thermostat\",\r\n    Microphones = \"Microphones\",\r\n    Deskphone = \"Deskphone\",\r\n    RemoteControl = \"RemoteControl\",\r\n    Unknown = \"Unknown\",\r\n    File = \"File\",\r\n    Stream = \"Stream\",\r\n}\r\n"]},"metadata":{},"sourceType":"module"}