{"ast":null,"code":"var _jsxFileName = \"/Users/nikhilr5/Desktop/ScribeAR/updatedStore/src/App.js\";\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport TopSpace from './components/TopSpace';\nimport AzureTopSpace from './components/AzureTopSpace';\nimport AzureCaptions from './components/AzureCaptions';\nimport Captions from './components/Captions';\nimport MiddleSpace from './components/MiddleSpace';\nimport DNDTest from './components/DnD/DNDTest';\nimport store from './store';\nimport './App.css';\nexport default function App() {\n  const enteredKey = useSelector(state => state.enteredKey);\n  const darkMode = getComputedStyle(document.documentElement).getPropertyValue('--primary'); // #999999\n  // Get global state from Redux. See the React Redux tutorial.\n\n  const textSize = useSelector(state => state.textSize);\n  const numLines = useSelector(state => state.numLines);\n  const invertColors = useSelector(state => state.invertColors);\n  const SwitchMenus = useSelector(state => state.switchMenus); // Convert variables to CSS-friendly strings.\n\n  var sizeString = textSize + 'vh'; // Size of bottom space (text area) relative to text size and number of lines.\n  // 1.5 is an estimate of the ratio of line size to text size.\n  // This is a sloppy way of calculating the height. Please improve on this.\n\n  var botHeight = 36; // topHeight + botHeight should always = 100vh because we don't want the full\n  // page to scroll (we only want the individual areas to scroll).\n\n  var switchmenus = SwitchMenus ? false : true;\n  var isEnteredKey = enteredKey ? 'true' : 'false';\n  var midHeight = 32;\n  var topHeight = 100 - botHeight + 'vh';\n  midHeight += 'vh';\n  botHeight += 'vh'; // botHeight += 'vh'\n\n  var bgColor = invertColors ? 'white' : 'black';\n  var color = invertColors ? 'black' : 'white';\n\n  if (isEnteredKey == 'true') {\n    alert('Switching to Azure');\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-1\",\n      style: {\n        backgroundColor: 'black',\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TopSpace, {\n      height: topHeight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 20\n      }\n    }), /*#__PURE__*/React.createElement(MiddleSpace, {\n      height: midHeight,\n      color: bgColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 20\n      }\n    }), /*#__PURE__*/React.createElement(AzureCaptions, {\n      height: botHeight,\n      textSize: sizeString,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 20\n      }\n    }));\n  }\n\n  if (bgColor == 'black') {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-1\",\n      style: {\n        backgroundColor: 'black',\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TopSpace, {\n      height: topHeight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(MiddleSpace, {\n      height: midHeight,\n      color: bgColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(Captions, {\n      height: botHeight,\n      textSize: sizeString,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 18\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-2\",\n      style: {\n        backgroundColor: 'white',\n        color: 'black'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TopSpace, {\n      height: topHeight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(MiddleSpace, {\n      height: midHeight,\n      color: bgColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(Captions, {\n      height: botHeight,\n      textSize: sizeString,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 18\n      }\n    }));\n  } // You can't comment in JSX.\n  // The style tag is the easiest way to set style based on JS variables.\n\n}","map":{"version":3,"sources":["/Users/nikhilr5/Desktop/ScribeAR/updatedStore/src/App.js"],"names":["React","useSelector","TopSpace","AzureTopSpace","AzureCaptions","Captions","MiddleSpace","DNDTest","store","App","enteredKey","state","darkMode","getComputedStyle","document","documentElement","getPropertyValue","textSize","numLines","invertColors","SwitchMenus","switchMenus","sizeString","botHeight","switchmenus","isEnteredKey","midHeight","topHeight","bgColor","color","alert","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux'\nimport TopSpace from './components/TopSpace'\nimport AzureTopSpace from './components/AzureTopSpace'\nimport AzureCaptions from './components/AzureCaptions'\nimport Captions from './components/Captions'\nimport MiddleSpace from './components/MiddleSpace'\nimport DNDTest from './components/DnD/DNDTest'\nimport store from './store'\nimport './App.css'\n\nexport default function App() {\n  const enteredKey = useSelector((state) => state.enteredKey)\n\n     const darkMode = getComputedStyle(document.documentElement).getPropertyValue('--primary'); // #999999\n     // Get global state from Redux. See the React Redux tutorial.\n     const textSize = useSelector((state) => state.textSize)\n     const numLines = useSelector((state) => state.numLines)\n     const invertColors = useSelector((state) => state.invertColors)\n     const SwitchMenus = useSelector((state)=> state.switchMenus)\n\n     // Convert variables to CSS-friendly strings.\n     var sizeString = textSize + 'vh'\n     // Size of bottom space (text area) relative to text size and number of lines.\n     // 1.5 is an estimate of the ratio of line size to text size.\n     // This is a sloppy way of calculating the height. Please improve on this.\n     var botHeight = 36\n     // topHeight + botHeight should always = 100vh because we don't want the full\n     // page to scroll (we only want the individual areas to scroll).\n\n     var switchmenus = SwitchMenus ? false : true\n     var isEnteredKey = enteredKey ? 'true' : 'false'\n\n\n     var midHeight = 32\n     var topHeight = 100 - botHeight + 'vh'\n     midHeight += 'vh'\n     botHeight += 'vh'\n     // botHeight += 'vh'\n     var bgColor = invertColors ? 'white': 'black'\n     var color = invertColors ? 'black' : 'white'\n\n     if (isEnteredKey == 'true') {\n        alert('Switching to Azure');\n         return (\n              <div className=\"App-1\" style={{\n                   backgroundColor: 'black',\n                   color: 'white'\n                  }}>\n                   <TopSpace height={topHeight} />\n\n                   <MiddleSpace height={midHeight} color = {bgColor}/>\n                   <AzureCaptions height={botHeight} textSize={sizeString} />\n                   {/* <DNDTest /> */}\n              </div>\n\n         )\n      }\n\n     if (bgColor == 'black') {\n       return (\n            <div className=\"App-1\" style={{\n                 backgroundColor: 'black',\n                 color: 'white'\n                }}>\n                 <TopSpace height={topHeight} />\n\n                 <MiddleSpace height={midHeight} color = {bgColor}/>\n                 <Captions height={botHeight} textSize={sizeString} />\n                 {/* <DNDTest /> */}\n            </div>\n       )\n     } else {\n       return (\n            <div className=\"App-2\" style={{\n                 backgroundColor: 'white',\n                 color: 'black'\n                }}>\n                 <TopSpace height={topHeight} />\n                 <MiddleSpace height={midHeight} color = {bgColor}/>\n                 <Captions height={botHeight} textSize={sizeString} />\n                 {/* <DNDTest /> */}\n            </div>\n       )\n     }\n     // You can't comment in JSX.\n     // The style tag is the easiest way to set style based on JS variables.\n\n}\n"]},"metadata":{},"sourceType":"module"}