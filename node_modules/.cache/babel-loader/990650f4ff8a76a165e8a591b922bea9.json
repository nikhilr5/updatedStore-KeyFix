{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ArgumentNullError, PromiseHelper } from \"../common/Exports\";\nimport { AuthInfo } from \"./IAuthentication\";\nconst AuthHeader = \"Ocp-Apim-Subscription-Key\";\n/**\n * @class\n */\n\nexport class CognitiveSubscriptionKeyAuthentication {\n  /**\n   * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\n   * @constructor\n   * @param {string} subscriptionKey - The subscription key\n   */\n  constructor(subscriptionKey) {\n    /**\n     * Fetches the subscription key.\n     * @member\n     * @function\n     * @public\n     * @param {string} authFetchEventId - The id to fetch.\n     */\n    this.fetch = authFetchEventId => {\n      return PromiseHelper.fromResult(this.privAuthInfo);\n    };\n    /**\n     * Fetches the subscription key.\n     * @member\n     * @function\n     * @public\n     * @param {string} authFetchEventId - The id to fetch.\n     */\n\n\n    this.fetchOnExpiry = authFetchEventId => {\n      return PromiseHelper.fromResult(this.privAuthInfo);\n    };\n\n    if (!subscriptionKey) {\n      throw new ArgumentNullError(\"subscriptionKey\");\n    }\n\n    this.privAuthInfo = new AuthInfo(AuthHeader, subscriptionKey);\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/CognitiveSubscriptionKeyAuthentication.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,iBAAT,EAAqC,aAArC,QAA0D,mBAA1D;AACA,SAAS,QAAT,QAA0C,mBAA1C;AAEA,MAAM,UAAU,GAAW,2BAA3B;AAEA;;;;AAGA,OAAM,MAAO,sCAAP,CAA6C;AAG/C;;;;;AAKA,EAAA,WAAA,CAAY,eAAZ,EAAmC;AAQnC;;;;;;;AAOO,SAAA,KAAA,GAAS,gBAAD,IAAgD;AAC3D,aAAO,aAAa,CAAC,UAAd,CAAyB,KAAK,YAA9B,CAAP;AACH,KAFM;AAIP;;;;;;;;;AAOO,SAAA,aAAA,GAAiB,gBAAD,IAAgD;AACnE,aAAO,aAAa,CAAC,UAAd,CAAyB,KAAK,YAA9B,CAAP;AACH,KAFM;;AAzBH,QAAI,CAAC,eAAL,EAAsB;AAClB,YAAM,IAAI,iBAAJ,CAAsB,iBAAtB,CAAN;AACH;;AAED,SAAK,YAAL,GAAoB,IAAI,QAAJ,CAAa,UAAb,EAAyB,eAAzB,CAApB;AACH;;AAd8C","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError, Promise, PromiseHelper } from \"../common/Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\n\r\nconst AuthHeader: string = \"Ocp-Apim-Subscription-Key\";\r\n\r\n/**\r\n * @class\r\n */\r\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\r\n    private privAuthInfo: AuthInfo;\r\n\r\n    /**\r\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\r\n     * @constructor\r\n     * @param {string} subscriptionKey - The subscription key\r\n     */\r\n    constructor(subscriptionKey: string) {\r\n        if (!subscriptionKey) {\r\n            throw new ArgumentNullError(\"subscriptionKey\");\r\n        }\r\n\r\n        this.privAuthInfo = new AuthInfo(AuthHeader, subscriptionKey);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    public fetch = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return PromiseHelper.fromResult(this.privAuthInfo);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    public fetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return PromiseHelper.fromResult(this.privAuthInfo);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}