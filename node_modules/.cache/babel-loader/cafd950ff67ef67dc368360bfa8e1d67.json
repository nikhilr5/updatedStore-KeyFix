{"ast":null,"code":"var _jsxFileName = \"/Users/nikhilr5/Desktop/ScribeAR/updatedStore/src/components/TopSpace/Options/Micvisual/index.js\";\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './index.css';\nimport { flip_micVisual } from '../../../../redux/actions';\nimport { Button } from \"@material-ui/core\"; // This code only works if the initial state is Off. It's surprisingly way harder\n// to get this to work if you want the inital state of the checkbox to be checked.\n\nexport default function Micvisual(props) {\n  const mic = state => state.mic;\n\n  const setting = useSelector(mic); // Get current value of recording.\n  // useDispatch returns the state modifying function, invoked below.\n\n  const dispatch = useDispatch();\n  let result = \"\";\n  let text = \"\"; // flip recording when space bar is pressed\n  //const setting = useSelector(props.setting)\n  // useDispatch returns the state modifying function, invoked below.\n\n  if (setting == 0) {\n    result = \"No Visualization\";\n    text = \"None\";\n  } else if (setting == 1) {\n    result = \"Line Visualization\";\n    text = \"Line\";\n  } else if (setting == 2) {\n    result = \"Spectrum Visualization\";\n    text = \"Spectrum\";\n  } else {\n    result = \"Circular Visualization\";\n    text = \"Circular\";\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, result, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"audio_visual\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"audio_plus\",\n    color: \"primary\",\n    variant: \"outlined\",\n    onClick: () => dispatch(flip_micVisual()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, text)));\n}","map":{"version":3,"sources":["/Users/nikhilr5/Desktop/ScribeAR/updatedStore/src/components/TopSpace/Options/Micvisual/index.js"],"names":["React","useSelector","useDispatch","flip_micVisual","Button","Micvisual","props","mic","state","setting","dispatch","result","text"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,aAAP;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,MAAT,QAAuB,mBAAvB,C,CAGA;AACA;;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAErC,QAAMC,GAAG,GAAIC,KAAD,IAAWA,KAAK,CAACD,GAA7B;;AACA,QAAME,OAAO,GAAGR,WAAW,CAACM,GAAD,CAA3B,CAHqC,CAGJ;AACjC;;AACA,QAAMG,QAAQ,GAAGR,WAAW,EAA5B;AACA,MAAIS,MAAM,GAAG,EAAb;AACA,MAAIC,IAAI,GAAG,EAAX,CAPqC,CASrC;AAEC;AACA;;AAEA,MAAIH,OAAO,IAAI,CAAf,EAAiB;AACbE,IAAAA,MAAM,GAAG,kBAAT;AACAC,IAAAA,IAAI,GAAG,MAAP;AACH,GAHD,MAGM,IAAIH,OAAO,IAAI,CAAf,EAAiB;AACnBE,IAAAA,MAAM,GAAG,oBAAT;AACAC,IAAAA,IAAI,GAAG,MAAP;AACH,GAHK,MAGA,IAAIH,OAAO,IAAI,CAAf,EAAiB;AACnBE,IAAAA,MAAM,GAAG,wBAAT;AACAC,IAAAA,IAAI,GAAG,UAAP;AACH,GAHK,MAGD;AACDD,IAAAA,MAAM,GAAG,wBAAT;AACAC,IAAAA,IAAI,GAAG,UAAP;AACH;;AAED,sBACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,MADL,eAEK;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACK,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAA+B,IAAA,KAAK,EAAG,SAAvC;AAAiD,IAAA,OAAO,EAAG,UAA3D;AACK,IAAA,OAAO,EAAE,MAAMD,QAAQ,CAACP,cAAc,EAAf,CAD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACkDS,IADlD,CADL,CAFL,CADL;AAWJ","sourcesContent":["import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport './index.css'\nimport { flip_micVisual } from '../../../../redux/actions'\nimport { Button } from \"@material-ui/core\"\n\n\n// This code only works if the initial state is Off. It's surprisingly way harder\n// to get this to work if you want the inital state of the checkbox to be checked.\n\nexport default function Micvisual(props) {\n\n    const mic = (state) => state.mic\n    const setting = useSelector(mic) // Get current value of recording.\n    // useDispatch returns the state modifying function, invoked below.\n    const dispatch = useDispatch()\n    let result = \"\"\n    let text = \"\"\n\n    // flip recording when space bar is pressed\n\n     //const setting = useSelector(props.setting)\n     // useDispatch returns the state modifying function, invoked below.\n\n     if (setting == 0){\n         result = \"No Visualization\"\n         text = \"None\"\n     }else if (setting == 1){\n         result = \"Line Visualization\"\n         text = \"Line\"\n     }else if (setting == 2){\n         result = \"Spectrum Visualization\"\n         text = \"Spectrum\"\n     }else{\n         result = \"Circular Visualization\"\n         text = \"Circular\"\n     }\n\n     return (\n          <div>\n              {result}\n               <div className=\"audio_visual\">\n                    <Button className=\"audio_plus\" color = \"primary\" variant = \"outlined\"\n                         onClick={() => dispatch(flip_micVisual())} >{text}\n                    </Button>\n\n               </div>\n          </div>\n     )\n}\n\n"]},"metadata":{},"sourceType":"module"}