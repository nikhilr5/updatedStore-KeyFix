{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ObjectDisposedError } from \"./Error\";\nimport { createNoDashGuid } from \"./Guid\";\nexport class EventSource {\n  constructor(metadata) {\n    this.privEventListeners = {};\n    this.privIsDisposed = false;\n\n    this.onEvent = event => {\n      if (this.isDisposed()) {\n        throw new ObjectDisposedError(\"EventSource\");\n      }\n\n      if (this.metadata) {\n        for (const paramName in this.metadata) {\n          if (paramName) {\n            if (event.metadata) {\n              if (!event.metadata[paramName]) {\n                event.metadata[paramName] = this.metadata[paramName];\n              }\n            }\n          }\n        }\n      }\n\n      for (const eventId in this.privEventListeners) {\n        if (eventId && this.privEventListeners[eventId]) {\n          this.privEventListeners[eventId](event);\n        }\n      }\n    };\n\n    this.attach = onEventCallback => {\n      const id = createNoDashGuid();\n      this.privEventListeners[id] = onEventCallback;\n      return {\n        detach: () => {\n          delete this.privEventListeners[id];\n        }\n      };\n    };\n\n    this.attachListener = listener => {\n      return this.attach(listener.onEvent);\n    };\n\n    this.isDisposed = () => {\n      return this.privIsDisposed;\n    };\n\n    this.dispose = () => {\n      this.privEventListeners = null;\n      this.privIsDisposed = true;\n    };\n\n    this.privMetadata = metadata;\n  }\n\n  get metadata() {\n    return this.privMetadata;\n  }\n\n}","map":{"version":3,"sources":["src/common/EventSource.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,mBAAT,QAAoC,SAApC;AACA,SAAS,gBAAT,QAAiC,QAAjC;AAMA,OAAM,MAAO,WAAP,CAAkB;AAKpB,EAAA,WAAA,CAAY,QAAZ,EAAgD;AAJxC,SAAA,kBAAA,GAAiE,EAAjE;AAEA,SAAA,cAAA,GAA0B,KAA1B;;AAMD,SAAA,OAAA,GAAW,KAAD,IAAwB;AACrC,UAAI,KAAK,UAAL,EAAJ,EAAuB;AACnB,cAAO,IAAI,mBAAJ,CAAwB,aAAxB,CAAP;AACH;;AAED,UAAI,KAAK,QAAT,EAAmB;AACf,aAAK,MAAM,SAAX,IAAwB,KAAK,QAA7B,EAAuC;AACnC,cAAI,SAAJ,EAAe;AACX,gBAAI,KAAK,CAAC,QAAV,EAAoB;AAChB,kBAAI,CAAC,KAAK,CAAC,QAAN,CAAe,SAAf,CAAL,EAAgC;AAC5B,gBAAA,KAAK,CAAC,QAAN,CAAe,SAAf,IAA4B,KAAK,QAAL,CAAc,SAAd,CAA5B;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,WAAK,MAAM,OAAX,IAAsB,KAAK,kBAA3B,EAA+C;AAC3C,YAAI,OAAO,IAAI,KAAK,kBAAL,CAAwB,OAAxB,CAAf,EAAiD;AAC7C,eAAK,kBAAL,CAAwB,OAAxB,EAAiC,KAAjC;AACH;AACJ;AACJ,KAtBM;;AAwBA,SAAA,MAAA,GAAU,eAAD,IAA0D;AACtE,YAAM,EAAE,GAAG,gBAAgB,EAA3B;AACA,WAAK,kBAAL,CAAwB,EAAxB,IAA8B,eAA9B;AACA,aAAO;AACH,QAAA,MAAM,EAAE,MAAK;AACT,iBAAO,KAAK,kBAAL,CAAwB,EAAxB,CAAP;AACH;AAHE,OAAP;AAKH,KARM;;AAUA,SAAA,cAAA,GAAkB,QAAD,IAAkD;AACtE,aAAO,KAAK,MAAL,CAAY,QAAQ,CAAC,OAArB,CAAP;AACH,KAFM;;AAIA,SAAA,UAAA,GAAa,MAAc;AAC9B,aAAO,KAAK,cAAZ;AACH,KAFM;;AAIA,SAAA,OAAA,GAAU,MAAW;AACxB,WAAK,kBAAL,GAA0B,IAA1B;AACA,WAAK,cAAL,GAAsB,IAAtB;AACH,KAHM;;AA7CH,SAAK,YAAL,GAAoB,QAApB;AACH;;AAiDD,MAAW,QAAX,GAAmB;AACf,WAAO,KAAK,YAAZ;AACH;;AA1DmB","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IEventListener, IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private privEventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private privMetadata: IStringDictionary<string>;\r\n    private privIsDisposed: boolean = false;\r\n\r\n    constructor(metadata?: IStringDictionary<string>) {\r\n        this.privMetadata = metadata;\r\n    }\r\n\r\n    public onEvent = (event: TEvent): void => {\r\n        if (this.isDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.metadata) {\r\n            for (const paramName in this.metadata) {\r\n                if (paramName) {\r\n                    if (event.metadata) {\r\n                        if (!event.metadata[paramName]) {\r\n                            event.metadata[paramName] = this.metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.privEventListeners) {\r\n            if (eventId && this.privEventListeners[eventId]) {\r\n                this.privEventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public attach = (onEventCallback: (event: TEvent) => void): IDetachable => {\r\n        const id = createNoDashGuid();\r\n        this.privEventListeners[id] = onEventCallback;\r\n        return {\r\n            detach: () => {\r\n                delete this.privEventListeners[id];\r\n            },\r\n        };\r\n    }\r\n\r\n    public attachListener = (listener: IEventListener<TEvent>): IDetachable => {\r\n        return this.attach(listener.onEvent);\r\n    }\r\n\r\n    public isDisposed = (): boolean => {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose = (): void => {\r\n        this.privEventListeners = null;\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}