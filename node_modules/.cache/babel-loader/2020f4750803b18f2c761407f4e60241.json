{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory\";\nimport { DialogServiceAdapter, RecognitionMode, RecognizerConfig } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { Recognizer } from \"./Exports\";\nimport { PropertyId } from \"./PropertyId\";\n/**\n * Dialog Service Connector\n * @class DialogServiceConnector\n */\n\nexport class DialogServiceConnector extends Recognizer {\n  /**\n   * Initializes an instance of the DialogServiceConnector.\n   * @constructor\n   * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\n   * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\n   */\n  constructor(dialogConfig, audioConfig) {\n    const dialogServiceConfigImpl = dialogConfig;\n    Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\n    super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\n    this.isTurnComplete = true;\n    this.privIsDisposed = false;\n    this.privProperties = dialogServiceConfigImpl.properties.clone();\n    const agentConfig = this.buildAgentConfig();\n    this.privReco.agentConfig.set(agentConfig);\n  }\n  /**\n   * Starts a connection to the service.\n   * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\n   *\n   * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\n   * be notified when the connection is established.\n   * @member DialogServiceConnector.prototype.connect\n   * @function\n   * @public\n   */\n\n\n  connect() {\n    this.privReco.connect();\n  }\n  /**\n   * Closes the connection the service.\n   * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\n   *\n   * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\n   */\n\n\n  disconnect() {\n    this.privReco.disconnect();\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member DialogServiceConnector.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Sets the authorization token used to communicate with the service.\n   * @member DialogServiceConnector.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n\n\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * The collection of properties and their values defined for this DialogServiceConnector.\n   * @member DialogServiceConnector.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n  /** Gets the template for the activity generated by service from speech.\n   * Properties from the template will be stamped on the generated activity.\n   * It can be empty\n   */\n\n\n  get speechActivityTemplate() {\n    return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\n  }\n  /** Sets the template for the activity generated by service from speech.\n   * Properties from the template will be stamped on the generated activity.\n   * It can be null or empty.\n   * Note: it has to be a valid Json object.\n   */\n\n\n  set speechActivityTemplate(speechActivityTemplate) {\n    this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\n  }\n  /**\n   * Starts recognition and stops after the first utterance is recognized.\n   * @member DialogServiceConnector.prototype.listenOnceAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the result when the reco has completed.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  listenOnceAsync(cb, err) {\n    if (this.isTurnComplete) {\n      try {\n        Contracts.throwIfDisposed(this.privIsDisposed);\n        this.connect();\n        this.implRecognizerStop();\n        this.isTurnComplete = false;\n        this.privReco.recognize(RecognitionMode.Conversation, e => {\n          this.implRecognizerStop();\n          this.isTurnComplete = true;\n\n          if (!!cb) {\n            cb(e);\n          }\n        }, e => {\n          this.implRecognizerStop();\n          this.isTurnComplete = true;\n\n          if (!!err) {\n            err(e);\n          }\n          /* tslint:disable:no-empty */\n\n        }).on(_ => {}, error => {\n          if (!!err) {\n            err(error);\n          }\n        });\n      } catch (error) {\n        if (!!err) {\n          if (error instanceof Error) {\n            const typedError = error;\n            err(typedError.name + \": \" + typedError.message);\n          } else {\n            err(error);\n          }\n        } // Destroy the recognizer.\n\n\n        this.dispose(true);\n      }\n    }\n  }\n\n  sendActivityAsync(activity) {\n    this.privReco.sendMessage(activity);\n  }\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member DialogServiceConnector.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close() {\n    Contracts.throwIfDisposed(this.privIsDisposed);\n    this.dispose(true);\n  }\n\n  dispose(disposing) {\n    if (this.privIsDisposed) {\n      return;\n    }\n\n    if (disposing) {\n      this.implRecognizerStop();\n      this.privIsDisposed = true;\n      super.dispose(disposing);\n    }\n  }\n\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.privProperties);\n  }\n\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const audioSource = audioConfig;\n    return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\n  }\n\n  buildAgentConfig() {\n    const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\n    return {\n      botInfo: {\n        commType: communicationType,\n        commandsCulture: undefined,\n        connectionId: this.properties.getProperty(PropertyId.Conversation_ApplicationId),\n        conversationId: undefined,\n        fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined)\n      },\n      version: 0.2\n    };\n  }\n\n}","map":{"version":3,"sources":["src/sdk/DialogServiceConnector.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,uBAAT,QAAwC,yCAAxC;AACA,SACI,oBADJ,EAKI,eALJ,EAMI,gBANJ,QASO,0BATP;AAYA,SAAS,SAAT,QAA0B,aAA1B;AAEA,SAGI,UAHJ,QAOO,WAPP;AAQA,SAAS,UAAT,QAA2B,cAA3B;AAEA;;;;;AAIA,OAAM,MAAO,sBAAP,SAAsC,UAAtC,CAAgD;AAIlD;;;;;;AAMA,EAAA,WAAA,CAAmB,YAAnB,EAAsD,WAAtD,EAA+E;AAC3E,UAAM,uBAAuB,GAAG,YAAhC;AACA,IAAA,SAAS,CAAC,WAAV,CAAsB,YAAtB,EAAoC,cAApC;AAEA,UAAM,WAAN,EAAmB,uBAAuB,CAAC,UAA3C,EAAuD,IAAI,uBAAJ,EAAvD;AAEA,SAAK,cAAL,GAAsB,IAAtB;AACA,SAAK,cAAL,GAAsB,KAAtB;AACA,SAAK,cAAL,GAAsB,uBAAuB,CAAC,UAAxB,CAAmC,KAAnC,EAAtB;AAEA,UAAM,WAAW,GAAG,KAAK,gBAAL,EAApB;AACA,SAAK,QAAL,CAAc,WAAd,CAA0B,GAA1B,CAA8B,WAA9B;AACH;AAkCD;;;;;;;;;;;;AAUO,EAAA,OAAO,GAAA;AACV,SAAK,QAAL,CAAc,OAAd;AACH;AAED;;;;;;;;AAMO,EAAA,UAAU,GAAA;AACb,SAAK,QAAL,CAAc,UAAd;AACH;AAED;;;;;;;;;AAOA,MAAW,kBAAX,GAA6B;AACzB,WAAO,KAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,gCAAvC,CAAP;AACH;AAED;;;;;;;;;AAOA,MAAW,kBAAX,CAA8B,KAA9B,EAA2C;AACvC,IAAA,SAAS,CAAC,uBAAV,CAAkC,KAAlC,EAAyC,OAAzC;AACA,SAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,gCAAvC,EAAyE,KAAzE;AACH;AAED;;;;;;;;;AAOA,MAAW,UAAX,GAAqB;AACjB,WAAO,KAAK,cAAZ;AACH;AAED;;;;;;AAIA,MAAW,sBAAX,GAAiC;AAC7B,WAAO,KAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,qCAAvC,CAAP;AACH;AAED;;;;;;;AAKA,MAAW,sBAAX,CAAkC,sBAAlC,EAAgE;AAC5D,SAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,qCAAvC,EAA8E,sBAA9E;AACH;AAED;;;;;;;;;;AAQO,EAAA,eAAe,CAAC,EAAD,EAA4C,GAA5C,EAAqE;AACvF,QAAI,KAAK,cAAT,EAAyB;AACrB,UAAI;AACA,QAAA,SAAS,CAAC,eAAV,CAA0B,KAAK,cAA/B;AAEA,aAAK,OAAL;AAEA,aAAK,kBAAL;AACA,aAAK,cAAL,GAAsB,KAAtB;AAEA,aAAK,QAAL,CAAc,SAAd,CACI,eAAe,CAAC,YADpB,EAEK,CAAD,IAA+B;AAC3B,eAAK,kBAAL;AAEA,eAAK,cAAL,GAAsB,IAAtB;;AAEA,cAAI,CAAC,CAAC,EAAN,EAAU;AACN,YAAA,EAAE,CAAC,CAAD,CAAF;AACH;AACJ,SAVL,EAWK,CAAD,IAAc;AACV,eAAK,kBAAL;AACA,eAAK,cAAL,GAAsB,IAAtB;;AACA,cAAI,CAAC,CAAC,GAAN,EAAW;AACP,YAAA,GAAG,CAAC,CAAD,CAAH;AACH;AACD;;AACH,SAlBL,EAkBO,EAlBP,CAkBW,CAAD,IAAqB,CAAI,CAlBnC,EAmBS,KAAD,IAAwB;AACpB,cAAI,CAAC,CAAC,GAAN,EAAW;AACP,YAAA,GAAG,CAAC,KAAD,CAAH;AACH;AACJ,SAvBT;AAwBH,OAhCD,CAgCE,OAAO,KAAP,EAAc;AACZ,YAAI,CAAC,CAAC,GAAN,EAAW;AACP,cAAI,KAAK,YAAY,KAArB,EAA4B;AACxB,kBAAM,UAAU,GAAU,KAA1B;AACA,YAAA,GAAG,CAAC,UAAU,CAAC,IAAX,GAAkB,IAAlB,GAAyB,UAAU,CAAC,OAArC,CAAH;AACH,WAHD,MAGO;AACH,YAAA,GAAG,CAAC,KAAD,CAAH;AACH;AACJ,SARW,CAUZ;;;AACA,aAAK,OAAL,CAAa,IAAb;AACH;AACJ;AACJ;;AAEM,EAAA,iBAAiB,CAAC,QAAD,EAAiB;AACrC,SAAK,QAAL,CAAc,WAAd,CAA0B,QAA1B;AACH;AAED;;;;;;;;AAMO,EAAA,KAAK,GAAA;AACR,IAAA,SAAS,CAAC,eAAV,CAA0B,KAAK,cAA/B;AAEA,SAAK,OAAL,CAAa,IAAb;AACH;;AAES,EAAA,OAAO,CAAC,SAAD,EAAmB;AAChC,QAAI,KAAK,cAAT,EAAyB;AACrB;AACH;;AAED,QAAI,SAAJ,EAAe;AACX,WAAK,kBAAL;AACA,WAAK,cAAL,GAAsB,IAAtB;AACA,YAAM,OAAN,CAAc,SAAd;AACH;AACJ;;AAES,EAAA,sBAAsB,CAAC,YAAD,EAAkC;AAC9D,WAAO,IAAI,gBAAJ,CAAqB,YAArB,EAAmC,KAAK,cAAxC,CAAP;AACH;;AAES,EAAA,uBAAuB,CAC7B,cAD6B,EAE7B,iBAF6B,EAG7B,WAH6B,EAI7B,gBAJ6B,EAIK;AAElC,UAAM,WAAW,GAAoB,WAArC;AAEA,WAAO,IAAI,oBAAJ,CAAyB,cAAzB,EAAyC,iBAAzC,EAA4D,WAA5D,EAAyE,gBAAzE,EAA2F,IAA3F,CAAP;AACH;;AAEO,EAAA,gBAAgB,GAAA;AACpB,UAAM,iBAAiB,GAAG,KAAK,UAAL,CAAgB,WAAhB,CAA4B,iCAA5B,EAA+D,SAA/D,CAA1B;AAEA,WAAO;AACH,MAAA,OAAO,EAAE;AACL,QAAA,QAAQ,EAAE,iBADL;AAEL,QAAA,eAAe,EAAE,SAFZ;AAGL,QAAA,YAAY,EAAE,KAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,0BAAvC,CAHT;AAIL,QAAA,cAAc,EAAE,SAJX;AAKL,QAAA,MAAM,EAAE,KAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,oBAAvC,EAA6D,SAA7D;AALH,OADN;AAQH,MAAA,OAAO,EAAE;AARN,KAAP;AAUH;;AArPiD","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory\";\r\nimport {\r\n    DialogServiceAdapter,\r\n    IAgentConfig,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult\r\n} from \"./Exports\";\r\nimport { PropertyId } from \"./PropertyId\";\r\n\r\n/**\r\n * Dialog Service Connector\r\n * @class DialogServiceConnector\r\n */\r\nexport class DialogServiceConnector extends Recognizer {\r\n    private privIsDisposed: boolean;\r\n    private isTurnComplete: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the DialogServiceConnector.\r\n     * @constructor\r\n     * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(dialogConfig: DialogServiceConfig, audioConfig?: AudioConfig) {\r\n        const dialogServiceConfigImpl = dialogConfig as DialogServiceConfigImpl;\r\n        Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\r\n\r\n        super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\r\n\r\n        this.isTurnComplete = true;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = dialogServiceConfigImpl.properties.clone();\r\n\r\n        const agentConfig = this.buildAgentConfig();\r\n        this.privReco.agentConfig.set(agentConfig);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member DialogServiceConnector.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member DialogServiceConfig.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member DialogServiceConnector.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: DialogServiceConnector, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event activityReceived signals that an activity has been received.\r\n     * @member DialogServiceConnector.prototype.activityReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public activityReceived: (sender: DialogServiceConnector, event: ActivityReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * Starts a connection to the service.\r\n     * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     * @member DialogServiceConnector.prototype.connect\r\n     * @function\r\n     * @public\r\n     */\r\n    public connect(): void {\r\n        this.privReco.connect();\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\r\n     *\r\n     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public disconnect(): void {\r\n        this.privReco.disconnect();\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this DialogServiceConnector.\r\n     * @member DialogServiceConnector.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /** Gets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be empty\r\n     */\r\n    public get speechActivityTemplate(): string {\r\n        return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n    }\r\n\r\n    /** Sets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be null or empty.\r\n     * Note: it has to be a valid Json object.\r\n     */\r\n    public set speechActivityTemplate(speechActivityTemplate: string) {\r\n        this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and stops after the first utterance is recognized.\r\n     * @member DialogServiceConnector.prototype.listenOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the reco has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public listenOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        if (this.isTurnComplete) {\r\n            try {\r\n                Contracts.throwIfDisposed(this.privIsDisposed);\r\n\r\n                this.connect();\r\n\r\n                this.implRecognizerStop();\r\n                this.isTurnComplete = false;\r\n\r\n                this.privReco.recognize(\r\n                    RecognitionMode.Conversation,\r\n                    (e: SpeechRecognitionResult) => {\r\n                        this.implRecognizerStop();\r\n\r\n                        this.isTurnComplete = true;\r\n\r\n                        if (!!cb) {\r\n                            cb(e);\r\n                        }\r\n                    },\r\n                    (e: string) => {\r\n                        this.implRecognizerStop();\r\n                        this.isTurnComplete = true;\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                        /* tslint:disable:no-empty */\r\n                    }).on((_: boolean): void => { },\r\n                        (error: string): void => {\r\n                            if (!!err) {\r\n                                err(error);\r\n                            }\r\n                        });\r\n            } catch (error) {\r\n                if (!!err) {\r\n                    if (error instanceof Error) {\r\n                        const typedError: Error = error as Error;\r\n                        err(typedError.name + \": \" + typedError.message);\r\n                    } else {\r\n                        err(error);\r\n                    }\r\n                }\r\n\r\n                // Destroy the recognizer.\r\n                this.dispose(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    public sendActivityAsync(activity: string): void {\r\n        this.privReco.sendMessage(activity);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member DialogServiceConnector.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.privIsDisposed);\r\n\r\n        this.dispose(true);\r\n    }\r\n\r\n    protected dispose(disposing: boolean): boolean {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.implRecognizerStop();\r\n            this.privIsDisposed = true;\r\n            super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private buildAgentConfig(): IAgentConfig {\r\n        const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\r\n\r\n        return {\r\n            botInfo: {\r\n                commType: communicationType,\r\n                commandsCulture: undefined,\r\n                connectionId: this.properties.getProperty(PropertyId.Conversation_ApplicationId),\r\n                conversationId: undefined,\r\n                fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined)\r\n            },\r\n            version: 0.2\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}