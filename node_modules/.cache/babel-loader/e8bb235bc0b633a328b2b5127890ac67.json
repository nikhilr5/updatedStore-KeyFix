{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { AddedLmIntent, IntentConnectionFactory, IntentServiceRecognizer, RecognitionMode, RecognizerConfig } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, Recognizer } from \"./Exports\";\n/**\n * Intent recognizer.\n * @class\n */\n\nexport class IntentRecognizer extends Recognizer {\n  /**\n   * Initializes an instance of the IntentRecognizer.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - The set of configuration properties.\n   * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\n   */\n  constructor(speechConfig, audioConfig) {\n    Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\n    const configImpl = speechConfig;\n    Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\n    super(audioConfig, configImpl.properties, new IntentConnectionFactory());\n    this.privAddedIntents = [];\n    this.privAddedLmIntents = {};\n    this.privDisposedIntentRecognizer = false;\n    this.privProperties = configImpl.properties;\n    Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n  }\n  /**\n   * Gets the spoken language of recognition.\n   * @member IntentRecognizer.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @returns {string} the spoken language of recognition.\n   */\n\n\n  get speechRecognitionLanguage() {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member IntentRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\n   * @member IntentRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} value - Authorization token.\n   */\n\n\n  set authorizationToken(value) {\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n  }\n  /**\n   * The collection of properties and their values defined for this IntentRecognizer.\n   * @member IntentRecognizer.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their\n   *          values defined for this IntentRecognizer.\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Starts intent recognition, and stops after the first utterance is recognized.\n   * The task returns the recognition text and intent as result.\n   * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\n   *       so it is suitable only for single shot recognition like command or query.\n   *       For long-running recognition, use StartContinuousRecognitionAsync() instead.\n   * @member IntentRecognizer.prototype.recognizeOnceAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  recognizeOnceAsync(cb, err) {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n\n    if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\n      const context = this.buildSpeechContext();\n      this.privReco.speechContext.setSection(\"intent\", context.Intent);\n      this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\n      const intentReco = this.privReco;\n      intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\n    }\n\n    this.recognizeOnceAsyncImpl(RecognitionMode.Interactive, cb, err);\n  }\n  /**\n   * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\n   * User must subscribe to events to receive recognition results.\n   * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has started.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  startContinuousRecognitionAsync(cb, err) {\n    if (Object.keys(this.privAddedLmIntents).length !== 0) {\n      const context = this.buildSpeechContext();\n      this.privReco.speechContext.setSection(\"intent\", context.Intent);\n      this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\n      const intentReco = this.privReco;\n      intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\n    }\n\n    this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation, cb, err);\n  }\n  /**\n   * Stops continuous intent recognition.\n   * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  stopContinuousRecognitionAsync(cb, err) {\n    this.stopContinuousRecognitionAsyncImpl(cb, err);\n  }\n  /**\n   * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\n   * User must subscribe to events to receive recognition results.\n   * Note: Key word spotting functionality is only available on the Speech Devices SDK.\n   *       This functionality is currently not included in the SDK itself.\n   * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\n   * @function\n   * @public\n   * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\n   * @param cb - Callback invoked once the recognition has started.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  startKeywordRecognitionAsync(model, cb, err) {\n    Contracts.throwIfNull(model, \"model\");\n\n    if (!!err) {\n      err(\"Not yet implemented.\");\n    }\n  }\n  /**\n   * Stops continuous speech recognition.\n   * Note: Key word spotting functionality is only available on the Speech Devices SDK.\n   *       This functionality is currently not included in the SDK itself.\n   * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  stopKeywordRecognitionAsync(cb, err) {\n    if (!!cb) {\n      cb();\n    }\n  }\n  /**\n   * Adds a phrase that should be recognized as intent.\n   * @member IntentRecognizer.prototype.addIntent\n   * @function\n   * @public\n   * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\n   * @param {string} phrase - A String that specifies the phrase representing the intent.\n   */\n\n\n  addIntent(simplePhrase, intentId) {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\n    Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\n    this.privAddedIntents.push([intentId, simplePhrase]);\n  }\n  /**\n   * Adds an intent from Language Understanding service for recognition.\n   * @member IntentRecognizer.prototype.addIntentWithLanguageModel\n   * @function\n   * @public\n   * @param {string} intentId - A String that represents the identifier of the intent\n   *        to be recognized. Ignored if intentName is empty.\n   * @param {string} model - The intent model from Language Understanding service.\n   * @param {string} intentName - The intent name defined in the intent model. If it\n   *        is empty, all intent names defined in the model will be added.\n   */\n\n\n  addIntentWithLanguageModel(intentId, model, intentName) {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\n    Contracts.throwIfNull(model, \"model\");\n    const modelImpl = model;\n    Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\n    this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\n  }\n  /**\n   * @summary Adds all intents from the specified Language Understanding Model.\n   * @member IntentRecognizer.prototype.addAllIntents\n   * @function\n   * @public\n   * @function\n   * @public\n   * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\n   * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\n   */\n\n\n  addAllIntents(model, intentId) {\n    Contracts.throwIfNull(model, \"model\");\n    const modelImpl = model;\n    Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\n    this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\n  }\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member IntentRecognizer.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close() {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    this.dispose(true);\n  }\n\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.properties);\n  }\n\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const audioImpl = audioConfig;\n    return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\n  }\n\n  dispose(disposing) {\n    if (this.privDisposedIntentRecognizer) {\n      return;\n    }\n\n    if (disposing) {\n      this.privDisposedIntentRecognizer = true;\n      super.dispose(disposing);\n    }\n  }\n\n  buildSpeechContext() {\n    let appId;\n    let region;\n    let subscriptionKey;\n    const refGrammers = [];\n\n    if (undefined !== this.privUmbrellaIntent) {\n      appId = this.privUmbrellaIntent.modelImpl.appId;\n      region = this.privUmbrellaIntent.modelImpl.region;\n      subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\n    } // Build the reference grammer array.\n\n\n    for (const intentId of Object.keys(this.privAddedLmIntents)) {\n      const addedLmIntent = this.privAddedLmIntents[intentId]; // validate all the same model, region, and key...\n\n      if (appId === undefined) {\n        appId = addedLmIntent.modelImpl.appId;\n      } else {\n        if (appId !== addedLmIntent.modelImpl.appId) {\n          throw new Error(\"Intents must all be from the same LUIS model\");\n        }\n      }\n\n      if (region === undefined) {\n        region = addedLmIntent.modelImpl.region;\n      } else {\n        if (region !== addedLmIntent.modelImpl.region) {\n          throw new Error(\"Intents must all be from the same LUIS model in a single region\");\n        }\n      }\n\n      if (subscriptionKey === undefined) {\n        subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\n      } else {\n        if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\n          throw new Error(\"Intents must all use the same subscription key\");\n        }\n      }\n\n      const grammer = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\n      refGrammers.push(grammer);\n    }\n\n    return {\n      Intent: {\n        id: appId,\n        key: subscriptionKey === undefined ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\n        provider: \"LUIS\"\n      },\n      ReferenceGrammars: undefined === this.privUmbrellaIntent ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"]\n    };\n  }\n\n}","map":{"version":3,"sources":["src/sdk/IntentRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AddedLmIntent,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    IntentConnectionFactory,\r\n    IntentServiceRecognizer,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    KeywordRecognitionModel,\r\n    LanguageUnderstandingModel,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechConfig,\r\n} from \"./Exports\";\r\nimport { LanguageUnderstandingModelImpl } from \"./LanguageUnderstandingModel\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Intent recognizer.\r\n * @class\r\n */\r\nexport class IntentRecognizer extends Recognizer {\r\n    private privDisposedIntentRecognizer: boolean;\r\n    private privAddedIntents: string[][];\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent; };\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n\r\n    /**\r\n     * Initializes an instance of the IntentRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new IntentConnectionFactory());\r\n        this.privAddedIntents = [];\r\n        this.privAddedLmIntents = {};\r\n\r\n        this.privDisposedIntentRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member IntentRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: IntentRecognizer, event: IntentRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member IntentRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} the spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this IntentRecognizer.\r\n     * @member IntentRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their\r\n     *          values defined for this IntentRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts intent recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text and intent as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     *       so it is suitable only for single shot recognition like command or query.\r\n     *       For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member IntentRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: IntentRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        this.recognizeOnceAsyncImpl(RecognitionMode.Interactive, cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation, cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous intent recognition.\r\n     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        this.stopContinuousRecognitionAsyncImpl(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     *       This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     *       This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a phrase that should be recognized as intent.\r\n     * @member IntentRecognizer.prototype.addIntent\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\r\n     * @param {string} phrase - A String that specifies the phrase representing the intent.\r\n     */\r\n    public addIntent(simplePhrase: string, intentId?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\r\n\r\n        this.privAddedIntents.push([intentId, simplePhrase]);\r\n    }\r\n\r\n    /**\r\n     * Adds an intent from Language Understanding service for recognition.\r\n     * @member IntentRecognizer.prototype.addIntentWithLanguageModel\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent\r\n     *        to be recognized. Ignored if intentName is empty.\r\n     * @param {string} model - The intent model from Language Understanding service.\r\n     * @param {string} intentName - The intent name defined in the intent model. If it\r\n     *        is empty, all intent names defined in the model will be added.\r\n     */\r\n    public addIntentWithLanguageModel(intentId: string, model: LanguageUnderstandingModel, intentName?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\r\n    }\r\n\r\n    /**\r\n     * @summary Adds all intents from the specified Language Understanding Model.\r\n     * @member IntentRecognizer.prototype.addAllIntents\r\n     * @function\r\n     * @public\r\n     * @function\r\n     * @public\r\n     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\r\n     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\r\n     */\r\n    public addAllIntents(model: LanguageUnderstandingModel, intentId?: string): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member IntentRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        this.dispose(true);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected dispose(disposing: boolean): void {\r\n        if (this.privDisposedIntentRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedIntentRecognizer = true;\r\n            super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    private buildSpeechContext(): IIntentContext {\r\n        let appId: string;\r\n        let region: string;\r\n        let subscriptionKey: string;\r\n        const refGrammers: string[] = [];\r\n\r\n        if (undefined !== this.privUmbrellaIntent) {\r\n            appId = this.privUmbrellaIntent.modelImpl.appId;\r\n            region = this.privUmbrellaIntent.modelImpl.region;\r\n            subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\r\n        }\r\n\r\n        // Build the reference grammer array.\r\n        for (const intentId of Object.keys(this.privAddedLmIntents)) {\r\n            const addedLmIntent: AddedLmIntent = this.privAddedLmIntents[intentId];\r\n\r\n            // validate all the same model, region, and key...\r\n            if (appId === undefined) {\r\n                appId = addedLmIntent.modelImpl.appId;\r\n            } else {\r\n                if (appId !== addedLmIntent.modelImpl.appId) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model\");\r\n                }\r\n            }\r\n\r\n            if (region === undefined) {\r\n                region = addedLmIntent.modelImpl.region;\r\n            } else {\r\n                if (region !== addedLmIntent.modelImpl.region) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model in a single region\");\r\n                }\r\n            }\r\n\r\n            if (subscriptionKey === undefined) {\r\n                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\r\n            } else {\r\n                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\r\n                    throw new Error(\"Intents must all use the same subscription key\");\r\n                }\r\n            }\r\n\r\n            const grammer: string = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\r\n            refGrammers.push(grammer);\r\n        }\r\n\r\n        return {\r\n            Intent: {\r\n                id: appId,\r\n                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\r\n                provider: \"LUIS\",\r\n            },\r\n            ReferenceGrammars: (undefined === this.privUmbrellaIntent) ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"],\r\n        };\r\n    }\r\n}\r\n\r\ninterface IIntentContext {\r\n    Intent: {\r\n        id: string,\r\n        key: string,\r\n        provider: string,\r\n    };\r\n    ReferenceGrammars: string[];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}