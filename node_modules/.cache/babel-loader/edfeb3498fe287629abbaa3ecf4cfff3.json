{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport * as fs from \"fs\";\nimport { Contracts } from \"../Contracts\";\nexport class AudioFileWriter {\n  constructor(filename) {\n    this.id = () => {\n      return this.privId;\n    };\n\n    this.privFd = fs.openSync(filename, \"w\");\n  }\n\n  set format(format) {\n    Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\n    this.privAudioFormat = format;\n    let headerOffset = 0;\n\n    if (this.privAudioFormat.hasHeader) {\n      headerOffset = this.privAudioFormat.header.byteLength;\n    }\n\n    if (this.privFd !== undefined) {\n      this.privWriteStream = fs.createWriteStream(\"\", {\n        fd: this.privFd,\n        start: headerOffset,\n        autoClose: false\n      });\n    }\n  }\n\n  write(buffer) {\n    Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\n\n    if (this.privWriteStream !== undefined) {\n      this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\n    }\n  }\n\n  close() {\n    if (this.privFd !== undefined) {\n      this.privWriteStream.on(\"finish\", () => {\n        if (this.privAudioFormat.hasHeader) {\n          this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);\n          fs.writeSync(this.privFd, new Int8Array(this.privAudioFormat.header), 0, this.privAudioFormat.header.byteLength, 0);\n        }\n\n        fs.closeSync(this.privFd);\n        this.privFd = undefined;\n      });\n      this.privWriteStream.end();\n    }\n  }\n\n}","map":{"version":3,"sources":["src/sdk/Audio/AudioFileWriter.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,OAAO,KAAK,EAAZ,MAAoB,IAApB;AAEA,SAAS,SAAT,QAA0B,cAA1B;AAIA,OAAM,MAAO,eAAP,CAAsB;AAMxB,EAAA,WAAA,CAAmB,QAAnB,EAAwC;AAyCjC,SAAA,EAAA,GAAK,MAAa;AACrB,aAAO,KAAK,MAAZ;AACH,KAFM;;AAxCH,SAAK,MAAL,GAAc,EAAE,CAAC,QAAH,CAAY,QAAZ,EAAsB,GAAtB,CAAd;AACH;;AAED,MAAW,MAAX,CAAkB,MAAlB,EAA2C;AACvC,IAAA,SAAS,CAAC,mBAAV,CAA8B,KAAK,eAAnC,EAAoD,uBAApD;AACA,SAAK,eAAL,GAAuB,MAAvB;AACA,QAAI,YAAY,GAAW,CAA3B;;AACA,QAAI,KAAK,eAAL,CAAqB,SAAzB,EAAoC;AAChC,MAAA,YAAY,GAAG,KAAK,eAAL,CAAqB,MAArB,CAA4B,UAA3C;AACH;;AACD,QAAI,KAAK,MAAL,KAAgB,SAApB,EAA+B;AAC3B,WAAK,eAAL,GAAuB,EAAE,CAAC,iBAAH,CAAqB,EAArB,EAAyB;AAAC,QAAA,EAAE,EAAE,KAAK,MAAV;AAAkB,QAAA,KAAK,EAAE,YAAzB;AAAuC,QAAA,SAAS,EAAE;AAAlD,OAAzB,CAAvB;AACH;AACJ;;AAEM,EAAA,KAAK,CAAC,MAAD,EAAoB;AAC5B,IAAA,SAAS,CAAC,sBAAV,CAAiC,KAAK,eAAtC,EAAuD,iCAAvD;;AACA,QAAI,KAAK,eAAL,KAAyB,SAA7B,EAAwC;AACpC,WAAK,eAAL,CAAqB,KAArB,CAA2B,IAAI,UAAJ,CAAe,MAAM,CAAC,KAAP,CAAa,CAAb,CAAf,CAA3B;AACH;AACJ;;AAEM,EAAA,KAAK,GAAA;AACR,QAAI,KAAK,MAAL,KAAgB,SAApB,EAA+B;AAC3B,WAAK,eAAL,CAAqB,EAArB,CAAwB,QAAxB,EAAkC,MAAK;AACnC,YAAI,KAAK,eAAL,CAAqB,SAAzB,EAAoC;AAChC,eAAK,eAAL,CAAqB,YAArB,CAAkC,KAAK,eAAL,CAAqB,YAAvD;AACA,UAAA,EAAE,CAAC,SAAH,CAAa,KAAK,MAAlB,EACI,IAAI,SAAJ,CAAc,KAAK,eAAL,CAAqB,MAAnC,CADJ,EAEI,CAFJ,EAGI,KAAK,eAAL,CAAqB,MAArB,CAA4B,UAHhC,EAII,CAJJ;AAKH;;AACD,QAAA,EAAE,CAAC,SAAH,CAAa,KAAK,MAAlB;AACA,aAAK,MAAL,GAAc,SAAd;AACH,OAXD;AAYA,WAAK,eAAL,CAAqB,GAArB;AACH;AACJ;;AA7CuB","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { IAudioDestination } from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport { AudioStreamFormat } from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\n\r\nexport class AudioFileWriter implements IAudioDestination {\r\n    private privAudioFormat: AudioOutputFormatImpl;\r\n    private privFd: number;\r\n    private privId: string;\r\n    private privWriteStream: fs.WriteStream;\r\n\r\n    public constructor(filename: fs.PathLike) {\r\n        this.privFd = fs.openSync(filename, \"w\");\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\r\n        this.privAudioFormat = format as AudioOutputFormatImpl;\r\n        let headerOffset: number = 0;\r\n        if (this.privAudioFormat.hasHeader) {\r\n            headerOffset = this.privAudioFormat.header.byteLength;\r\n        }\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream = fs.createWriteStream(\"\", {fd: this.privFd, start: headerOffset, autoClose: false});\r\n        }\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\r\n        if (this.privWriteStream !== undefined) {\r\n            this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream.on(\"finish\", () => {\r\n                if (this.privAudioFormat.hasHeader) {\r\n                    this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);\r\n                    fs.writeSync(this.privFd,\r\n                        new Int8Array(this.privAudioFormat.header),\r\n                        0,\r\n                        this.privAudioFormat.header.byteLength,\r\n                        0);\r\n                }\r\n                fs.closeSync(this.privFd);\r\n                this.privFd = undefined;\r\n            });\r\n            this.privWriteStream.end();\r\n        }\r\n    }\r\n\r\n    public id = (): string => {\r\n        return this.privId;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}