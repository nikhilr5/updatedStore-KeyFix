{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { createNoDashGuid, Deferred, PromiseHelper, Stream } from \"../../common/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\n/**\n * Represents audio output stream used for custom audio output configurations.\n * @class AudioOutputStream\n */\n\nexport class AudioOutputStream {\n  /**\n   * Creates and initializes an instance.\n   * @constructor\n   */\n  constructor() {}\n  /**\n   * Creates a memory backed PullAudioOutputStream with the specified audio format.\n   * @member AudioOutputStream.createPullStream\n   * @function\n   * @public\n   * @returns {PullAudioOutputStream} The audio output stream being created.\n   */\n\n\n  static createPullStream() {\n    return PullAudioOutputStream.create();\n  }\n\n}\n/**\n * Represents memory backed push audio output stream used for custom audio output configurations.\n * @class PullAudioOutputStream\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport class PullAudioOutputStream extends AudioOutputStream {\n  /**\n   * Creates a memory backed PullAudioOutputStream with the specified audio format.\n   * @member PullAudioOutputStream.create\n   * @function\n   * @public\n   * @returns {PullAudioOutputStream} The push audio output stream being created.\n   */\n  static create() {\n    return new PullAudioOutputStreamImpl();\n  }\n\n}\n/**\n * Represents memory backed push audio output stream used for custom audio output configurations.\n * @private\n * @class PullAudioOutputStreamImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream {\n  /**\n   * Creates and initializes an instance with the given values.\n   * @constructor\n   */\n  constructor() {\n    super();\n    this.privId = createNoDashGuid();\n    this.privStream = new Stream();\n    this.streamReader = this.privStream.getReader();\n  }\n  /**\n   * Sets the format information to the stream. For internal use only.\n   * @param {AudioStreamFormat} format - the format to be set.\n   */\n\n\n  set format(format) {\n    if (format === undefined || format === null) {\n      this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\n    }\n\n    this.privFormat = format;\n  }\n  /**\n   * Format information for the audio\n   */\n\n\n  get format() {\n    return this.privFormat;\n  }\n  /**\n   * Checks if the stream is closed\n   * @member PullAudioOutputStreamImpl.prototype.isClosed\n   * @property\n   * @public\n   */\n\n\n  get isClosed() {\n    return this.privStream.isClosed;\n  }\n  /**\n   * Gets the id of the stream\n   * @member PullAudioOutputStreamImpl.prototype.id\n   * @property\n   * @public\n   */\n\n\n  id() {\n    return this.privId;\n  }\n  /**\n   * Reads audio data from the internal buffer.\n   * @member PullAudioOutputStreamImpl.prototype.read\n   * @function\n   * @public\n   * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\n   * @returns {Promise<number>} - Audio buffer length has been read.\n   */\n\n\n  read(dataBuffer) {\n    const intView = new Int8Array(dataBuffer);\n    let totalBytes = 0;\n\n    if (this.privLastChunkView !== undefined) {\n      if (this.privLastChunkView.length > dataBuffer.byteLength) {\n        intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\n        this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\n        return PromiseHelper.fromResult(dataBuffer.byteLength);\n      }\n\n      intView.set(this.privLastChunkView);\n      totalBytes = this.privLastChunkView.length;\n      this.privLastChunkView = undefined;\n    }\n\n    const deffer = new Deferred(); // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\n\n    const readUntilFilled = () => {\n      if (totalBytes < dataBuffer.byteLength && !this.streamReader.isClosed) {\n        this.streamReader.read().onSuccessContinueWith(chunk => {\n          if (chunk !== undefined && !chunk.isEnd) {\n            let tmpBuffer;\n\n            if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\n              tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\n              this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\n            } else {\n              tmpBuffer = chunk.buffer;\n            }\n\n            intView.set(new Int8Array(tmpBuffer), totalBytes);\n            totalBytes += tmpBuffer.byteLength;\n            readUntilFilled();\n          } else {\n            this.streamReader.close();\n            deffer.resolve(totalBytes);\n          }\n        });\n      } else {\n        deffer.resolve(totalBytes);\n      }\n    };\n\n    readUntilFilled();\n    return deffer.promise();\n  }\n  /**\n   * Writes the audio data specified by making an internal copy of the data.\n   * @member PullAudioOutputStreamImpl.prototype.write\n   * @function\n   * @public\n   * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n   */\n\n\n  write(dataBuffer) {\n    Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\n    this.privStream.writeStreamChunk({\n      buffer: dataBuffer,\n      isEnd: false,\n      timeReceived: Date.now()\n    });\n  }\n  /**\n   * Closes the stream.\n   * @member PullAudioOutputStreamImpl.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close() {\n    this.privStream.close();\n  }\n\n}\n/*\n * Represents audio output stream used for custom audio output configurations.\n * @class PushAudioOutputStream\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport class PushAudioOutputStream extends AudioOutputStream {\n  /**\n   * Creates and initializes and instance.\n   * @constructor\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Creates a PushAudioOutputStream that delegates to the specified callback interface for\n   * write() and close() methods.\n   * @member PushAudioOutputStream.create\n   * @function\n   * @public\n   * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\n   *        derived from PushAudioOutputStreamCallback\n   * @returns {PushAudioOutputStream} The push audio output stream being created.\n   */\n\n\n  static create(callback) {\n    return new PushAudioOutputStreamImpl(callback);\n  }\n\n}\n/**\n * Represents audio output stream used for custom audio output configurations.\n * @private\n * @class PushAudioOutputStreamImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream {\n  /**\n   * Creates a PushAudioOutputStream that delegates to the specified callback interface for\n   * read() and close() methods.\n   * @constructor\n   * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\n   *        derived from PushAudioOutputStreamCallback\n   */\n  constructor(callback) {\n    super();\n    this.privId = createNoDashGuid();\n    this.privCallback = callback;\n  } // tslint:disable-next-line:no-empty\n\n\n  set format(format) {}\n\n  write(buffer) {\n    if (!!this.privCallback.write) {\n      this.privCallback.write(buffer);\n    }\n  }\n\n  close() {\n    if (!!this.privCallback.close) {\n      this.privCallback.close();\n    }\n  }\n\n  id() {\n    return this.privId;\n  }\n\n}","map":{"version":3,"sources":["src/sdk/Audio/AudioOutputStream.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioDestination,\r\n    IStreamChunk,\r\n    Promise,\r\n    PromiseHelper,\r\n    Stream,\r\n    StreamReader,\r\n} from \"../../common/Exports\";\r\nimport {Contracts} from \"../Contracts\";\r\nimport {\r\n    AudioStreamFormat,\r\n    PushAudioOutputStreamCallback\r\n} from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class AudioOutputStream\r\n */\r\nexport abstract class AudioOutputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Sets the format of the AudioOutputStream\r\n     * Note: the format is set by the synthesizer before writing. Do not set it before passing it to AudioConfig\r\n     * @member AudioOutputStream.prototype.format\r\n     */\r\n    public abstract set format(format: AudioStreamFormat);\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member AudioOutputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The audio output stream being created.\r\n     */\r\n    public static createPullStream(): PullAudioOutputStream {\r\n        return PullAudioOutputStream.create();\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @class PullAudioOutputStream\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport abstract class PullAudioOutputStream extends AudioOutputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member PullAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(): PullAudioOutputStream {\r\n        return new PullAudioOutputStreamImpl();\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStream.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} Audio buffer length has been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): Promise<number>;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PullAudioOutputStreamImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream implements IAudioDestination {\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privId: string;\r\n    private privStream: Stream<ArrayBuffer>;\r\n    private streamReader: StreamReader<ArrayBuffer>;\r\n    private privLastChunkView: Int8Array;\r\n\r\n    /**\r\n     * Creates and initializes an instance with the given values.\r\n     * @constructor\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new Stream<ArrayBuffer>();\r\n        this.streamReader = this.privStream.getReader();\r\n    }\r\n\r\n    /**\r\n     * Sets the format information to the stream. For internal use only.\r\n     * @param {AudioStreamFormat} format - the format to be set.\r\n     */\r\n    public set format(format: AudioStreamFormat) {\r\n        if (format === undefined || format === null) {\r\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        this.privFormat = format as AudioOutputFormatImpl;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): AudioStreamFormat {\r\n        return this.privFormat;\r\n    }\r\n\r\n    /**\r\n     * Checks if the stream is closed\r\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\r\n     * @property\r\n     * @public\r\n     */\r\n    public get isClosed(): boolean {\r\n        return this.privStream.isClosed;\r\n    }\r\n\r\n    /**\r\n     * Gets the id of the stream\r\n     * @member PullAudioOutputStreamImpl.prototype.id\r\n     * @property\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStreamImpl.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} - Audio buffer length has been read.\r\n     */\r\n    public read(dataBuffer: ArrayBuffer): Promise<number> {\r\n        const intView: Int8Array = new Int8Array(dataBuffer);\r\n        let totalBytes: number = 0;\r\n\r\n        if (this.privLastChunkView !== undefined) {\r\n            if (this.privLastChunkView.length > dataBuffer.byteLength) {\r\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\r\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\r\n                return PromiseHelper.fromResult(dataBuffer.byteLength);\r\n            }\r\n            intView.set(this.privLastChunkView);\r\n            totalBytes = this.privLastChunkView.length;\r\n            this.privLastChunkView = undefined;\r\n        }\r\n\r\n        const deffer: Deferred<number> = new Deferred<number>();\r\n        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n        const readUntilFilled: () => void = (): void => {\r\n            if (totalBytes < dataBuffer.byteLength && !this.streamReader.isClosed) {\r\n                this.streamReader.read()\r\n                    .onSuccessContinueWith((chunk: IStreamChunk<ArrayBuffer>) => {\r\n                        if (chunk !== undefined && !chunk.isEnd) {\r\n                            let tmpBuffer: ArrayBuffer;\r\n                            if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\r\n                                tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\r\n                                this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\r\n                            } else {\r\n                                tmpBuffer = chunk.buffer;\r\n                            }\r\n                            intView.set(new Int8Array(tmpBuffer), totalBytes);\r\n                            totalBytes += tmpBuffer.byteLength;\r\n                            readUntilFilled();\r\n                        } else {\r\n                            this.streamReader.close();\r\n                            deffer.resolve(totalBytes);\r\n                        }\r\n                    });\r\n            } else {\r\n                deffer.resolve(totalBytes);\r\n            }\r\n        };\r\n        readUntilFilled();\r\n        return deffer.promise();\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PullAudioOutputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class PushAudioOutputStream\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport abstract class PushAudioOutputStream extends AudioOutputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { super(); }\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * write() and close() methods.\r\n     * @member PushAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     *        derived from PushAudioOutputStreamCallback\r\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(callback: PushAudioOutputStreamCallback): PushAudioOutputStream {\r\n        return new PushAudioOutputStreamImpl(callback);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PushAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PushAudioOutputStreamImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream implements IAudioDestination {\r\n    private readonly privId: string;\r\n    private privCallback: PushAudioOutputStreamCallback;\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * read() and close() methods.\r\n     * @constructor\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     *        derived from PushAudioOutputStreamCallback\r\n     */\r\n    public constructor(callback: PushAudioOutputStreamCallback) {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public set format(format: AudioStreamFormat) {}\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        if (!!this.privCallback.write) {\r\n            this.privCallback.write(buffer);\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (!!this.privCallback.close) {\r\n            this.privCallback.close();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}