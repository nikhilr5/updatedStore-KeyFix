{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { connectivity, type } from \"../../common.speech/Exports\";\nimport { AudioSourceInitializingEvent, AudioSourceReadyEvent, AudioStreamNodeAttachedEvent, AudioStreamNodeAttachingEvent, AudioStreamNodeDetachedEvent, ChunkedArrayBufferStream, Events, EventSource, PromiseHelper } from \"../../common/Exports\";\nimport { createNoDashGuid } from \"../../common/Guid\";\nimport { AudioStreamFormat } from \"../Exports\";\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @class AudioInputStream\n */\n\nexport class AudioInputStream {\n  /**\n   * Creates and initializes an instance.\n   * @constructor\n   */\n  constructor() {}\n  /**\n   * Creates a memory backed PushAudioInputStream with the specified audio format.\n   * @member AudioInputStream.createPushStream\n   * @function\n   * @public\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be\n   *        written to the push audio stream's write() method (currently only support 16 kHz 16bit mono PCM).\n   * @returns {PushAudioInputStream} The audio input stream being created.\n   */\n\n\n  static createPushStream(format) {\n    return PushAudioInputStream.create(format);\n  }\n  /**\n   * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\n   * and close() methods.\n   * @member AudioInputStream.createPullStream\n   * @function\n   * @public\n   * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\n   *        PullAudioInputStreamCallback\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\n   *        the callback's read() method (currently only support 16 kHz 16bit mono PCM).\n   * @returns {PullAudioInputStream} The audio input stream being created.\n   */\n\n\n  static createPullStream(callback, format) {\n    return PullAudioInputStream.create(callback, format); // throw new Error(\"Oops\");\n  }\n\n}\n/**\n * Represents memory backed push audio input stream used for custom audio input configurations.\n * @class PushAudioInputStream\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport class PushAudioInputStream extends AudioInputStream {\n  /**\n   * Creates a memory backed PushAudioInputStream with the specified audio format.\n   * @member PushAudioInputStream.create\n   * @function\n   * @public\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\n   *        push audio stream's write() method (currently only support 16 kHz 16bit mono PCM).\n   * @returns {PushAudioInputStream} The push audio input stream being created.\n   */\n  static create(format) {\n    return new PushAudioInputStreamImpl(format);\n  }\n\n}\n/**\n * Represents memory backed push audio input stream used for custom audio input configurations.\n * @private\n * @class PushAudioInputStreamImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport class PushAudioInputStreamImpl extends PushAudioInputStream {\n  /**\n   * Creates and initalizes an instance with the given values.\n   * @constructor\n   * @param {AudioStreamFormat} format - The audio stream format.\n   */\n  constructor(format) {\n    super();\n\n    this.onEvent = event => {\n      this.privEvents.onEvent(event);\n      Events.instance.onEvent(event);\n    };\n\n    if (format === undefined) {\n      this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\n    } else {\n      this.privFormat = format;\n    }\n\n    this.privEvents = new EventSource();\n    this.privId = createNoDashGuid();\n    this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\n  }\n  /**\n   * Format information for the audio\n   */\n\n\n  get format() {\n    return PromiseHelper.fromResult(this.privFormat);\n  }\n  /**\n   * Writes the audio data specified by making an internal copy of the data.\n   * @member PushAudioInputStreamImpl.prototype.write\n   * @function\n   * @public\n   * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n   */\n\n\n  write(dataBuffer) {\n    this.privStream.writeStreamChunk({\n      buffer: dataBuffer,\n      isEnd: false,\n      timeReceived: Date.now()\n    });\n  }\n  /**\n   * Closes the stream.\n   * @member PushAudioInputStreamImpl.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close() {\n    this.privStream.close();\n  }\n\n  id() {\n    return this.privId;\n  }\n\n  turnOn() {\n    this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n\n    this.onEvent(new AudioSourceReadyEvent(this.privId));\n    return PromiseHelper.fromResult(true);\n  }\n\n  attach(audioNodeId) {\n    this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n    return this.turnOn().onSuccessContinueWith(_ => {\n      // For now we support a single parallel reader of the pushed stream.\n      // So we can simiply hand the stream to the recognizer and let it recognize.\n      return this.privStream.getReader();\n    }).onSuccessContinueWith(streamReader => {\n      this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n      return {\n        detach: () => {\n          streamReader.close();\n          this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n          this.turnOff();\n        },\n        id: () => {\n          return audioNodeId;\n        },\n        read: () => {\n          return streamReader.read();\n        }\n      };\n    });\n  }\n\n  detach(audioNodeId) {\n    this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n  }\n\n  turnOff() {\n    return PromiseHelper.fromResult(false);\n  }\n\n  get events() {\n    return this.privEvents;\n  }\n\n  get deviceInfo() {\n    return PromiseHelper.fromResult({\n      bitspersample: this.privFormat.bitsPerSample,\n      channelcount: this.privFormat.channels,\n      connectivity: connectivity.Unknown,\n      manufacturer: \"Speech SDK\",\n      model: \"PushStream\",\n      samplerate: this.privFormat.samplesPerSec,\n      type: type.Stream\n    });\n  }\n\n}\n/*\n * Represents audio input stream used for custom audio input configurations.\n * @class PullAudioInputStream\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport class PullAudioInputStream extends AudioInputStream {\n  /**\n   * Creates and initializes and instance.\n   * @constructor\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Creates a PullAudioInputStream that delegates to the specified callback interface for\n   * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\n   * @member PullAudioInputStream.create\n   * @function\n   * @public\n   * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\n   *        derived from PullAudioInputStreamCustomCallback\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be\n   *        returned from the callback's read() method (currently only support 16 kHz 16bit mono PCM).\n   * @returns {PullAudioInputStream} The push audio input stream being created.\n   */\n\n\n  static create(callback, format) {\n    return new PullAudioInputStreamImpl(callback, format);\n  }\n\n}\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @private\n * @class PullAudioInputStreamImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport class PullAudioInputStreamImpl extends PullAudioInputStream {\n  /**\n   * Creates a PullAudioInputStream that delegates to the specified callback interface for\n   * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\n   * @constructor\n   * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\n   *        derived from PullAudioInputStreamCustomCallback\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be\n   *        returned from the callback's read() method (currently only support 16 kHz 16bit mono PCM).\n   */\n  constructor(callback, format) {\n    super();\n\n    this.onEvent = event => {\n      this.privEvents.onEvent(event);\n      Events.instance.onEvent(event);\n    };\n\n    if (undefined === format) {\n      this.privFormat = AudioStreamFormat.getDefaultInputFormat();\n    } else {\n      this.privFormat = format;\n    }\n\n    this.privEvents = new EventSource();\n    this.privId = createNoDashGuid();\n    this.privCallback = callback;\n    this.privIsClosed = false;\n    this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\n  }\n  /**\n   * Format information for the audio\n   */\n\n\n  get format() {\n    return PromiseHelper.fromResult(this.privFormat);\n  }\n  /**\n   * Closes the stream.\n   * @member PullAudioInputStreamImpl.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close() {\n    this.privIsClosed = true;\n    this.privCallback.close();\n  }\n\n  id() {\n    return this.privId;\n  }\n\n  turnOn() {\n    this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n\n    this.onEvent(new AudioSourceReadyEvent(this.privId));\n    return PromiseHelper.fromResult(true);\n  }\n\n  attach(audioNodeId) {\n    this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n    return this.turnOn().onSuccessContinueWith(result => {\n      this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n      return {\n        detach: () => {\n          this.privCallback.close();\n          this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n          this.turnOff();\n        },\n        id: () => {\n          return audioNodeId;\n        },\n        read: () => {\n          let totalBytes = 0;\n          let transmitBuff; // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\n\n          while (totalBytes < this.privBufferSize) {\n            // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\n            // data back.\n            const readBuff = new ArrayBuffer(this.privBufferSize - totalBytes);\n            const pulledBytes = this.privCallback.read(readBuff); // If there is no return buffer yet defined, set the return buffer to the that was just populated.\n            // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\n            // preferred size allocated.\n\n            if (undefined === transmitBuff) {\n              transmitBuff = readBuff;\n            } else {\n              // Not the first bite at the apple, so fill the return buffer with the data we got back.\n              const intView = new Int8Array(transmitBuff);\n              intView.set(new Int8Array(readBuff), totalBytes);\n            } // If there are no bytes to read, just break out and be done.\n\n\n            if (0 === pulledBytes) {\n              break;\n            }\n\n            totalBytes += pulledBytes;\n          }\n\n          return PromiseHelper.fromResult({\n            buffer: transmitBuff.slice(0, totalBytes),\n            isEnd: this.privIsClosed || totalBytes === 0,\n            timeReceived: Date.now()\n          });\n        }\n      };\n    });\n  }\n\n  detach(audioNodeId) {\n    this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n  }\n\n  turnOff() {\n    return PromiseHelper.fromResult(false);\n  }\n\n  get events() {\n    return this.privEvents;\n  }\n\n  get deviceInfo() {\n    return PromiseHelper.fromResult({\n      bitspersample: this.privFormat.bitsPerSample,\n      channelcount: this.privFormat.channels,\n      connectivity: connectivity.Unknown,\n      manufacturer: \"Speech SDK\",\n      model: \"PullStream\",\n      samplerate: this.privFormat.samplesPerSec,\n      type: type.Stream\n    });\n  }\n\n}","map":{"version":3,"sources":["src/sdk/Audio/AudioInputStream.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    ChunkedArrayBufferStream,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    Promise,\r\n    PromiseHelper,\r\n    Stream,\r\n    StreamReader,\r\n} from \"../../common/Exports\";\r\nimport { createNoDashGuid } from \"../../common/Guid\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\r\nexport abstract class AudioInputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member AudioInputStream.createPushStream\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     *        written to the push audio stream's write() method (currently only support 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return PushAudioInputStream.create(format);\r\n    }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\r\n     * and close() methods.\r\n     * @member AudioInputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\r\n     *        PullAudioInputStreamCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\r\n     *        the callback's read() method (currently only support 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return PullAudioInputStream.create(callback, format);\r\n        // throw new Error(\"Oops\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport abstract class PushAudioInputStream extends AudioInputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member PushAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\r\n     *        push audio stream's write() method (currently only support 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return new PushAudioInputStreamImpl(format);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStream.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\r\n\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privStream: Stream<ArrayBuffer>;\r\n\r\n    /**\r\n     * Creates and initalizes an instance with the given values.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} format - The audio stream format.\r\n     */\r\n    public constructor(format?: AudioStreamFormat) {\r\n        super();\r\n        if (format === undefined) {\r\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\r\n        } else {\r\n            this.privFormat = format as AudioStreamFormatImpl;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return PromiseHelper.fromResult(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<boolean> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.turnOn()\r\n            .onSuccessContinueWith<StreamReader<ArrayBuffer>>((_: boolean) => {\r\n                // For now we support a single parallel reader of the pushed stream.\r\n                // So we can simiply hand the stream to the recognizer and let it recognize.\r\n\r\n                return this.privStream.getReader();\r\n            })\r\n            .onSuccessContinueWith((streamReader: StreamReader<ArrayBuffer>) => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n\r\n                return {\r\n                    detach: () => {\r\n                        streamReader.close();\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        this.turnOff();\r\n                    },\r\n                    id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    read: () => {\r\n                        return streamReader.read();\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<boolean> {\r\n        return PromiseHelper.fromResult(false);\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return PromiseHelper.fromResult({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PushStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport abstract class PullAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { super(); }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @member PullAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     *        derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     *        returned from the callback's read() method (currently only support 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return new PullAudioInputStreamImpl(callback, format as AudioStreamFormatImpl);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PullAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\r\n\r\n    private privCallback: PullAudioInputStreamCallback;\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privIsClosed: boolean;\r\n    private privBufferSize: number;\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @constructor\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     *        derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     *        returned from the callback's read() method (currently only support 16 kHz 16bit mono PCM).\r\n     */\r\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormatImpl) {\r\n        super();\r\n        if (undefined === format) {\r\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n        } else {\r\n            this.privFormat = format;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n        this.privIsClosed = false;\r\n        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return PromiseHelper.fromResult(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privIsClosed = true;\r\n        this.privCallback.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<boolean> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.turnOn()\r\n            .onSuccessContinueWith((result: boolean) => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n\r\n                return {\r\n                    detach: () => {\r\n                        this.privCallback.close();\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        this.turnOff();\r\n                    },\r\n                    id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                        let totalBytes: number = 0;\r\n                        let transmitBuff: ArrayBuffer;\r\n\r\n                        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n                        while (totalBytes < this.privBufferSize) {\r\n                            // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\r\n                            // data back.\r\n                            const readBuff: ArrayBuffer = new ArrayBuffer(this.privBufferSize - totalBytes);\r\n                            const pulledBytes: number = this.privCallback.read(readBuff);\r\n\r\n                            // If there is no return buffer yet defined, set the return buffer to the that was just populated.\r\n                            // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\r\n                            // preferred size allocated.\r\n                            if (undefined === transmitBuff) {\r\n                                transmitBuff = readBuff;\r\n                            } else {\r\n                                // Not the first bite at the apple, so fill the return buffer with the data we got back.\r\n                                const intView: Int8Array = new Int8Array(transmitBuff);\r\n                                intView.set(new Int8Array(readBuff), totalBytes);\r\n                            }\r\n\r\n                            // If there are no bytes to read, just break out and be done.\r\n                            if (0 === pulledBytes) {\r\n                                break;\r\n                            }\r\n\r\n                            totalBytes += pulledBytes;\r\n                        }\r\n\r\n                        return PromiseHelper.fromResult<IStreamChunk<ArrayBuffer>>({\r\n                            buffer: transmitBuff.slice(0, totalBytes),\r\n                            isEnd: this.privIsClosed || totalBytes === 0,\r\n                            timeReceived: Date.now(),\r\n                        });\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<boolean> {\r\n        return PromiseHelper.fromResult(false);\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return PromiseHelper.fromResult({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PullStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}