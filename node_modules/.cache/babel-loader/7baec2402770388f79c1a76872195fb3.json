{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { InvalidOperationError } from \"./Error\";\nimport { createNoDashGuid } from \"./Guid\";\nimport { Queue } from \"./Queue\";\nexport class Stream {\n  constructor(streamId) {\n    this.privReaderIdCounter = 1;\n    this.privIsEnded = false;\n\n    this.getReader = () => {\n      const readerId = this.privReaderIdCounter;\n      this.privReaderIdCounter++;\n      const readerQueue = new Queue();\n      const currentLength = this.privStreambuffer.length;\n      this.privReaderQueues[readerId] = readerQueue;\n\n      for (let i = 0; i < currentLength; i++) {\n        readerQueue.enqueue(this.privStreambuffer[i]);\n      }\n\n      return new StreamReader(this.privId, readerQueue, () => {\n        delete this.privReaderQueues[readerId];\n      });\n    };\n\n    this.throwIfClosed = () => {\n      if (this.privIsEnded) {\n        throw new InvalidOperationError(\"Stream closed\");\n      }\n    };\n\n    this.privId = streamId ? streamId : createNoDashGuid();\n    this.privStreambuffer = [];\n    this.privReaderQueues = {};\n  }\n\n  get isClosed() {\n    return this.privIsEnded;\n  }\n\n  get id() {\n    return this.privId;\n  }\n\n  close() {\n    if (!this.privIsEnded) {\n      this.writeStreamChunk({\n        buffer: null,\n        isEnd: true,\n        timeReceived: Date.now()\n      });\n      this.privIsEnded = true;\n    }\n  }\n\n  writeStreamChunk(streamChunk) {\n    this.throwIfClosed();\n    this.privStreambuffer.push(streamChunk);\n\n    for (const readerId in this.privReaderQueues) {\n      if (!this.privReaderQueues[readerId].isDisposed()) {\n        try {\n          this.privReaderQueues[readerId].enqueue(streamChunk);\n        } catch (e) {// Do nothing\n        }\n      }\n    }\n  }\n\n} // tslint:disable-next-line:max-classes-per-file\n\nexport class StreamReader {\n  constructor(streamId, readerQueue, onClose) {\n    this.privIsClosed = false;\n\n    this.read = () => {\n      if (this.isClosed) {\n        throw new InvalidOperationError(\"StreamReader closed\");\n      }\n\n      return this.privReaderQueue.dequeue().onSuccessContinueWith(streamChunk => {\n        if (streamChunk === undefined || streamChunk.isEnd) {\n          this.privReaderQueue.dispose(\"End of stream reached\");\n        }\n\n        return streamChunk;\n      });\n    };\n\n    this.close = () => {\n      if (!this.privIsClosed) {\n        this.privIsClosed = true;\n        this.privReaderQueue.dispose(\"StreamReader closed\");\n        this.privOnClose();\n      }\n    };\n\n    this.privReaderQueue = readerQueue;\n    this.privOnClose = onClose;\n    this.privStreamId = streamId;\n  }\n\n  get isClosed() {\n    return this.privIsClosed;\n  }\n\n  get streamId() {\n    return this.privStreamId;\n  }\n\n}","map":{"version":3,"sources":["src/common/Stream.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { Promise } from \"./Promise\";\r\nimport { Queue } from \"./Queue\";\r\n\r\nexport interface IStreamChunk<TBuffer> {\r\n    isEnd: boolean;\r\n    buffer: TBuffer;\r\n    timeReceived: number;\r\n}\r\n\r\nexport class Stream<TBuffer> {\r\n    private privId: string;\r\n    private privReaderIdCounter: number = 1;\r\n    private privStreambuffer: Array<IStreamChunk<TBuffer>>;\r\n    private privIsEnded: boolean = false;\r\n    private privReaderQueues: IStringDictionary<Queue<IStreamChunk<TBuffer>>>;\r\n\r\n    public constructor(streamId?: string) {\r\n        this.privId = streamId ? streamId : createNoDashGuid();\r\n        this.privStreambuffer = [];\r\n        this.privReaderQueues = {};\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsEnded;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public getReader = (): StreamReader<TBuffer> => {\r\n        const readerId = this.privReaderIdCounter;\r\n        this.privReaderIdCounter++;\r\n        const readerQueue = new Queue<IStreamChunk<TBuffer>>();\r\n        const currentLength = this.privStreambuffer.length;\r\n        this.privReaderQueues[readerId] = readerQueue;\r\n        for (let i = 0; i < currentLength; i++) {\r\n            readerQueue.enqueue(this.privStreambuffer[i]);\r\n        }\r\n        return new StreamReader(\r\n            this.privId,\r\n            readerQueue,\r\n            () => {\r\n                delete this.privReaderQueues[readerId];\r\n            });\r\n    }\r\n\r\n    public close(): void {\r\n        if (!this.privIsEnded) {\r\n            this.writeStreamChunk({\r\n                buffer: null,\r\n                isEnd: true,\r\n                timeReceived: Date.now(),\r\n            });\r\n            this.privIsEnded = true;\r\n        }\r\n    }\r\n\r\n    public writeStreamChunk(streamChunk: IStreamChunk<TBuffer>): void {\r\n        this.throwIfClosed();\r\n        this.privStreambuffer.push(streamChunk);\r\n        for (const readerId in this.privReaderQueues) {\r\n            if (!this.privReaderQueues[readerId].isDisposed()) {\r\n                try {\r\n                    this.privReaderQueues[readerId].enqueue(streamChunk);\r\n                } catch (e) {\r\n                    // Do nothing\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private throwIfClosed = (): void => {\r\n        if (this.privIsEnded) {\r\n            throw new InvalidOperationError(\"Stream closed\");\r\n        }\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class StreamReader<TBuffer> {\r\n    private privReaderQueue: Queue<IStreamChunk<TBuffer>>;\r\n    private privOnClose: () => void;\r\n    private privIsClosed: boolean = false;\r\n    private privStreamId: string;\r\n\r\n    public constructor(streamId: string, readerQueue: Queue<IStreamChunk<TBuffer>>, onClose: () => void) {\r\n        this.privReaderQueue = readerQueue;\r\n        this.privOnClose = onClose;\r\n        this.privStreamId = streamId;\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsClosed;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public read = (): Promise<IStreamChunk<TBuffer>> => {\r\n        if (this.isClosed) {\r\n            throw new InvalidOperationError(\"StreamReader closed\");\r\n        }\r\n\r\n        return this.privReaderQueue\r\n            .dequeue()\r\n            .onSuccessContinueWith((streamChunk: IStreamChunk<TBuffer>) => {\r\n                if (streamChunk === undefined || streamChunk.isEnd) {\r\n                    this.privReaderQueue.dispose(\"End of stream reached\");\r\n                }\r\n\r\n                return streamChunk;\r\n            });\r\n    }\r\n\r\n    public close = (): void => {\r\n        if (!this.privIsClosed) {\r\n            this.privIsClosed = true;\r\n            this.privReaderQueue.dispose(\"StreamReader closed\");\r\n            this.privOnClose();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}