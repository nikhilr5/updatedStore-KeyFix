{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { CancellationErrorCode, OutputFormat, PropertyCollection, PropertyId, ResultReason, SpeechRecognitionCanceledEventArgs, SpeechRecognitionEventArgs, SpeechRecognitionResult } from \"../sdk/Exports\";\nimport { CancellationErrorCodePropertyName, DetailedSpeechPhrase, EnumTranslation, OutputFormatPropertyName, RecognitionStatus, ServiceRecognizerBase, SimpleSpeechPhrase, SpeechHypothesis } from \"./Exports\"; // tslint:disable-next-line:max-classes-per-file\n\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\n  constructor(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer) {\n    super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\n    this.privSpeechRecognizer = speechRecognizer;\n  }\n\n  processTypeSpecificMessages(connectionMessage) {\n    let result;\n    const resultProps = new PropertyCollection();\n    resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n    let processed = false;\n\n    switch (connectionMessage.path.toLowerCase()) {\n      case \"speech.hypothesis\":\n      case \"speech.fragment\":\n        const hypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n        const offset = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\n        result = new SpeechRecognitionResult(this.privRequestSession.requestId, ResultReason.RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, undefined, connectionMessage.textBody, resultProps);\n        this.privRequestSession.onHypothesis(offset);\n        const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\n\n        if (!!this.privSpeechRecognizer.recognizing) {\n          try {\n            this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\n            /* tslint:disable:no-empty */\n          } catch (error) {// Not going to let errors in the event handler\n            // trip things up.\n          }\n        }\n\n        processed = true;\n        break;\n\n      case \"speech.phrase\":\n        const simple = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n        const resultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\n        this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\n\n        if (ResultReason.Canceled === resultReason) {\n          const cancelReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\n          this.cancelRecognitionLocal(cancelReason, EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus), undefined);\n        } else {\n          if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\n            if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\n              result = new SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, undefined, connectionMessage.textBody, resultProps);\n            } else {\n              const detailed = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\n              result = new SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined, detailed.Duration, detailed.Offset + this.privRequestSession.currentTurnAudioOffset, undefined, connectionMessage.textBody, resultProps);\n            }\n\n            const event = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n\n            if (!!this.privSpeechRecognizer.recognized) {\n              try {\n                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\n                /* tslint:disable:no-empty */\n              } catch (error) {// Not going to let errors in the event handler\n                // trip things up.\n              }\n            }\n          }\n\n          if (!!this.privSuccessCallback) {\n            try {\n              this.privSuccessCallback(result);\n            } catch (e) {\n              if (!!this.privErrorCallback) {\n                this.privErrorCallback(e);\n              }\n            } // Only invoke the call back once.\n            // and if it's successful don't invoke the\n            // error after that.\n\n\n            this.privSuccessCallback = undefined;\n            this.privErrorCallback = undefined;\n          }\n        }\n\n        processed = true;\n        break;\n\n      default:\n        break;\n    }\n\n    return processed;\n  } // Cancels recognition.\n\n\n  cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {\n    const properties = new PropertyCollection();\n    properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n    if (!!this.privSpeechRecognizer.canceled) {\n      const cancelEvent = new SpeechRecognitionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);\n\n      try {\n        this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\n        /* tslint:disable:no-empty */\n      } catch (_a) {}\n    }\n\n    if (!!this.privSuccessCallback) {\n      const result = new SpeechRecognitionResult(requestId, ResultReason.Canceled, undefined, // Text\n      undefined, // Druation\n      undefined, // Offset\n      error, undefined, // Json\n      properties);\n\n      try {\n        this.privSuccessCallback(result);\n        this.privSuccessCallback = undefined;\n        /* tslint:disable:no-empty */\n      } catch (_b) {}\n    }\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/SpeechServiceRecognizer.ts"],"names":[],"mappings":"AAAA;AACA;AAGA,SACI,qBADJ,EAGI,YAHJ,EAII,kBAJJ,EAKI,UALJ,EAMI,YANJ,EAOI,kCAPJ,EAQI,0BARJ,EASI,uBATJ,QAWO,gBAXP;AAYA,SACI,iCADJ,EAEI,oBAFJ,EAGI,eAHJ,EAII,wBAJJ,EAKI,iBALJ,EAOI,qBAPJ,EAQI,kBARJ,EASI,gBATJ,QAUO,WAVP,C,CAgBA;;AACA,OAAM,MAAO,uBAAP,SAAuC,qBAAvC,CAA4D;AAI9D,EAAA,WAAA,CACI,cADJ,EAEI,iBAFJ,EAGI,WAHJ,EAII,gBAJJ,EAKI,gBALJ,EAKsC;AAClC,UAAM,cAAN,EAAsB,iBAAtB,EAAyC,WAAzC,EAAsD,gBAAtD,EAAwE,gBAAxE;AACA,SAAK,oBAAL,GAA4B,gBAA5B;AACH;;AAES,EAAA,2BAA2B,CAAC,iBAAD,EAA2C;AAE5E,QAAI,MAAJ;AACA,UAAM,WAAW,GAAuB,IAAI,kBAAJ,EAAxC;AACA,IAAA,WAAW,CAAC,WAAZ,CAAwB,UAAU,CAAC,gCAAnC,EAAqE,iBAAiB,CAAC,QAAvF;AACA,QAAI,SAAS,GAAY,KAAzB;;AAEA,YAAQ,iBAAiB,CAAC,IAAlB,CAAuB,WAAvB,EAAR;AACI,WAAK,mBAAL;AACA,WAAK,iBAAL;AACI,cAAM,UAAU,GAAqB,gBAAgB,CAAC,QAAjB,CAA0B,iBAAiB,CAAC,QAA5C,CAArC;AACA,cAAM,MAAM,GAAW,UAAU,CAAC,MAAX,GAAoB,KAAK,kBAAL,CAAwB,sBAAnE;AAEA,QAAA,MAAM,GAAG,IAAI,uBAAJ,CACL,KAAK,kBAAL,CAAwB,SADnB,EAEL,YAAY,CAAC,iBAFR,EAGL,UAAU,CAAC,IAHN,EAIL,UAAU,CAAC,QAJN,EAKL,MALK,EAML,SANK,EAOL,iBAAiB,CAAC,QAPb,EAQL,WARK,CAAT;AAUA,aAAK,kBAAL,CAAwB,YAAxB,CAAqC,MAArC;AAEA,cAAM,EAAE,GAAG,IAAI,0BAAJ,CAA+B,MAA/B,EAAuC,UAAU,CAAC,QAAlD,EAA4D,KAAK,kBAAL,CAAwB,SAApF,CAAX;;AAEA,YAAI,CAAC,CAAC,KAAK,oBAAL,CAA0B,WAAhC,EAA6C;AACzC,cAAI;AACA,iBAAK,oBAAL,CAA0B,WAA1B,CAAsC,KAAK,oBAA3C,EAAiE,EAAjE;AACA;AACH,WAHD,CAGE,OAAO,KAAP,EAAc,CACZ;AACA;AACH;AACJ;;AACD,QAAA,SAAS,GAAG,IAAZ;AACA;;AACJ,WAAK,eAAL;AACI,cAAM,MAAM,GAAuB,kBAAkB,CAAC,QAAnB,CAA4B,iBAAiB,CAAC,QAA9C,CAAnC;AACA,cAAM,YAAY,GAAiB,eAAe,CAAC,8BAAhB,CAA+C,MAAM,CAAC,iBAAtD,CAAnC;AAEA,aAAK,kBAAL,CAAwB,kBAAxB,CAA2C,KAAK,kBAAL,CAAwB,sBAAxB,GAAiD,MAAM,CAAC,MAAxD,GAAiE,MAAM,CAAC,QAAnH;;AAEA,YAAI,YAAY,CAAC,QAAb,KAA0B,YAA9B,EAA4C;AACxC,gBAAM,YAAY,GAAuB,eAAe,CAAC,yBAAhB,CAA0C,MAAM,CAAC,iBAAjD,CAAzC;AAEA,eAAK,sBAAL,CACI,YADJ,EAEI,eAAe,CAAC,4BAAhB,CAA6C,MAAM,CAAC,iBAApD,CAFJ,EAGI,SAHJ;AAKH,SARD,MAQO;AACH,cAAI,EAAE,KAAK,kBAAL,CAAwB,aAAxB,IAAyC,YAAY,KAAK,YAAY,CAAC,OAAvE,IAAkF,MAAM,CAAC,iBAAP,KAA6B,iBAAiB,CAAC,qBAAnI,CAAJ,EAA+J;AAC3J,gBAAI,KAAK,oBAAL,CAA0B,UAA1B,CAAqC,WAArC,CAAiD,wBAAjD,MAA+E,YAAY,CAAC,YAAY,CAAC,MAAd,CAA/F,EAAsH;AAClH,cAAA,MAAM,GAAG,IAAI,uBAAJ,CACL,KAAK,kBAAL,CAAwB,SADnB,EAEL,YAFK,EAGL,MAAM,CAAC,WAHF,EAIL,MAAM,CAAC,QAJF,EAKL,MAAM,CAAC,MAAP,GAAgB,KAAK,kBAAL,CAAwB,sBALnC,EAML,SANK,EAOL,iBAAiB,CAAC,QAPb,EAQL,WARK,CAAT;AASH,aAVD,MAUO;AACH,oBAAM,QAAQ,GAAyB,oBAAoB,CAAC,QAArB,CAA8B,iBAAiB,CAAC,QAAhD,CAAvC;AAEA,cAAA,MAAM,GAAG,IAAI,uBAAJ,CACL,KAAK,kBAAL,CAAwB,SADnB,EAEL,YAFK,EAGL,QAAQ,CAAC,iBAAT,KAA+B,iBAAiB,CAAC,OAAjD,GAA2D,QAAQ,CAAC,KAAT,CAAe,CAAf,EAAkB,OAA7E,GAAuF,SAHlF,EAIL,QAAQ,CAAC,QAJJ,EAKL,QAAQ,CAAC,MAAT,GAAkB,KAAK,kBAAL,CAAwB,sBALrC,EAML,SANK,EAOL,iBAAiB,CAAC,QAPb,EAQL,WARK,CAAT;AASH;;AAED,kBAAM,KAAK,GAA+B,IAAI,0BAAJ,CAA+B,MAA/B,EAAuC,MAAM,CAAC,MAA9C,EAAsD,KAAK,kBAAL,CAAwB,SAA9E,CAA1C;;AAEA,gBAAI,CAAC,CAAC,KAAK,oBAAL,CAA0B,UAAhC,EAA4C;AACxC,kBAAI;AACA,qBAAK,oBAAL,CAA0B,UAA1B,CAAqC,KAAK,oBAA1C,EAAgE,KAAhE;AACA;AACH,eAHD,CAGE,OAAO,KAAP,EAAc,CACZ;AACA;AACH;AACJ;AACJ;;AAED,cAAI,CAAC,CAAC,KAAK,mBAAX,EAAgC;AAC5B,gBAAI;AACA,mBAAK,mBAAL,CAAyB,MAAzB;AACH,aAFD,CAEE,OAAO,CAAP,EAAU;AACR,kBAAI,CAAC,CAAC,KAAK,iBAAX,EAA8B;AAC1B,qBAAK,iBAAL,CAAuB,CAAvB;AACH;AACJ,aAP2B,CAQ5B;AACA;AACA;;;AACA,iBAAK,mBAAL,GAA2B,SAA3B;AACA,iBAAK,iBAAL,GAAyB,SAAzB;AACH;AACJ;;AACD,QAAA,SAAS,GAAG,IAAZ;AACA;;AACJ;AACI;AAtGR;;AAwGA,WAAO,SAAP;AACH,GA9H6D,CAgI9D;;;AACU,EAAA,iBAAiB,CACvB,SADuB,EAEvB,SAFuB,EAGvB,kBAHuB,EAIvB,SAJuB,EAKvB,KALuB,EAKV;AAEb,UAAM,UAAU,GAAuB,IAAI,kBAAJ,EAAvC;AACA,IAAA,UAAU,CAAC,WAAX,CAAuB,iCAAvB,EAA0D,qBAAqB,CAAC,SAAD,CAA/E;;AAEA,QAAI,CAAC,CAAC,KAAK,oBAAL,CAA0B,QAAhC,EAA0C;AACtC,YAAM,WAAW,GAAuC,IAAI,kCAAJ,CACpD,kBADoD,EAEpD,KAFoD,EAGpD,SAHoD,EAIpD,SAJoD,EAKpD,SALoD,CAAxD;;AAMA,UAAI;AACA,aAAK,oBAAL,CAA0B,QAA1B,CAAmC,KAAK,oBAAxC,EAA8D,WAA9D;AACA;AACH,OAHD,CAGE,OAAA,EAAA,EAAM,CAAG;AACd;;AAED,QAAI,CAAC,CAAC,KAAK,mBAAX,EAAgC;AAC5B,YAAM,MAAM,GAA4B,IAAI,uBAAJ,CACpC,SADoC,EAEpC,YAAY,CAAC,QAFuB,EAGpC,SAHoC,EAGzB;AACX,MAAA,SAJoC,EAIzB;AACX,MAAA,SALoC,EAKzB;AACX,MAAA,KANoC,EAOpC,SAPoC,EAOzB;AACX,MAAA,UARoC,CAAxC;;AASA,UAAI;AACA,aAAK,mBAAL,CAAyB,MAAzB;AACA,aAAK,mBAAL,GAA2B,SAA3B;AACA;AACH,OAJD,CAIE,OAAA,EAAA,EAAM,CAAG;AACd;AACJ;;AAxK6D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    SpeechRecognizer,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    RequestSession,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privSpeechRecognizer: SpeechRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        speechRecognizer: SpeechRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\r\n        this.privSpeechRecognizer = speechRecognizer;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): boolean {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privSpeechRecognizer.recognizing) {\r\n                    try {\r\n                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n\r\n                    this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus),\r\n                        undefined);\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                detailed.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privSpeechRecognizer.recognized) {\r\n                            try {\r\n                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privSpeechRecognizer.canceled) {\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Druation\r\n                undefined, // Offset\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}