{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ArgumentNullError, ConnectionState, createNoDashGuid, EventSource, MessageType, PromiseHelper, ServiceEvent } from \"../common/Exports\";\nimport { CancellationErrorCode, CancellationReason, PropertyCollection, PropertyId, ResultReason, SpeechSynthesisEventArgs, SpeechSynthesisResult, SpeechSynthesisWordBoundaryEventArgs, SpeechSynthesizer } from \"../sdk/Exports\";\nimport { AgentConfig, CancellationErrorCodePropertyName, DynamicGrammarBuilder, SpeechContext, SynthesisAudioMetadata, SynthesisTurn } from \"./Exports\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\nexport class SynthesisAdapterBase {\n  constructor(authentication, connectionFactory, synthesizerConfig, speechSynthesizer, audioDestination) {\n    this.speakOverride = undefined;\n    this.receiveMessageOverride = undefined;\n    this.connectImplOverride = undefined;\n    this.configConnectionOverride = undefined;\n    this.fetchConnectionOverride = undefined;\n\n    this.receiveMessage = () => {\n      return this.fetchConnection().on(connection => {\n        return connection.read().onSuccessContinueWithPromise(message => {\n          if (this.receiveMessageOverride !== undefined) {\n            return this.receiveMessageOverride();\n          }\n\n          if (this.privIsDisposed) {\n            // We're done.\n            return PromiseHelper.fromResult(undefined);\n          } // indicates we are draining the queue and it came with no message;\n\n\n          if (!message) {\n            if (!this.privSynthesisTurn.isSynthesizing) {\n              return PromiseHelper.fromResult(true);\n            } else {\n              return this.receiveMessage();\n            }\n          }\n\n          this.privServiceHasSentMessage = true;\n          const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\n\n          if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\n            switch (connectionMessage.path.toLowerCase()) {\n              case \"turn.start\":\n                this.privSynthesisTurn.onServiceTurnStartResponse();\n                break;\n\n              case \"response\":\n                this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\n                break;\n\n              case \"audio\":\n                if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase() && !!connectionMessage.binaryBody) {\n                  this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\n\n                  if (!!this.privSpeechSynthesizer.synthesizing) {\n                    try {\n                      const audioWithHeader = SynthesisAdapterBase.addHeader(connectionMessage.binaryBody, this.privSynthesisTurn.audioOutputFormat);\n                      const ev = new SpeechSynthesisEventArgs(new SpeechSynthesisResult(this.privSynthesisTurn.requestId, ResultReason.SynthesizingAudio, audioWithHeader));\n                      this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\n                    } catch (error) {// Not going to let errors in the event handler\n                      // trip things up.\n                    }\n                  }\n\n                  if (this.privSessionAudioDestination !== undefined) {\n                    this.privSessionAudioDestination.write(connectionMessage.binaryBody);\n                  }\n                }\n\n                break;\n\n              case \"audio.metadata\":\n                const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\n\n                for (const metadata of metadataList) {\n                  if (metadata.Type.toLowerCase() === \"WordBoundary\".toLowerCase()) {\n                    this.privSynthesisTurn.onWordBoundaryEvent(metadata.Data.text.Text);\n                    const ev = new SpeechSynthesisWordBoundaryEventArgs(metadata.Data.Offset, metadata.Data.text.Text, metadata.Data.text.Length, this.privSynthesisTurn.currentTextOffset);\n\n                    if (!!this.privSpeechSynthesizer.wordBoundary) {\n                      try {\n                        this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, ev);\n                      } catch (error) {// Not going to let errors in the event handler\n                        // trip things up.\n                      }\n                    }\n                  }\n                }\n\n                break;\n\n              case \"turn.end\":\n                this.privSynthesisTurn.onServiceTurnEndResponse();\n                let result;\n\n                try {\n                  result = new SpeechSynthesisResult(this.privSynthesisTurn.requestId, ResultReason.SynthesizingAudioCompleted, this.privSynthesisTurn.allReceivedAudioWithHeader);\n\n                  if (!!this.privSuccessCallback) {\n                    this.privSuccessCallback(result);\n                  }\n                } catch (error) {\n                  if (!!this.privErrorCallback) {\n                    this.privErrorCallback(error);\n                  }\n                }\n\n                if (this.privSpeechSynthesizer.synthesisCompleted) {\n                  try {\n                    this.privSpeechSynthesizer.synthesisCompleted(this.privSpeechSynthesizer, new SpeechSynthesisEventArgs(result));\n                  } catch (e) {// Not going to let errors in the event handler\n                    // trip things up.\n                  }\n                }\n\n                break;\n\n              default:\n                if (!this.processTypeSpecificMessages(connectionMessage)) {\n                  // here are some messages that the derived class has not processed, dispatch them to connect class\n                  if (!!this.privServiceEvents) {\n                    this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\n                  }\n                }\n\n            }\n          }\n\n          return this.receiveMessage();\n        });\n      }, error => {});\n    };\n\n    this.sendSynthesisContext = connection => {\n      const synthesisContextJson = JSON.stringify(this.buildSynthesisContext());\n\n      if (synthesisContextJson) {\n        return connection.send(new SpeechConnectionMessage(MessageType.Text, \"synthesis.context\", this.privSynthesisTurn.requestId, \"application/json\", synthesisContextJson));\n      }\n\n      return PromiseHelper.fromResult(true);\n    };\n\n    this.sendSpeechServiceConfig = (connection, SpeechServiceConfigJson) => {\n      if (SpeechServiceConfigJson) {\n        return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.config\", this.privSynthesisTurn.requestId, \"application/json\", SpeechServiceConfigJson));\n      }\n\n      return PromiseHelper.fromResult(true);\n    };\n\n    this.sendSsmlMessage = (connection, ssml, requestId) => {\n      return connection.send(new SpeechConnectionMessage(MessageType.Text, \"ssml\", requestId, \"application/ssml+xml\", ssml));\n    };\n\n    this.fetchConnection = () => {\n      if (this.fetchConnectionOverride !== undefined) {\n        return this.fetchConnectionOverride();\n      }\n\n      return this.configureConnection();\n    };\n\n    if (!authentication) {\n      throw new ArgumentNullError(\"authentication\");\n    }\n\n    if (!connectionFactory) {\n      throw new ArgumentNullError(\"connectionFactory\");\n    }\n\n    if (!synthesizerConfig) {\n      throw new ArgumentNullError(\"synthesizerConfig\");\n    }\n\n    this.privAuthentication = authentication;\n    this.privConnectionFactory = connectionFactory;\n    this.privSynthesizerConfig = synthesizerConfig;\n    this.privIsDisposed = false;\n    this.privSpeechSynthesizer = speechSynthesizer;\n    this.privSessionAudioDestination = audioDestination;\n    this.privSynthesisTurn = new SynthesisTurn();\n    this.privConnectionEvents = new EventSource();\n    this.privServiceEvents = new EventSource();\n    this.privDynamicGrammar = new DynamicGrammarBuilder();\n    this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\n    this.privAgentConfig = new AgentConfig();\n    this.connectionEvents.attach(connectionEvent => {\n      if (connectionEvent.name === \"ConnectionClosedEvent\") {\n        const connectionClosedEvent = connectionEvent;\n        this.cancelSynthesisLocal(CancellationReason.Error, connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure, connectionClosedEvent.reason + \" websocket error code: \" + connectionClosedEvent.statusCode);\n      }\n    });\n  }\n\n  get synthesisContext() {\n    return this.privSpeechContext;\n  }\n\n  get dynamicGrammar() {\n    return this.privDynamicGrammar;\n  }\n\n  get agentConfig() {\n    return this.privAgentConfig;\n  }\n\n  get connectionEvents() {\n    return this.privConnectionEvents;\n  }\n\n  get serviceEvents() {\n    return this.privServiceEvents;\n  }\n\n  set activityTemplate(messagePayload) {\n    this.privActivityTemplate = messagePayload;\n  }\n\n  get activityTemplate() {\n    return this.privActivityTemplate;\n  }\n\n  set audioOutputFormat(format) {\n    this.privAudioOutputFormat = format;\n    this.privSynthesisTurn.audioOutputFormat = format;\n\n    if (this.privSessionAudioDestination !== undefined) {\n      this.privSessionAudioDestination.format = format;\n    }\n  }\n\n  static addHeader(audio, format) {\n    if (!format.hasHeader) {\n      return audio;\n    }\n\n    format.updateHeader(audio.byteLength);\n    const tmp = new Uint8Array(audio.byteLength + format.header.byteLength);\n    tmp.set(new Uint8Array(format.header), 0);\n    tmp.set(new Uint8Array(audio), format.header.byteLength);\n    return tmp.buffer;\n  }\n\n  isDisposed() {\n    return this.privIsDisposed;\n  }\n\n  dispose(reason) {\n    this.privIsDisposed = true;\n\n    if (this.privSessionAudioDestination !== undefined) {\n      this.privSessionAudioDestination.close();\n    }\n\n    if (this.privConnectionConfigurationPromise) {\n      this.privConnectionConfigurationPromise.onSuccessContinueWith(connection => {\n        connection.dispose(reason);\n      });\n    }\n  }\n\n  connect() {\n    this.connectImpl().result();\n  }\n\n  connectAsync(cb, err) {\n    this.connectImpl().continueWith(promiseResult => {\n      try {\n        if (promiseResult.isError) {\n          if (!!err) {\n            err(promiseResult.error);\n          }\n        } else if (promiseResult.isCompleted) {\n          if (!!cb) {\n            cb();\n          }\n        }\n      } catch (e) {\n        if (!!err) {\n          err(e);\n        }\n      }\n    });\n  }\n\n  Speak(text, isSSML, requestId, successCallback, errorCallBack, audioDestination) {\n    let ssml;\n\n    if (isSSML) {\n      ssml = text;\n    } else {\n      ssml = SpeechSynthesizer.buildSsml(text, this.privSynthesizerConfig.parameters);\n    }\n\n    if (this.speakOverride !== undefined) {\n      return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\n    }\n\n    this.privSuccessCallback = successCallback;\n    this.privErrorCallback = errorCallBack;\n    this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\n    return this.fetchConnection().continueWithPromise(connection => {\n      if (connection.isError) {\n        this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, connection.error);\n        return PromiseHelper.fromError(connection.error);\n      }\n\n      return this.sendSynthesisContext(connection.result).continueWithPromise(result => {\n        if (result.isError) {\n          this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error);\n          return PromiseHelper.fromError(result.error);\n        }\n\n        return this.sendSsmlMessage(connection.result, ssml, requestId).continueWithPromise(result => {\n          if (result.isError) {\n            this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error);\n            return PromiseHelper.fromError(result.error);\n          }\n\n          const synthesisStartEventArgs = new SpeechSynthesisEventArgs(new SpeechSynthesisResult(requestId, ResultReason.SynthesizingAudioStarted));\n\n          if (!!this.privSpeechSynthesizer.synthesisStarted) {\n            this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\n          }\n\n          const messageRetrievalPromise = this.receiveMessage();\n          return PromiseHelper.fromResult(true);\n        });\n      });\n    });\n  } // Cancels synthesis.\n\n\n  cancelSynthesis(requestId, cancellationReason, errorCode, error) {\n    const properties = new PropertyCollection();\n    properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n    const result = new SpeechSynthesisResult(requestId, ResultReason.Canceled, undefined, error, properties);\n\n    if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\n      const cancelEvent = new SpeechSynthesisEventArgs(result);\n\n      try {\n        this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\n        /* tslint:disable:no-empty */\n      } catch (_a) {}\n    }\n\n    if (!!this.privSuccessCallback) {\n      try {\n        this.privSuccessCallback(result);\n        this.privSuccessCallback = undefined;\n        /* tslint:disable:no-empty */\n      } catch (_b) {}\n    }\n  } // Cancels synthesis.\n\n\n  cancelSynthesisLocal(cancellationReason, errorCode, error) {\n    if (!!this.privSynthesisTurn.isSynthesizing) {\n      this.privSynthesisTurn.onStopSynthesizing();\n      this.cancelSynthesis(this.privSynthesisTurn.requestId, cancellationReason, errorCode, error);\n    }\n  }\n\n  processTypeSpecificMessages(connectionMessage, successCallback, errorCallBack) {\n    return true;\n  } // Establishes a websocket connection to the end point.\n\n\n  connectImpl(isUnAuthorized = false) {\n    if (this.connectImplOverride !== undefined) {\n      return this.connectImplOverride(isUnAuthorized);\n    }\n\n    if (this.privConnectionPromise) {\n      if (this.privConnectionPromise.result().isCompleted && (this.privConnectionPromise.result().isError || this.privConnectionPromise.result().result.state() === ConnectionState.Disconnected) && this.privServiceHasSentMessage === true) {\n        this.privConnectionId = null;\n        this.privConnectionPromise = null;\n        this.privServiceHasSentMessage = false;\n        return this.connectImpl();\n      } else {\n        return this.privConnectionPromise;\n      }\n    }\n\n    this.privAuthFetchEventId = createNoDashGuid();\n    this.privConnectionId = createNoDashGuid();\n    this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\n    const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\n    this.privConnectionPromise = authPromise.continueWithPromise(result => {\n      if (result.isError) {\n        // this.privRequestSession.onAuthCompleted(true, result.error);\n        throw new Error(result.error);\n      } else {// this.privRequestSession.onAuthCompleted(false);\n      }\n\n      const connection = this.privConnectionFactory.create(this.privSynthesizerConfig, result.result, this.privConnectionId); // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\n      // it'll stop sending events.\n\n      connection.events.attach(event => {\n        this.connectionEvents.onEvent(event);\n      });\n      return connection.open().onSuccessContinueWithPromise(response => {\n        if (response.statusCode === 200) {\n          this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\n          this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\n          return PromiseHelper.fromResult(connection);\n        } else if (response.statusCode === 403 && !isUnAuthorized) {\n          return this.connectImpl(true);\n        } else {\n          this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode, response.reason);\n          return PromiseHelper.fromError(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\n        }\n      });\n    });\n    return this.privConnectionPromise;\n  } // Takes an established websocket connection to the endpoint and sends speech configuration information.\n\n\n  configureConnection() {\n    if (this.configConnectionOverride !== undefined) {\n      return this.configConnectionOverride();\n    }\n\n    if (this.privConnectionConfigurationPromise) {\n      if (this.privConnectionConfigurationPromise.result().isCompleted && (this.privConnectionConfigurationPromise.result().isError || this.privConnectionConfigurationPromise.result().result.state() === ConnectionState.Disconnected)) {\n        this.privConnectionConfigurationPromise = null;\n        return this.configureConnection();\n      } else {\n        return this.privConnectionConfigurationPromise;\n      }\n    }\n\n    this.privConnectionConfigurationPromise = this.connectImpl().onSuccessContinueWithPromise(connection => {\n      return this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize()).onSuccessContinueWith(_ => {\n        return connection;\n      });\n    });\n    return this.privConnectionConfigurationPromise;\n  }\n\n  buildSynthesisContext() {\n    return {\n      synthesis: {\n        audio: {\n          metadataOptions: {\n            sentenceBoundaryEnabled: false,\n            wordBoundaryEnabled: !!this.privSpeechSynthesizer.wordBoundary\n          },\n          outputFormat: this.privAudioOutputFormat.requestAudioFormatString\n        }\n      }\n    };\n  }\n\n}\nSynthesisAdapterBase.telemetryDataEnabled = true;","map":{"version":3,"sources":["src/common.speech/SynthesisAdapterBase.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IConnection,\r\n    IDisposable,\r\n    MessageType,\r\n    Promise,\r\n    PromiseHelper,\r\n    PromiseResult,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport {AudioOutputFormatImpl} from \"../sdk/Audio/AudioOutputFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"../sdk/Exports\";\r\nimport {Callback} from \"../sdk/Transcription/IConversation\";\r\nimport {\r\n    AgentConfig,\r\n    CancellationErrorCodePropertyName,\r\n    DynamicGrammarBuilder,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SynthesisAudioMetadata,\r\n    SynthesisTurn,\r\n} from \"./Exports\";\r\nimport {AuthInfo, IAuthentication} from \"./IAuthentication\";\r\nimport {ISynthesisConnectionFactory} from \"./ISynthesisConnectionFactory\";\r\nimport {SpeechConnectionMessage} from \"./SpeechConnectionMessage.Internal\";\r\nimport {SynthesizerConfig} from \"./SynthesizerConfig\";\r\n\r\nexport class SynthesisAdapterBase implements IDisposable {\r\n    protected privRequestSession: RequestSession;\r\n    protected privSynthesisTurn: SynthesisTurn;\r\n    protected privConnectionId: string;\r\n    protected privSynthesizerConfig: SynthesizerConfig;\r\n    protected privSpeechSynthesizer: SpeechSynthesizer;\r\n    protected privSuccessCallback: (e: SpeechSynthesisResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public get synthesisContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    protected speakOverride: (ssml: string, requestId: string, sc: (e: SpeechSynthesisResult) => void, ec: (e: string) => void) => any = undefined;\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public set activityTemplate(messagePayload: string) { this.privActivityTemplate = messagePayload; }\r\n    public get activityTemplate(): string { return this.privActivityTemplate; }\r\n\r\n    protected receiveMessageOverride: () => any = undefined;\r\n\r\n    protected connectImplOverride: (isUnAuthorized: boolean) => any = undefined;\r\n\r\n    protected configConnectionOverride: () => any = undefined;\r\n\r\n    protected fetchConnectionOverride: () => any = undefined;\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n        this.privSynthesisTurn.audioOutputFormat = format;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.format = format;\r\n        }\r\n    }\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection>;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privSpeechContext: SpeechContext;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privSessionAudioDestination: IAudioDestination;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        speechSynthesizer: SpeechSynthesizer,\r\n        audioDestination: IAudioDestination) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!synthesizerConfig) {\r\n            throw new ArgumentNullError(\"synthesizerConfig\");\r\n        }\r\n\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privSynthesizerConfig = synthesizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privSpeechSynthesizer = speechSynthesizer;\r\n        this.privSessionAudioDestination = audioDestination;\r\n        this.privSynthesisTurn = new SynthesisTurn();\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                this.cancelSynthesisLocal(CancellationReason.Error,\r\n                    connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                    connectionClosedEvent.reason + \" websocket error code: \" + connectionClosedEvent.statusCode);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static addHeader(audio: ArrayBuffer, format: AudioOutputFormatImpl): ArrayBuffer {\r\n        if (!format.hasHeader) {\r\n            return audio;\r\n        }\r\n        format.updateHeader(audio.byteLength);\r\n        const tmp = new Uint8Array(audio.byteLength + format.header.byteLength);\r\n        tmp.set(new Uint8Array(format.header), 0);\r\n        tmp.set(new Uint8Array(audio), format.header.byteLength);\r\n        return tmp.buffer;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        this.privIsDisposed = true;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.close();\r\n        }\r\n        if (this.privConnectionConfigurationPromise) {\r\n            this.privConnectionConfigurationPromise.onSuccessContinueWith((connection: IConnection) => {\r\n                connection.dispose(reason);\r\n            });\r\n        }\r\n    }\r\n\r\n    public connect(): void {\r\n        this.connectImpl().result();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().continueWith((promiseResult: PromiseResult<IConnection>) => {\r\n            try {\r\n                if (promiseResult.isError) {\r\n                    if (!!err) {\r\n                        err(promiseResult.error);\r\n                    }\r\n                } else if (promiseResult.isCompleted) {\r\n                    if (!!cb) {\r\n                        cb();\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public Speak(\r\n        text: string,\r\n        isSSML: boolean,\r\n        requestId: string,\r\n        successCallback: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n        audioDestination: IAudioDestination,\r\n    ): Promise<boolean> {\r\n\r\n        let ssml: string;\r\n\r\n        if (isSSML) {\r\n            ssml = text;\r\n        } else {\r\n            ssml = SpeechSynthesizer.buildSsml(text, this.privSynthesizerConfig.parameters);\r\n        }\r\n\r\n        if (this.speakOverride !== undefined) {\r\n            return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\r\n        }\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\r\n\r\n        return this.fetchConnection().continueWithPromise<boolean>((connection: PromiseResult<IConnection>) => {\r\n            if (connection.isError) {\r\n                this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, connection.error);\r\n                return PromiseHelper.fromError(connection.error);\r\n            }\r\n            return this.sendSynthesisContext(connection.result).continueWithPromise<boolean>((result: PromiseResult<boolean>): Promise<boolean> => {\r\n                if (result.isError) {\r\n                    this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error);\r\n                    return PromiseHelper.fromError(result.error);\r\n                }\r\n                return this.sendSsmlMessage(connection.result, ssml, requestId).continueWithPromise<boolean>((result: PromiseResult<boolean>): Promise<boolean> => {\r\n                    if (result.isError) {\r\n                        this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error);\r\n                        return PromiseHelper.fromError(result.error);\r\n                    }\r\n\r\n                    const synthesisStartEventArgs: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                        new SpeechSynthesisResult(\r\n                            requestId,\r\n                            ResultReason.SynthesizingAudioStarted,\r\n                        )\r\n                    );\r\n\r\n                    if (!!this.privSpeechSynthesizer.synthesisStarted) {\r\n                        this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\r\n                    }\r\n\r\n                    const messageRetrievalPromise = this.receiveMessage();\r\n                    return PromiseHelper.fromResult(true);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesis(\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n        const result: SpeechSynthesisResult = new SpeechSynthesisResult(\r\n            requestId,\r\n            ResultReason.Canceled,\r\n            undefined,\r\n            error,\r\n            properties\r\n        );\r\n\r\n        if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\r\n            const cancelEvent: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(result);\r\n            try {\r\n                this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesisLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        if (!!this.privSynthesisTurn.isSynthesizing) {\r\n            this.privSynthesisTurn.onStopSynthesizing();\r\n\r\n            this.cancelSynthesis(\r\n                this.privSynthesisTurn.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack?: (e: string) => void): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected receiveMessage = (): Promise<IConnection> => {\r\n        return this.fetchConnection().on((connection: IConnection): Promise<IConnection> => {\r\n            return connection.read()\r\n                .onSuccessContinueWithPromise((message: ConnectionMessage) => {\r\n\r\n                    if (this.receiveMessageOverride !== undefined) {\r\n                        return this.receiveMessageOverride();\r\n                    }\r\n                    if (this.privIsDisposed) {\r\n                        // We're done.\r\n                        return PromiseHelper.fromResult(undefined);\r\n                    }\r\n\r\n                    // indicates we are draining the queue and it came with no message;\r\n                    if (!message) {\r\n                        if (!this.privSynthesisTurn.isSynthesizing) {\r\n                            return PromiseHelper.fromResult(true);\r\n                        } else {\r\n                            return this.receiveMessage();\r\n                        }\r\n                    }\r\n\r\n                    this.privServiceHasSentMessage = true;\r\n\r\n                    const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n                    if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\r\n                        switch (connectionMessage.path.toLowerCase()) {\r\n                            case \"turn.start\":\r\n                                this.privSynthesisTurn.onServiceTurnStartResponse();\r\n                                break;\r\n                            case \"response\":\r\n                                this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\r\n                                break;\r\n                            case \"audio\":\r\n                                if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase()\r\n                                && !!connectionMessage.binaryBody) {\r\n                                    this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\r\n                                    if (!!this.privSpeechSynthesizer.synthesizing) {\r\n                                        try {\r\n                                            const audioWithHeader = SynthesisAdapterBase.addHeader(connectionMessage.binaryBody, this.privSynthesisTurn.audioOutputFormat);\r\n                                            const ev: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                                                new SpeechSynthesisResult(\r\n                                                    this.privSynthesisTurn.requestId,\r\n                                                    ResultReason.SynthesizingAudio,\r\n                                                    audioWithHeader));\r\n                                            this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\r\n                                        } catch (error) {\r\n                                            // Not going to let errors in the event handler\r\n                                            // trip things up.\r\n                                        }\r\n                                    }\r\n                                    if (this.privSessionAudioDestination !== undefined) {\r\n                                        this.privSessionAudioDestination.write(connectionMessage.binaryBody);\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case \"audio.metadata\":\r\n                                const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\r\n                                for (const metadata of metadataList) {\r\n                                    if (metadata.Type.toLowerCase() === \"WordBoundary\".toLowerCase()) {\r\n\r\n                                        this.privSynthesisTurn.onWordBoundaryEvent(metadata.Data.text.Text);\r\n\r\n                                        const ev: SpeechSynthesisWordBoundaryEventArgs = new SpeechSynthesisWordBoundaryEventArgs(\r\n                                            metadata.Data.Offset,\r\n                                            metadata.Data.text.Text,\r\n                                            metadata.Data.text.Length,\r\n                                            this.privSynthesisTurn.currentTextOffset);\r\n\r\n                                        if (!!this.privSpeechSynthesizer.wordBoundary) {\r\n                                            try {\r\n                                                this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, ev);\r\n                                            } catch (error) {\r\n                                                // Not going to let errors in the event handler\r\n                                                // trip things up.\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case \"turn.end\":\r\n                                this.privSynthesisTurn.onServiceTurnEndResponse();\r\n                                let result: SpeechSynthesisResult;\r\n                                try {\r\n                                    result = new SpeechSynthesisResult(\r\n                                        this.privSynthesisTurn.requestId,\r\n                                        ResultReason.SynthesizingAudioCompleted,\r\n                                        this.privSynthesisTurn.allReceivedAudioWithHeader\r\n                                    );\r\n                                    if (!!this.privSuccessCallback) {\r\n                                        this.privSuccessCallback(result);\r\n                                    }\r\n                                } catch (error) {\r\n                                    if (!!this.privErrorCallback) {\r\n                                        this.privErrorCallback(error);\r\n                                    }\r\n                                }\r\n                                if (this.privSpeechSynthesizer.synthesisCompleted) {\r\n                                    try {\r\n                                        this.privSpeechSynthesizer.synthesisCompleted(\r\n                                            this.privSpeechSynthesizer,\r\n                                            new SpeechSynthesisEventArgs(result)\r\n                                        );\r\n                                    } catch (e) {\r\n                                        // Not going to let errors in the event handler\r\n                                        // trip things up.\r\n                                    }\r\n                                }\r\n                                break;\r\n\r\n                            default:\r\n\r\n                                if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                                    // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                                    if (!!this.privServiceEvents) {\r\n                                        this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                                    }\r\n                                }\r\n\r\n                        }\r\n                    }\r\n\r\n                    return this.receiveMessage();\r\n                });\r\n        }, (error: string) => {\r\n        });\r\n    }\r\n\r\n    protected sendSynthesisContext = (connection: IConnection): Promise<boolean> => {\r\n        const synthesisContextJson = JSON.stringify(this.buildSynthesisContext());\r\n\r\n        if (synthesisContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"synthesis.context\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                synthesisContextJson));\r\n        }\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n\r\n        if (this.connectImplOverride !== undefined) {\r\n            return this.connectImplOverride(isUnAuthorized);\r\n        }\r\n\r\n        if (this.privConnectionPromise) {\r\n            if (this.privConnectionPromise.result().isCompleted &&\r\n                (this.privConnectionPromise.result().isError\r\n                    || this.privConnectionPromise.result().result.state() === ConnectionState.Disconnected) &&\r\n                this.privServiceHasSentMessage === true) {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            } else {\r\n                return this.privConnectionPromise;\r\n            }\r\n        }\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise\r\n            .continueWithPromise((result: PromiseResult<AuthInfo>) => {\r\n                if (result.isError) {\r\n                    // this.privRequestSession.onAuthCompleted(true, result.error);\r\n                    throw new Error(result.error);\r\n                } else {\r\n                    // this.privRequestSession.onAuthCompleted(false);\r\n                }\r\n\r\n                const connection: IConnection = this.privConnectionFactory.create(this.privSynthesizerConfig, result.result, this.privConnectionId);\r\n\r\n                // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n                // it'll stop sending events.\r\n                connection.events.attach((event: ConnectionEvent) => {\r\n                    this.connectionEvents.onEvent(event);\r\n                });\r\n\r\n                return connection.open().onSuccessContinueWithPromise((response: ConnectionOpenResponse): Promise<IConnection> => {\r\n                    if (response.statusCode === 200) {\r\n                        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n                        this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n\r\n                        return PromiseHelper.fromResult<IConnection>(connection);\r\n                    } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                        return this.connectImpl(true);\r\n                    } else {\r\n                        this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode, response.reason);\r\n                        return PromiseHelper.fromError<IConnection>(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\r\n                    }\r\n                });\r\n            });\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected sendSpeechServiceConfig = (connection: IConnection, SpeechServiceConfigJson: string): Promise<boolean> => {\r\n\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    protected sendSsmlMessage = (connection: IConnection, ssml: string, requestId: string): Promise<boolean> => {\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"ssml\",\r\n            requestId,\r\n            \"application/ssml+xml\",\r\n            ssml));\r\n    }\r\n\r\n    private fetchConnection = (): Promise<IConnection> => {\r\n        if (this.fetchConnectionOverride !== undefined) {\r\n            return this.fetchConnectionOverride();\r\n        }\r\n\r\n        return this.configureConnection();\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private configureConnection(): Promise<IConnection> {\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride();\r\n        }\r\n\r\n        if (this.privConnectionConfigurationPromise) {\r\n            if (this.privConnectionConfigurationPromise.result().isCompleted &&\r\n                (this.privConnectionConfigurationPromise.result().isError\r\n                    || this.privConnectionConfigurationPromise.result().result.state() === ConnectionState.Disconnected)) {\r\n\r\n                this.privConnectionConfigurationPromise = null;\r\n                return this.configureConnection();\r\n            } else {\r\n                return this.privConnectionConfigurationPromise;\r\n            }\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.connectImpl().onSuccessContinueWithPromise((connection: IConnection): Promise<IConnection> => {\r\n            return this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize())\r\n                .onSuccessContinueWith((_: boolean) => {\r\n                    return connection;\r\n                });\r\n        });\r\n\r\n        return this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    private buildSynthesisContext(): ISynthesisContext {\r\n        return {\r\n            synthesis: {\r\n                audio: {\r\n                    metadataOptions: {\r\n                        sentenceBoundaryEnabled: false,\r\n                        wordBoundaryEnabled: (!!this.privSpeechSynthesizer.wordBoundary),\r\n                    },\r\n                    outputFormat: this.privAudioOutputFormat.requestAudioFormatString,\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\ninterface ISynthesisContext {\r\n    synthesis: {\r\n        audio: {\r\n            outputFormat: string,\r\n            metadataOptions: {\r\n                wordBoundaryEnabled: boolean,\r\n                sentenceBoundaryEnabled: boolean,\r\n            }\r\n        }\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}