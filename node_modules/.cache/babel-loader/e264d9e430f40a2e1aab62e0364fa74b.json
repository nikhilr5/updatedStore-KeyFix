{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ServicePropertiesPropertyName } from \"../common.speech/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport class ConnectionFactoryBase {\n  setCommonUrlParams(config, queryParams, endpoint) {\n    this.setUrlParameter(PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging, config, queryParams, endpoint);\n    this.setUrlParameter(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, QueryParameterNames.EnableWordLevelTimestamps, config, queryParams, endpoint);\n    this.setUrlParameter(PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanify, config, queryParams, endpoint);\n    this.setUrlParameter(PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs, config, queryParams, endpoint);\n    this.setUrlParameter(PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs, config, queryParams, endpoint);\n    this.setUrlParameter(PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold, config, queryParams, endpoint);\n    const serviceProperties = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\"));\n    Object.keys(serviceProperties).forEach((value, num, array) => {\n      queryParams[value] = serviceProperties[value];\n    });\n  }\n\n  setUrlParameter(propId, parameterName, config, queryParams, endpoint) {\n    const value = config.parameters.getProperty(propId, undefined);\n\n    if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\n      queryParams[parameterName] = value.toLocaleLowerCase();\n    }\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/ConnectionFactoryBase.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SACI,6BADJ,QAEO,0BAFP;AAIA,SAAuB,UAAvB,QAAyC,gBAAzC;AAEA,SAAS,mBAAT,QAAoC,uBAApC;AAEA,OAAM,MAAgB,qBAAhB,CAAqC;AAM7B,EAAA,kBAAkB,CACxB,MADwB,EAExB,WAFwB,EAGxB,QAHwB,EAGR;AAEhB,SAAK,eAAL,CAAqB,UAAU,CAAC,0CAAhC,EACI,mBAAmB,CAAC,kBADxB,EAEI,MAFJ,EAGI,WAHJ,EAII,QAJJ;AAMA,SAAK,eAAL,CAAqB,UAAU,CAAC,gDAAhC,EACI,mBAAmB,CAAC,yBADxB,EAEI,MAFJ,EAGI,WAHJ,EAII,QAJJ;AAMA,SAAK,eAAL,CAAqB,UAAU,CAAC,qCAAhC,EACI,mBAAmB,CAAC,SADxB,EAEI,MAFJ,EAGI,WAHJ,EAII,QAJJ;AAMA,SAAK,eAAL,CAAqB,UAAU,CAAC,+CAAhC,EACI,mBAAmB,CAAC,uBADxB,EAEI,MAFJ,EAGI,WAHJ,EAII,QAJJ;AAMA,SAAK,eAAL,CAAqB,UAAU,CAAC,2CAAhC,EACI,mBAAmB,CAAC,mBADxB,EAEI,MAFJ,EAGI,WAHJ,EAII,QAJJ;AAMA,SAAK,eAAL,CAAqB,UAAU,CAAC,kDAAhC,EACI,mBAAmB,CAAC,2BADxB,EAEI,MAFJ,EAGI,WAHJ,EAII,QAJJ;AAMA,UAAM,iBAAiB,GAA8B,IAAI,CAAC,KAAL,CAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,6BAA9B,EAA6D,IAA7D,CAAX,CAArD;AAEA,IAAA,MAAM,CAAC,IAAP,CAAY,iBAAZ,EAA+B,OAA/B,CAAuC,CAAC,KAAD,EAAgB,GAAhB,EAA6B,KAA7B,KAAgD;AACnF,MAAA,WAAW,CAAC,KAAD,CAAX,GAAqB,iBAAiB,CAAC,KAAD,CAAtC;AACH,KAFD;AAGH;;AAES,EAAA,eAAe,CACrB,MADqB,EAErB,aAFqB,EAGrB,MAHqB,EAIrB,WAJqB,EAKrB,QALqB,EAKL;AAEhB,UAAM,KAAK,GAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,MAA9B,EAAsC,SAAtC,CAAtB;;AAEA,QAAI,KAAK,KAAK,CAAC,QAAD,IAAa,QAAQ,CAAC,MAAT,CAAgB,aAAhB,MAAmC,CAAC,CAAtD,CAAT,EAAmE;AAC/D,MAAA,WAAW,CAAC,aAAD,CAAX,GAA6B,KAAK,CAAC,iBAAN,EAA7B;AACH;AACJ;;AAlEsC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ServicePropertiesPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\r\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\r\nimport { AuthInfo, IConnectionFactory, RecognitionMode, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport abstract class ConnectionFactoryBase implements IConnectionFactory {\r\n    public abstract create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection;\r\n\r\n    protected setCommonUrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_EnableAudioLogging,\r\n            QueryParameterNames.EnableAudioLogging,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps,\r\n            QueryParameterNames.EnableWordLevelTimestamps,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_ProfanityOption,\r\n            QueryParameterNames.Profanify,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs,\r\n            QueryParameterNames.InitialSilenceTimeoutMs,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs,\r\n            QueryParameterNames.EndSilenceTimeoutMs,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_StablePartialResultThreshold,\r\n            QueryParameterNames.StableIntermediateThreshold,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\"));\r\n\r\n        Object.keys(serviceProperties).forEach((value: string, num: number, array: string[]) => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n\r\n    protected setUrlParameter(\r\n        propId: PropertyId,\r\n        parameterName: string,\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const value: string = config.parameters.getProperty(propId, undefined);\r\n\r\n        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\r\n            queryParams[parameterName] = value.toLocaleLowerCase();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}