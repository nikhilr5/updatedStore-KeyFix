{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ArgumentNullError, ConnectionMessage } from \"../common/Exports\";\nconst PathHeaderName = \"Path\";\nconst ContentTypeHeaderName = \"Content-Type\";\nconst RequestIdHeaderName = \"X-RequestId\";\nconst RequestTimestampHeaderName = \"X-Timestamp\";\nconst RequestStreamIdHeaderName = \"x-streamid\";\nexport class SpeechConnectionMessage extends ConnectionMessage {\n  constructor(messageType, path, requestId, contentType, body, streamId, additionalHeaders, id) {\n    if (!path) {\n      throw new ArgumentNullError(\"path\");\n    }\n\n    if (!requestId) {\n      throw new ArgumentNullError(\"requestId\");\n    }\n\n    const headers = {};\n    headers[PathHeaderName] = path;\n    headers[RequestIdHeaderName] = requestId;\n    headers[RequestTimestampHeaderName] = new Date().toISOString();\n\n    if (contentType) {\n      headers[ContentTypeHeaderName] = contentType;\n    }\n\n    if (streamId) {\n      headers[RequestStreamIdHeaderName] = streamId;\n    }\n\n    if (additionalHeaders) {\n      for (const headerName in additionalHeaders) {\n        if (headerName) {\n          headers[headerName] = additionalHeaders[headerName];\n        }\n      }\n    }\n\n    if (id) {\n      super(messageType, body, headers, id);\n    } else {\n      super(messageType, body, headers);\n    }\n\n    this.privPath = path;\n    this.privRequestId = requestId;\n    this.privContentType = contentType;\n    this.privStreamId = streamId;\n    this.privAdditionalHeaders = additionalHeaders;\n  }\n\n  get path() {\n    return this.privPath;\n  }\n\n  get requestId() {\n    return this.privRequestId;\n  }\n\n  get contentType() {\n    return this.privContentType;\n  }\n\n  get streamId() {\n    return this.privStreamId;\n  }\n\n  get additionalHeaders() {\n    return this.privAdditionalHeaders;\n  }\n\n}\n\nSpeechConnectionMessage.fromConnectionMessage = message => {\n  let path = null;\n  let requestId = null;\n  let contentType = null;\n  let requestTimestamp = null;\n  let streamId = null;\n  const additionalHeaders = {};\n\n  if (message.headers) {\n    for (const headerName in message.headers) {\n      if (headerName) {\n        if (headerName.toLowerCase() === PathHeaderName.toLowerCase()) {\n          path = message.headers[headerName];\n        } else if (headerName.toLowerCase() === RequestIdHeaderName.toLowerCase()) {\n          requestId = message.headers[headerName];\n        } else if (headerName.toLowerCase() === RequestTimestampHeaderName.toLowerCase()) {\n          requestTimestamp = message.headers[headerName];\n        } else if (headerName.toLowerCase() === ContentTypeHeaderName.toLowerCase()) {\n          contentType = message.headers[headerName];\n        } else if (headerName.toLowerCase() === RequestStreamIdHeaderName.toLowerCase()) {\n          streamId = message.headers[headerName];\n        } else {\n          additionalHeaders[headerName] = message.headers[headerName];\n        }\n      }\n    }\n  }\n\n  return new SpeechConnectionMessage(message.messageType, path, requestId, contentType, message.body, streamId, additionalHeaders, message.id);\n};","map":{"version":3,"sources":["src/common.speech/SpeechConnectionMessage.Internal.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError, ConnectionMessage, IStringDictionary, MessageType } from \"../common/Exports\";\r\n\r\nconst PathHeaderName: string = \"Path\";\r\nconst ContentTypeHeaderName: string = \"Content-Type\";\r\nconst RequestIdHeaderName: string = \"X-RequestId\";\r\nconst RequestTimestampHeaderName: string = \"X-Timestamp\";\r\nconst RequestStreamIdHeaderName: string = \"x-streamid\";\r\n\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n\r\n    private privPath: string;\r\n    private privRequestId: string;\r\n    private privContentType: string;\r\n    private privStreamId: string;\r\n    private privAdditionalHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        path: string,\r\n        requestId: string,\r\n        contentType: string,\r\n        body: any,\r\n        streamId?: string,\r\n        additionalHeaders?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[PathHeaderName] = path;\r\n        headers[RequestIdHeaderName] = requestId;\r\n        headers[RequestTimestampHeaderName] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[ContentTypeHeaderName] = contentType;\r\n        }\r\n\r\n        if (streamId) {\r\n            headers[RequestStreamIdHeaderName] = streamId;\r\n        }\r\n\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        } else {\r\n            super(messageType, body, headers);\r\n        }\r\n\r\n        this.privPath = path;\r\n        this.privRequestId = requestId;\r\n        this.privContentType = contentType;\r\n        this.privStreamId = streamId;\r\n        this.privAdditionalHeaders = additionalHeaders;\r\n    }\r\n\r\n    public get path(): string {\r\n        return this.privPath;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get contentType(): string {\r\n        return this.privContentType;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public get additionalHeaders(): IStringDictionary<string> {\r\n        return this.privAdditionalHeaders;\r\n    }\r\n\r\n    public static fromConnectionMessage = (message: ConnectionMessage): SpeechConnectionMessage => {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        let requestTimestamp = null;\r\n        let streamId = null;\r\n        const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n        if (message.headers) {\r\n            for (const headerName in message.headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === PathHeaderName.toLowerCase()) {\r\n                        path = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === RequestIdHeaderName.toLowerCase()) {\r\n                        requestId = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === RequestTimestampHeaderName.toLowerCase()) {\r\n                        requestTimestamp = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === ContentTypeHeaderName.toLowerCase()) {\r\n                        contentType = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === RequestStreamIdHeaderName.toLowerCase()) {\r\n                        streamId = message.headers[headerName];\r\n                    } else {\r\n                        additionalHeaders[headerName] = message.headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new SpeechConnectionMessage(\r\n            message.messageType,\r\n            path,\r\n            requestId,\r\n            contentType,\r\n            message.body,\r\n            streamId,\r\n            additionalHeaders,\r\n            message.id);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}