{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Stream } from \"./Exports\";\nexport class ChunkedArrayBufferStream extends Stream {\n  constructor(targetChunkSize, streamId) {\n    super(streamId);\n    this.privTargetChunkSize = targetChunkSize;\n    this.privNextBufferReadyBytes = 0;\n  }\n\n  writeStreamChunk(chunk) {\n    // No pending write, and the buffer is the right size so write it.\n    if (chunk.isEnd || 0 === this.privNextBufferReadyBytes && chunk.buffer.byteLength === this.privTargetChunkSize) {\n      super.writeStreamChunk(chunk);\n      return;\n    }\n\n    let bytesCopiedFromBuffer = 0;\n\n    while (bytesCopiedFromBuffer < chunk.buffer.byteLength) {\n      // Fill the next buffer.\n      if (undefined === this.privNextBufferToWrite) {\n        this.privNextBufferToWrite = new ArrayBuffer(this.privTargetChunkSize);\n        this.privNextBufferStartTime = chunk.timeReceived;\n      } // Find out how many bytes we can copy into the read buffer.\n\n\n      const bytesToCopy = Math.min(chunk.buffer.byteLength - bytesCopiedFromBuffer, this.privTargetChunkSize - this.privNextBufferReadyBytes);\n      const targetView = new Uint8Array(this.privNextBufferToWrite);\n      const sourceView = new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer, bytesToCopy + bytesCopiedFromBuffer));\n      targetView.set(sourceView, this.privNextBufferReadyBytes);\n      this.privNextBufferReadyBytes += bytesToCopy;\n      bytesCopiedFromBuffer += bytesToCopy; // Are we ready to write?\n\n      if (this.privNextBufferReadyBytes === this.privTargetChunkSize) {\n        super.writeStreamChunk({\n          buffer: this.privNextBufferToWrite,\n          isEnd: false,\n          timeReceived: this.privNextBufferStartTime\n        });\n        this.privNextBufferReadyBytes = 0;\n        this.privNextBufferToWrite = undefined;\n      }\n    }\n  }\n\n  close() {\n    // Send whatever is pending, then close the base class.\n    if (0 !== this.privNextBufferReadyBytes && !this.isClosed) {\n      super.writeStreamChunk({\n        buffer: this.privNextBufferToWrite.slice(0, this.privNextBufferReadyBytes),\n        isEnd: false,\n        timeReceived: this.privNextBufferStartTime\n      });\n    }\n\n    super.close();\n  }\n\n}","map":{"version":3,"sources":["src/common/ChunkedArrayBufferStream.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAuB,MAAvB,QAAqC,WAArC;AAEA,OAAM,MAAO,wBAAP,SAAwC,MAAxC,CAA2D;AAM7D,EAAA,WAAA,CAAY,eAAZ,EAAqC,QAArC,EAAsD;AAClD,UAAM,QAAN;AACA,SAAK,mBAAL,GAA2B,eAA3B;AACA,SAAK,wBAAL,GAAgC,CAAhC;AACH;;AAEM,EAAA,gBAAgB,CAAC,KAAD,EAAiC;AACpD;AACA,QAAI,KAAK,CAAC,KAAN,IACC,MAAM,KAAK,wBAAX,IAAuC,KAAK,CAAC,MAAN,CAAa,UAAb,KAA4B,KAAK,mBAD7E,EACmG;AAC/F,YAAM,gBAAN,CAAuB,KAAvB;AACA;AACH;;AAED,QAAI,qBAAqB,GAAW,CAApC;;AAEA,WAAO,qBAAqB,GAAG,KAAK,CAAC,MAAN,CAAa,UAA5C,EAAwD;AACpD;AACA,UAAI,SAAS,KAAK,KAAK,qBAAvB,EAA8C;AAC1C,aAAK,qBAAL,GAA6B,IAAI,WAAJ,CAAgB,KAAK,mBAArB,CAA7B;AACA,aAAK,uBAAL,GAA+B,KAAK,CAAC,YAArC;AACH,OALmD,CAOpD;;;AACA,YAAM,WAAW,GAAW,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,MAAN,CAAa,UAAb,GAA0B,qBAAnC,EAA0D,KAAK,mBAAL,GAA2B,KAAK,wBAA1F,CAA5B;AACA,YAAM,UAAU,GAAe,IAAI,UAAJ,CAAe,KAAK,qBAApB,CAA/B;AACA,YAAM,UAAU,GAAe,IAAI,UAAJ,CAAe,KAAK,CAAC,MAAN,CAAa,KAAb,CAAmB,qBAAnB,EAA0C,WAAW,GAAG,qBAAxD,CAAf,CAA/B;AAEA,MAAA,UAAU,CAAC,GAAX,CAAe,UAAf,EAA2B,KAAK,wBAAhC;AACA,WAAK,wBAAL,IAAiC,WAAjC;AACA,MAAA,qBAAqB,IAAI,WAAzB,CAdoD,CAgBpD;;AACA,UAAI,KAAK,wBAAL,KAAkC,KAAK,mBAA3C,EAAgE;AAC5D,cAAM,gBAAN,CAAuB;AACnB,UAAA,MAAM,EAAE,KAAK,qBADM;AAEnB,UAAA,KAAK,EAAE,KAFY;AAGnB,UAAA,YAAY,EAAE,KAAK;AAHA,SAAvB;AAKA,aAAK,wBAAL,GAAgC,CAAhC;AACA,aAAK,qBAAL,GAA6B,SAA7B;AACH;AACJ;AACJ;;AAEM,EAAA,KAAK,GAAA;AACR;AACA,QAAI,MAAM,KAAK,wBAAX,IAAuC,CAAC,KAAK,QAAjD,EAA2D;AACvD,YAAM,gBAAN,CAAuB;AACnB,QAAA,MAAM,EAAE,KAAK,qBAAL,CAA2B,KAA3B,CAAiC,CAAjC,EAAoC,KAAK,wBAAzC,CADW;AAEnB,QAAA,KAAK,EAAE,KAFY;AAGnB,QAAA,YAAY,EAAE,KAAK;AAHA,OAAvB;AAKH;;AAED,UAAM,KAAN;AACH;;AA9D4D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStreamChunk, Stream } from \"./Exports\";\r\n\r\nexport class ChunkedArrayBufferStream extends Stream<ArrayBuffer> {\r\n    private privTargetChunkSize: number;\r\n    private privNextBufferToWrite: ArrayBuffer;\r\n    private privNextBufferStartTime: number;\r\n    private privNextBufferReadyBytes: number;\r\n\r\n    constructor(targetChunkSize: number, streamId?: string) {\r\n        super(streamId);\r\n        this.privTargetChunkSize = targetChunkSize;\r\n        this.privNextBufferReadyBytes = 0;\r\n    }\r\n\r\n    public writeStreamChunk(chunk: IStreamChunk<ArrayBuffer>): void {\r\n        // No pending write, and the buffer is the right size so write it.\r\n        if (chunk.isEnd ||\r\n            (0 === this.privNextBufferReadyBytes && chunk.buffer.byteLength === this.privTargetChunkSize)) {\r\n            super.writeStreamChunk(chunk);\r\n            return;\r\n        }\r\n\r\n        let bytesCopiedFromBuffer: number = 0;\r\n\r\n        while (bytesCopiedFromBuffer < chunk.buffer.byteLength) {\r\n            // Fill the next buffer.\r\n            if (undefined === this.privNextBufferToWrite) {\r\n                this.privNextBufferToWrite = new ArrayBuffer(this.privTargetChunkSize);\r\n                this.privNextBufferStartTime = chunk.timeReceived;\r\n            }\r\n\r\n            // Find out how many bytes we can copy into the read buffer.\r\n            const bytesToCopy: number = Math.min(chunk.buffer.byteLength - bytesCopiedFromBuffer, this.privTargetChunkSize - this.privNextBufferReadyBytes);\r\n            const targetView: Uint8Array = new Uint8Array(this.privNextBufferToWrite);\r\n            const sourceView: Uint8Array = new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer, bytesToCopy + bytesCopiedFromBuffer));\r\n\r\n            targetView.set(sourceView, this.privNextBufferReadyBytes);\r\n            this.privNextBufferReadyBytes += bytesToCopy;\r\n            bytesCopiedFromBuffer += bytesToCopy;\r\n\r\n            // Are we ready to write?\r\n            if (this.privNextBufferReadyBytes === this.privTargetChunkSize) {\r\n                super.writeStreamChunk({\r\n                    buffer: this.privNextBufferToWrite,\r\n                    isEnd: false,\r\n                    timeReceived: this.privNextBufferStartTime,\r\n                });\r\n                this.privNextBufferReadyBytes = 0;\r\n                this.privNextBufferToWrite = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        // Send whatever is pending, then close the base class.\r\n        if (0 !== this.privNextBufferReadyBytes && !this.isClosed) {\r\n            super.writeStreamChunk({\r\n                buffer: this.privNextBufferToWrite.slice(0, this.privNextBufferReadyBytes),\r\n                isEnd: false,\r\n                timeReceived: this.privNextBufferStartTime,\r\n            });\r\n        }\r\n\r\n        super.close();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}