{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat\";\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\nexport var AudioFormatTag;\n\n(function (AudioFormatTag) {\n  AudioFormatTag[AudioFormatTag[\"PCM\"] = 1] = \"PCM\";\n  AudioFormatTag[AudioFormatTag[\"MuLaw\"] = 2] = \"MuLaw\";\n  AudioFormatTag[AudioFormatTag[\"Siren\"] = 3] = \"Siren\";\n  AudioFormatTag[AudioFormatTag[\"MP3\"] = 4] = \"MP3\";\n  AudioFormatTag[AudioFormatTag[\"SILKSkype\"] = 5] = \"SILKSkype\";\n})(AudioFormatTag || (AudioFormatTag = {}));\n/**\n * @private\n * @class AudioOutputFormatImpl\n * Added in version 1.11.0\n */\n// tslint:disable-next-line:max-classes-per-file\n\n\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\n  /**\n   * Creates an instance with the given values.\n   * @constructor\n   * @param formatTag\n   * @param {number} samplesPerSec - Samples per second.\n   * @param {number} bitsPerSample - Bits per sample.\n   * @param {number} channels - Number of channels.\n   * @param avgBytesPerSec\n   * @param blockAlign\n   * @param audioFormatString\n   * @param requestAudioFormatString\n   * @param hasHeader\n   */\n  constructor(formatTag, channels, samplesPerSec, avgBytesPerSec, blockAlign, bitsPerSample, audioFormatString, requestAudioFormatString, hasHeader) {\n    super(samplesPerSec, bitsPerSample, channels);\n    this.formatTag = formatTag;\n    this.avgBytesPerSec = avgBytesPerSec;\n    this.blockAlign = blockAlign;\n    this.priAudioFormatString = audioFormatString;\n    this.priRequestAudioFormatString = requestAudioFormatString;\n    this.priHasHeader = hasHeader;\n  }\n\n  static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat) {\n    return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\n  }\n\n  static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString) {\n    switch (speechSynthesisOutputFormatString) {\n      case \"raw-8khz-8bit-mono-mulaw\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"riff-16khz-16kbps-mono-siren\":\n        return new AudioOutputFormatImpl(AudioFormatTag.Siren, 1, 16000, 2000, 40, 0, speechSynthesisOutputFormatString, \"audio-16khz-16kbps-mono-siren\", true);\n\n      case \"audio-16khz-16kbps-mono-siren\":\n        return new AudioOutputFormatImpl(AudioFormatTag.Siren, 1, 16000, 2000, 40, 0, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-16khz-32kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 32 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-16khz-128kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 128 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-16khz-64kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 64 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-24khz-48kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 48 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-24khz-96kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 96 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-24khz-160kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 160 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"raw-16khz-16bit-mono-truesilk\":\n        return new AudioOutputFormatImpl(AudioFormatTag.SILKSkype, 1, 16000, 32000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"riff-8khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 8000, 16000, 2, 16, speechSynthesisOutputFormatString, \"raw-8khz-16bit-mono-pcm\", true);\n\n      case \"riff-24khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 24000, 48000, 2, 16, speechSynthesisOutputFormatString, \"raw-24khz-16bit-mono-pcm\", true);\n\n      case \"riff-8khz-8bit-mono-mulaw\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MuLaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, \"raw-8khz-8bit-mono-mulaw\", true);\n\n      case \"raw-16khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 16000, 32000, 2, 16, speechSynthesisOutputFormatString, \"raw-16khz-16bit-mono-pcm\", false);\n\n      case \"raw-24khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 24000, 48000, 2, 16, speechSynthesisOutputFormatString, \"raw-24khz-16bit-mono-pcm\", false);\n\n      case \"raw-8khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 8000, 16000, 2, 16, speechSynthesisOutputFormatString, \"raw-8khz-16bit-mono-pcm\", false);\n\n      case \"riff-16khz-16bit-mono-pcm\":\n      default:\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 16000, 32000, 2, 16, \"riff-16khz-16bit-mono-pcm\", \"raw-16khz-16bit-mono-pcm\", true);\n    }\n  }\n\n  static getDefaultOutputFormat() {\n    return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\"\");\n  }\n  /**\n   * Specifies if this audio output format has a header\n   * @boolean AudioOutputFormatImpl.prototype.hasHeader\n   * @function\n   * @public\n   */\n\n\n  get hasHeader() {\n    return this.priHasHeader;\n  }\n  /**\n   * Specifies the header of this format\n   * @ArrayBuffer AudioOutputFormatImpl.prototype.header\n   * @function\n   * @public\n   */\n\n\n  get header() {\n    if (this.hasHeader) {\n      return this.privHeader;\n    }\n\n    return undefined;\n  }\n  /**\n   * Updates the header based on the audio length\n   * @member AudioOutputFormatImpl.updateHeader\n   * @function\n   * @public\n   * @param {number} audioLength - the audio length\n   */\n\n\n  updateHeader(audioLength) {\n    if (this.priHasHeader) {\n      const view = new DataView(this.privHeader);\n      view.setUint32(40, audioLength, true);\n    }\n  }\n  /**\n   * Specifies the audio format string to be sent to the service\n   * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\n   * @function\n   * @public\n   */\n\n\n  get requestAudioFormatString() {\n    return this.priRequestAudioFormatString;\n  }\n\n}\nAudioOutputFormatImpl.SpeechSynthesisOutputFormatToString = {\n  [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\n  [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\n  [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\n  [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\n  [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\n  [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\"\n};","map":{"version":3,"sources":["src/sdk/Audio/AudioOutputFormat.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { INumberDictionary } from \"../../common/Exports\";\r\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\nexport enum AudioFormatTag {\r\n    PCM = 1,\r\n    MuLaw,\r\n    Siren,\r\n    MP3,\r\n    SILKSkype\r\n}\r\n\r\n/**\r\n * @private\r\n * @class AudioOutputFormatImpl\r\n * Added in version 1.11.0\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\r\n    public static SpeechSynthesisOutputFormatToString: INumberDictionary<string> = {\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\",\r\n    };\r\n    private priAudioFormatString: string;\r\n    /**\r\n     * audio format string for synthesis request, which may differ from priAudioFormatString.\r\n     * e.g. for riff format, we will request raw format and add a header in SDK side.\r\n     */\r\n    private readonly priRequestAudioFormatString: string;\r\n    private readonly priHasHeader: boolean;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param formatTag\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {number} channels - Number of channels.\r\n     * @param avgBytesPerSec\r\n     * @param blockAlign\r\n     * @param audioFormatString\r\n     * @param requestAudioFormatString\r\n     * @param hasHeader\r\n     */\r\n    public constructor(formatTag: AudioFormatTag,\r\n                       channels: number,\r\n                       samplesPerSec: number,\r\n                       avgBytesPerSec: number,\r\n                       blockAlign: number,\r\n                       bitsPerSample: number,\r\n                       audioFormatString: string,\r\n                       requestAudioFormatString: string,\r\n                       hasHeader: boolean) {\r\n        super(samplesPerSec, bitsPerSample, channels);\r\n        this.formatTag = formatTag;\r\n        this.avgBytesPerSec = avgBytesPerSec;\r\n        this.blockAlign = blockAlign;\r\n        this.priAudioFormatString = audioFormatString;\r\n        this.priRequestAudioFormatString = requestAudioFormatString;\r\n        this.priHasHeader = hasHeader;\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat: SpeechSynthesisOutputFormat): AudioOutputFormatImpl {\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString: string): AudioOutputFormatImpl {\r\n        switch (speechSynthesisOutputFormatString) {\r\n            case \"raw-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"audio-16khz-16kbps-mono-siren\",\r\n                    true);\r\n            case \"audio-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-32kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    32 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-128kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    128 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-64kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    64 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-48kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    48 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-160kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    160 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-16khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n\r\n            case \"riff-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-mulaw\",\r\n                    true);\r\n            case \"raw-16khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"riff-16khz-16bit-mono-pcm\":\r\n            default:\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    \"riff-16khz-16bit-mono-pcm\",\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    true);\r\n        }\r\n    }\r\n\r\n    public static getDefaultOutputFormat(): AudioOutputFormatImpl {\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\"\");\r\n    }\r\n\r\n    /**\r\n     * The format tag of the audio\r\n     * @AudioFormatTag AudioOutputFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: AudioFormatTag;\r\n\r\n    /**\r\n     * Specifies if this audio output format has a header\r\n     * @boolean AudioOutputFormatImpl.prototype.hasHeader\r\n     * @function\r\n     * @public\r\n     */\r\n    public get hasHeader(): boolean {\r\n        return this.priHasHeader;\r\n    }\r\n\r\n    /**\r\n     * Specifies the header of this format\r\n     * @ArrayBuffer AudioOutputFormatImpl.prototype.header\r\n     * @function\r\n     * @public\r\n     */\r\n    public get header(): ArrayBuffer {\r\n        if (this.hasHeader) {\r\n            return this.privHeader;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates the header based on the audio length\r\n     * @member AudioOutputFormatImpl.updateHeader\r\n     * @function\r\n     * @public\r\n     * @param {number} audioLength - the audio length\r\n     */\r\n    public updateHeader(audioLength: number): void {\r\n        if (this.priHasHeader) {\r\n            const view = new DataView(this.privHeader);\r\n            view.setUint32(40, audioLength, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio format string to be sent to the service\r\n     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\r\n     * @function\r\n     * @public\r\n     */\r\n    public get requestAudioFormatString(): string {\r\n        return this.priRequestAudioFormatString;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}