{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { RiffPcmEncoder } from \"../common/Exports\";\nexport class PcmRecorder {\n  constructor() {\n    this.record = (context, mediaStream, outputStream) => {\n      const desiredSampleRate = 16000;\n\n      const scriptNode = (() => {\n        let bufferSize = 0;\n\n        try {\n          return context.createScriptProcessor(bufferSize, 1, 1);\n        } catch (error) {\n          // Webkit (<= version 31) requires a valid bufferSize.\n          bufferSize = 2048;\n          let audioSampleRate = context.sampleRate;\n\n          while (bufferSize < 16384 && audioSampleRate >= 2 * desiredSampleRate) {\n            bufferSize <<= 1;\n            audioSampleRate >>= 1;\n          }\n\n          return context.createScriptProcessor(bufferSize, 1, 1);\n        }\n      })();\n\n      const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\n      let needHeader = true;\n      const that = this;\n\n      scriptNode.onaudioprocess = event => {\n        const inputFrame = event.inputBuffer.getChannelData(0);\n\n        if (outputStream && !outputStream.isClosed) {\n          const waveFrame = waveStreamEncoder.encode(inputFrame);\n\n          if (!!waveFrame) {\n            outputStream.writeStreamChunk({\n              buffer: waveFrame,\n              isEnd: false,\n              timeReceived: Date.now()\n            });\n            needHeader = false;\n          }\n        }\n      };\n\n      const micInput = context.createMediaStreamSource(mediaStream); // https://webaudio.github.io/web-audio-api/#audioworklet\n      // Using AudioWorklet to improve audio quality and avoid audio glitches due to blocking the UI thread\n\n      if (!!this.privSpeechProcessorScript && !!context.audioWorklet) {\n        context.audioWorklet.addModule(this.privSpeechProcessorScript).then(() => {\n          const workletNode = new AudioWorkletNode(context, \"speech-processor\");\n\n          workletNode.port.onmessage = ev => {\n            const inputFrame = ev.data;\n\n            if (outputStream && !outputStream.isClosed) {\n              const waveFrame = waveStreamEncoder.encode(inputFrame);\n\n              if (!!waveFrame) {\n                outputStream.writeStreamChunk({\n                  buffer: waveFrame,\n                  isEnd: false,\n                  timeReceived: Date.now()\n                });\n                needHeader = false;\n              }\n            }\n          };\n\n          micInput.connect(workletNode);\n          workletNode.connect(context.destination);\n          this.privMediaResources = {\n            scriptProcessorNode: workletNode,\n            source: micInput,\n            stream: mediaStream\n          };\n        }).catch(() => {\n          micInput.connect(scriptNode);\n          scriptNode.connect(context.destination);\n          this.privMediaResources = {\n            scriptProcessorNode: scriptNode,\n            source: micInput,\n            stream: mediaStream\n          };\n        });\n      } else {\n        micInput.connect(scriptNode);\n        scriptNode.connect(context.destination);\n        this.privMediaResources = {\n          scriptProcessorNode: scriptNode,\n          source: micInput,\n          stream: mediaStream\n        };\n      }\n    };\n\n    this.releaseMediaResources = context => {\n      if (this.privMediaResources) {\n        if (this.privMediaResources.scriptProcessorNode) {\n          this.privMediaResources.scriptProcessorNode.disconnect(context.destination);\n          this.privMediaResources.scriptProcessorNode = null;\n        }\n\n        if (this.privMediaResources.source) {\n          this.privMediaResources.source.disconnect();\n          this.privMediaResources.stream.getTracks().forEach(track => track.stop());\n          this.privMediaResources.source = null;\n        }\n      }\n    };\n  }\n\n  setWorkletUrl(url) {\n    this.privSpeechProcessorScript = url;\n  }\n\n}","map":{"version":3,"sources":["src/common.browser/PCMRecorder.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RiffPcmEncoder, Stream } from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\nexport class PcmRecorder implements IRecorder {\r\n    private privMediaResources: IMediaResources;\r\n    private privSpeechProcessorScript: string; // speech-processor.js Url\r\n\r\n    public record = (context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\r\n        const desiredSampleRate = 16000;\r\n\r\n        const scriptNode = (() => {\r\n            let bufferSize = 0;\r\n            try {\r\n                return context.createScriptProcessor(bufferSize, 1, 1);\r\n            } catch (error) {\r\n                // Webkit (<= version 31) requires a valid bufferSize.\r\n                bufferSize = 2048;\r\n                let audioSampleRate = context.sampleRate;\r\n                while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {\r\n                    bufferSize <<= 1;\r\n                    audioSampleRate >>= 1;\r\n                }\r\n                return context.createScriptProcessor(bufferSize, 1, 1);\r\n            }\r\n        })();\r\n\r\n        const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\r\n        let needHeader: boolean = true;\r\n        const that = this;\r\n        scriptNode.onaudioprocess = (event: AudioProcessingEvent) => {\r\n            const inputFrame = event.inputBuffer.getChannelData(0);\r\n\r\n            if (outputStream && !outputStream.isClosed) {\r\n                const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                if (!!waveFrame) {\r\n                    outputStream.writeStreamChunk({\r\n                        buffer: waveFrame,\r\n                        isEnd: false,\r\n                        timeReceived: Date.now(),\r\n                    });\r\n                    needHeader = false;\r\n                }\r\n            }\r\n        };\r\n\r\n        const micInput = context.createMediaStreamSource(mediaStream);\r\n\r\n        // https://webaudio.github.io/web-audio-api/#audioworklet\r\n        // Using AudioWorklet to improve audio quality and avoid audio glitches due to blocking the UI thread\r\n\r\n        if (!!this.privSpeechProcessorScript && !!context.audioWorklet) {\r\n            context.audioWorklet\r\n                .addModule(this.privSpeechProcessorScript)\r\n                .then(() => {\r\n                    const workletNode = new AudioWorkletNode(context, \"speech-processor\");\r\n                    workletNode.port.onmessage = (ev: MessageEvent) => {\r\n                        const inputFrame: Float32Array = ev.data as Float32Array;\r\n\r\n                        if (outputStream && !outputStream.isClosed) {\r\n                            const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                            if (!!waveFrame) {\r\n                                outputStream.writeStreamChunk({\r\n                                    buffer: waveFrame,\r\n                                    isEnd: false,\r\n                                    timeReceived: Date.now(),\r\n                                });\r\n                                needHeader = false;\r\n                            }\r\n                        }\r\n                    };\r\n                    micInput.connect(workletNode);\r\n                    workletNode.connect(context.destination);\r\n                    this.privMediaResources = {\r\n                        scriptProcessorNode: workletNode,\r\n                        source: micInput,\r\n                        stream: mediaStream,\r\n                    };\r\n                })\r\n                .catch(() => {\r\n                    micInput.connect(scriptNode);\r\n                    scriptNode.connect(context.destination);\r\n                    this.privMediaResources = {\r\n                        scriptProcessorNode: scriptNode,\r\n                        source: micInput,\r\n                        stream: mediaStream,\r\n                    };\r\n                });\r\n        } else {\r\n            micInput.connect(scriptNode);\r\n            scriptNode.connect(context.destination);\r\n            this.privMediaResources = {\r\n                scriptProcessorNode: scriptNode,\r\n                source: micInput,\r\n                stream: mediaStream,\r\n            };\r\n        }\r\n    }\r\n\r\n    public releaseMediaResources = (context: AudioContext): void => {\r\n        if (this.privMediaResources) {\r\n            if (this.privMediaResources.scriptProcessorNode) {\r\n                this.privMediaResources.scriptProcessorNode.disconnect(context.destination);\r\n                this.privMediaResources.scriptProcessorNode = null;\r\n            }\r\n            if (this.privMediaResources.source) {\r\n                this.privMediaResources.source.disconnect();\r\n                this.privMediaResources.stream.getTracks().forEach((track: any) => track.stop());\r\n                this.privMediaResources.source = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public setWorkletUrl(url: string): void {\r\n        this.privSpeechProcessorScript = url;\r\n    }\r\n}\r\n\r\ninterface IMediaResources {\r\n    source: MediaStreamAudioSourceNode;\r\n    scriptProcessorNode: ScriptProcessorNode | AudioWorkletNode;\r\n    stream: MediaStream;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}