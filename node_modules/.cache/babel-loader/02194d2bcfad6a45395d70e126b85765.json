{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { MessageType } from \"../common/Exports\";\nimport { CancellationErrorCode, IntentRecognitionCanceledEventArgs, IntentRecognitionEventArgs, IntentRecognitionResult, PropertyCollection, PropertyId, ResultReason } from \"../sdk/Exports\";\nimport { CancellationErrorCodePropertyName, EnumTranslation, IntentResponse, ServiceRecognizerBase, SimpleSpeechPhrase, SpeechHypothesis } from \"./Exports\"; // tslint:disable-next-line:max-classes-per-file\n\nexport class IntentServiceRecognizer extends ServiceRecognizerBase {\n  constructor(authentication, connectionFactory, audioSource, recognizerConfig, recognizer) {\n    super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\n    this.privIntentRecognizer = recognizer;\n    this.privIntentDataSent = false;\n  }\n\n  setIntents(addedIntents, umbrellaIntent) {\n    this.privAddedLmIntents = addedIntents;\n    this.privUmbrellaIntent = umbrellaIntent;\n    this.privIntentDataSent = true;\n  }\n\n  processTypeSpecificMessages(connectionMessage) {\n    let result;\n    let ev;\n    let processed = false;\n    const resultProps = new PropertyCollection();\n\n    if (connectionMessage.messageType === MessageType.Text) {\n      resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n    }\n\n    switch (connectionMessage.path.toLowerCase()) {\n      case \"speech.hypothesis\":\n        const speechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n        result = new IntentRecognitionResult(undefined, this.privRequestSession.requestId, ResultReason.RecognizingIntent, speechHypothesis.Text, speechHypothesis.Duration, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, undefined, connectionMessage.textBody, resultProps);\n        this.privRequestSession.onHypothesis(result.offset);\n        ev = new IntentRecognitionEventArgs(result, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\n\n        if (!!this.privIntentRecognizer.recognizing) {\n          try {\n            this.privIntentRecognizer.recognizing(this.privIntentRecognizer, ev);\n            /* tslint:disable:no-empty */\n          } catch (error) {// Not going to let errors in the event handler\n            // trip things up.\n          }\n        }\n\n        processed = true;\n        break;\n\n      case \"speech.phrase\":\n        const simple = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n        result = new IntentRecognitionResult(undefined, this.privRequestSession.requestId, EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus), simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, undefined, connectionMessage.textBody, resultProps);\n        ev = new IntentRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n\n        const sendEvent = () => {\n          if (!!this.privIntentRecognizer.recognized) {\n            try {\n              this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\n              /* tslint:disable:no-empty */\n            } catch (error) {// Not going to let errors in the event handler\n              // trip things up.\n            }\n          } // report result to promise.\n\n\n          if (!!this.privSuccessCallback) {\n            try {\n              this.privSuccessCallback(result);\n            } catch (e) {\n              if (!!this.privErrorCallback) {\n                this.privErrorCallback(e);\n              }\n            } // Only invoke the call back once.\n            // and if it's successful don't invoke the\n            // error after that.\n\n\n            this.privSuccessCallback = undefined;\n            this.privErrorCallback = undefined;\n          }\n        }; // If intent data was sent, the terminal result for this recognizer is an intent being found.\n        // If no intent data was sent, the terminal event is speech recognition being successful.\n\n\n        if (false === this.privIntentDataSent || ResultReason.NoMatch === ev.result.reason) {\n          // Advance the buffers.\n          this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\n          sendEvent();\n        } else {\n          // Squirrel away the args, when the response event arrives it will build upon them\n          // and then return\n          this.privPendingIntentArgs = ev;\n        }\n\n        processed = true;\n        break;\n\n      case \"response\":\n        // Response from LUIS\n        ev = this.privPendingIntentArgs;\n        this.privPendingIntentArgs = undefined;\n\n        if (undefined === ev) {\n          if (\"\" === connectionMessage.textBody) {\n            // This condition happens if there is nothing but silence in the\n            // audio sent to the service.\n            return;\n          } // Odd... Not sure this can happen\n\n\n          ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(), 0\n          /*TODO*/\n          , this.privRequestSession.sessionId);\n        }\n\n        const intentResponse = IntentResponse.fromJSON(connectionMessage.textBody); // If LUIS didn't return anything, send the existing event, else\n        // modify it to show the match.\n        // See if the intent found is in the list of intents asked for.\n\n        let addedIntent = this.privAddedLmIntents[intentResponse.topScoringIntent.intent];\n\n        if (this.privUmbrellaIntent !== undefined) {\n          addedIntent = this.privUmbrellaIntent;\n        }\n\n        if (null !== intentResponse && addedIntent !== undefined) {\n          const intentId = addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;\n          let reason = ev.result.reason;\n\n          if (undefined !== intentId) {\n            reason = ResultReason.RecognizedIntent;\n          } // make sure, properties is set.\n\n\n          const properties = undefined !== ev.result.properties ? ev.result.properties : new PropertyCollection();\n          properties.setProperty(PropertyId.LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.textBody);\n          ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(intentId, ev.result.resultId, reason, ev.result.text, ev.result.duration, ev.result.offset, ev.result.errorDetails, ev.result.json, properties), ev.offset, ev.sessionId);\n        }\n\n        this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\n\n        if (!!this.privIntentRecognizer.recognized) {\n          try {\n            this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\n            /* tslint:disable:no-empty */\n          } catch (error) {// Not going to let errors in the event handler\n            // trip things up.\n          }\n        } // report result to promise.\n\n\n        if (!!this.privSuccessCallback) {\n          try {\n            this.privSuccessCallback(ev.result);\n          } catch (e) {\n            if (!!this.privErrorCallback) {\n              this.privErrorCallback(e);\n            }\n          } // Only invoke the call back once.\n          // and if it's successful don't invoke the\n          // error after that.\n\n\n          this.privSuccessCallback = undefined;\n          this.privErrorCallback = undefined;\n        }\n\n        processed = true;\n        break;\n\n      default:\n        break;\n    }\n\n    return processed;\n  } // Cancels recognition.\n\n\n  cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {\n    const properties = new PropertyCollection();\n    properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n    if (!!this.privIntentRecognizer.canceled) {\n      const cancelEvent = new IntentRecognitionCanceledEventArgs(cancellationReason, error, errorCode, undefined, undefined, sessionId);\n\n      try {\n        this.privIntentRecognizer.canceled(this.privIntentRecognizer, cancelEvent);\n        /* tslint:disable:no-empty */\n      } catch (_a) {}\n    }\n\n    if (!!this.privSuccessCallback) {\n      const result = new IntentRecognitionResult(undefined, // Intent Id\n      requestId, ResultReason.Canceled, undefined, // Text\n      undefined, // Druation\n      undefined, // Offset\n      error, undefined, // Json\n      properties);\n\n      try {\n        this.privSuccessCallback(result);\n        this.privSuccessCallback = undefined;\n        /* tslint:disable:no-empty */\n      } catch (_b) {}\n    }\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/IntentServiceRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    MessageType,\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    IntentRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    AddedLmIntent,\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    IntentResponse,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class IntentServiceRecognizer extends ServiceRecognizerBase {\r\n    private privIntentRecognizer: IntentRecognizer;\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent; };\r\n    private privIntentDataSent: boolean;\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n    private privPendingIntentArgs: IntentRecognitionEventArgs;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: IntentRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privIntentRecognizer = recognizer;\r\n        this.privIntentDataSent = false;\r\n    }\r\n\r\n    public setIntents(addedIntents: { [id: string]: AddedLmIntent; }, umbrellaIntent: AddedLmIntent): void {\r\n        this.privAddedLmIntents = addedIntents;\r\n        this.privUmbrellaIntent = umbrellaIntent;\r\n        this.privIntentDataSent = true;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): boolean {\r\n\r\n        let result: IntentRecognitionResult;\r\n        let ev: IntentRecognitionEventArgs;\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n                const speechHypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingIntent,\r\n                    speechHypothesis.Text,\r\n                    speechHypothesis.Duration,\r\n                    speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(result.offset);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privIntentRecognizer.recognizing) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognizing(this.privIntentRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus),\r\n                    simple.DisplayText,\r\n                    simple.Duration,\r\n                    simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                const sendEvent: () => void = () => {\r\n                    if (!!this.privIntentRecognizer.recognized) {\r\n                        try {\r\n                            this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                };\r\n\r\n                // If intent data was sent, the terminal result for this recognizer is an intent being found.\r\n                // If no intent data was sent, the terminal event is speech recognition being successful.\r\n                if (false === this.privIntentDataSent || ResultReason.NoMatch === ev.result.reason) {\r\n                    // Advance the buffers.\r\n                    this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n                    sendEvent();\r\n                } else {\r\n                    // Squirrel away the args, when the response event arrives it will build upon them\r\n                    // and then return\r\n                    this.privPendingIntentArgs = ev;\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"response\":\r\n                // Response from LUIS\r\n                ev = this.privPendingIntentArgs;\r\n                this.privPendingIntentArgs = undefined;\r\n\r\n                if (undefined === ev) {\r\n                    if (\"\" === connectionMessage.textBody) {\r\n                        // This condition happens if there is nothing but silence in the\r\n                        // audio sent to the service.\r\n                        return;\r\n                    }\r\n\r\n                    // Odd... Not sure this can happen\r\n                    ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(), 0 /*TODO*/, this.privRequestSession.sessionId);\r\n                }\r\n\r\n                const intentResponse: IntentResponse = IntentResponse.fromJSON(connectionMessage.textBody);\r\n\r\n                // If LUIS didn't return anything, send the existing event, else\r\n                // modify it to show the match.\r\n                // See if the intent found is in the list of intents asked for.\r\n                let addedIntent: AddedLmIntent = this.privAddedLmIntents[intentResponse.topScoringIntent.intent];\r\n\r\n                if (this.privUmbrellaIntent !== undefined) {\r\n                    addedIntent = this.privUmbrellaIntent;\r\n                }\r\n\r\n                if (null !== intentResponse && addedIntent !== undefined) {\r\n                    const intentId = addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;\r\n                    let reason = ev.result.reason;\r\n\r\n                    if (undefined !== intentId) {\r\n                        reason = ResultReason.RecognizedIntent;\r\n                    }\r\n\r\n                    // make sure, properties is set.\r\n                    const properties = (undefined !== ev.result.properties) ?\r\n                        ev.result.properties : new PropertyCollection();\r\n\r\n                    properties.setProperty(PropertyId.LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.textBody);\r\n\r\n                    ev = new IntentRecognitionEventArgs(\r\n                        new IntentRecognitionResult(\r\n                            intentId,\r\n                            ev.result.resultId,\r\n                            reason,\r\n                            ev.result.text,\r\n                            ev.result.duration,\r\n                            ev.result.offset,\r\n                            ev.result.errorDetails,\r\n                            ev.result.json,\r\n                            properties),\r\n                        ev.offset,\r\n                        ev.sessionId);\r\n                }\r\n                this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n\r\n                if (!!this.privIntentRecognizer.recognized) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(ev.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privIntentRecognizer.canceled) {\r\n\r\n            const cancelEvent: IntentRecognitionCanceledEventArgs = new IntentRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privIntentRecognizer.canceled(this.privIntentRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: IntentRecognitionResult = new IntentRecognitionResult(\r\n                undefined, // Intent Id\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Druation\r\n                undefined, // Offset\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}