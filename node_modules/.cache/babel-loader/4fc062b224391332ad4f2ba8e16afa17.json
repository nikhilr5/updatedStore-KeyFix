{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { RecognizerConfig } from \"../../common.speech/Exports\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { Recognizer } from \"../../sdk/Exports\";\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory\";\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter\";\nimport { ConversationTranslatorCommandTypes, ConversationTranslatorMessageTypes } from \"./ConversationTranslatorInterfaces\";\nimport { PromiseToEmptyCallback } from \"./ConversationUtils\";\n/**\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\n * Based off the recognizers in the SDK folder.\n */\n\nexport class ConversationTranslatorRecognizer extends Recognizer {\n  constructor(speechConfig, audioConfig) {\n    const serviceConfigImpl = speechConfig;\n    Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\n    super(audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\n    this.privIsDisposed = false;\n    this.privProperties = serviceConfigImpl.properties.clone();\n  }\n\n  set conversation(value) {\n    this.privRoom = value;\n  }\n  /**\n   * Return the speech language used by the recognizer\n   */\n\n\n  get speechRecognitionLanguage() {\n    return this.privSpeechRecognitionLanguage;\n  }\n  /**\n   * Return the properties for the recognizer\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n\n  isDisposed() {\n    return this.privIsDisposed;\n  }\n  /**\n   * Connect to the recognizer\n   * @param token\n   */\n\n\n  connect(token, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfNullOrWhitespace(token, \"token\");\n      this.privReco.conversationTranslatorToken = token;\n      this.privReco.connectAsync(cb, err);\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      }\n    }\n  }\n  /**\n   * Disconnect from the recognizer\n   */\n\n\n  disconnect(cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      this.privRoom = undefined;\n      this.privReco.disconnectAsync(cb, err);\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      } // Destroy the recognizer.\n\n\n      this.dispose(true);\n    }\n  }\n  /**\n   * Send the text message command to the websocket\n   * @param conversationId\n   * @param participantId\n   * @param message\n   */\n\n\n  sendMessageRequest(message, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n      Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n      Contracts.throwIfNullOrWhitespace(message, \"message\");\n      const command = {\n        // tslint:disable-next-line: object-literal-shorthand\n        participantId: this.privRoom.participantId,\n        roomId: this.privRoom.roomId,\n        text: message,\n        type: ConversationTranslatorMessageTypes.instantMessage\n      };\n      this.sendMessage(JSON.stringify(command), cb, err);\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      } // Destroy the recognizer.\n\n\n      this.dispose(true);\n    }\n  }\n  /**\n   * Send the lock conversation command to the websocket\n   * @param conversationId\n   * @param participantId\n   * @param isLocked\n   */\n\n\n  sendLockRequest(isLocked, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n      Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n      Contracts.throwIfNullOrUndefined(isLocked, \"isLocked\");\n      const command = {\n        command: ConversationTranslatorCommandTypes.setLockState,\n        // tslint:disable-next-line: object-literal-shorthand\n        participantId: this.privRoom.participantId,\n        roomid: this.privRoom.roomId,\n        type: ConversationTranslatorMessageTypes.participantCommand,\n        value: isLocked\n      };\n      this.sendMessage(JSON.stringify(command), cb, err);\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      } // Destroy the recognizer.\n\n\n      this.dispose(true);\n    }\n  }\n  /**\n   * Send the mute all participants command to the websocket\n   * @param conversationId\n   * @param participantId\n   * @param isMuted\n   */\n\n\n  sendMuteAllRequest(isMuted, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n      Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n      Contracts.throwIfNullOrUndefined(isMuted, \"isMuted\");\n      const command = {\n        command: ConversationTranslatorCommandTypes.setMuteAll,\n        // tslint:disable-next-line: object-literal-shorthand\n        participantId: this.privRoom.participantId,\n        roomid: this.privRoom.roomId,\n        type: ConversationTranslatorMessageTypes.participantCommand,\n        value: isMuted\n      };\n      this.sendMessage(JSON.stringify(command), cb, err);\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      } // Destroy the recognizer.\n\n\n      this.dispose(true);\n    }\n  }\n  /**\n   * Send the mute participant command to the websocket\n   * @param conversationId\n   * @param participantId\n   * @param isMuted\n   */\n\n\n  sendMuteRequest(participantId, isMuted, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n      Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\n      Contracts.throwIfNullOrUndefined(isMuted, \"isMuted\");\n      const command = {\n        command: ConversationTranslatorCommandTypes.setMute,\n        // tslint:disable-next-line: object-literal-shorthand\n        participantId: participantId,\n        roomid: this.privRoom.roomId,\n        type: ConversationTranslatorMessageTypes.participantCommand,\n        value: isMuted\n      };\n      this.sendMessage(JSON.stringify(command), cb, err);\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      } // Destroy the recognizer.\n\n\n      this.dispose(true);\n    }\n  }\n  /**\n   * Send the eject participant command to the websocket\n   * @param conversationId\n   * @param participantId\n   */\n\n\n  sendEjectRequest(participantId, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n      Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\n      const command = {\n        command: ConversationTranslatorCommandTypes.ejectParticipant,\n        // tslint:disable-next-line: object-literal-shorthand\n        participantId: participantId,\n        roomid: this.privRoom.roomId,\n        type: ConversationTranslatorMessageTypes.participantCommand\n      };\n      this.sendMessage(JSON.stringify(command), cb, err);\n\n      if (!!cb) {\n        try {\n          cb();\n        } catch (e) {\n          if (!!err) {\n            err(e);\n          }\n        }\n      }\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      } // Destroy the recognizer.\n\n\n      this.dispose(true);\n    }\n  }\n  /**\n   * Send the mute participant command to the websocket\n   * @param conversationId\n   * @param participantId\n   * @param isMuted\n   */\n\n\n  sendChangeNicknameRequest(nickname, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n      Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\n      const command = {\n        command: ConversationTranslatorCommandTypes.changeNickname,\n        nickname,\n        // tslint:disable-next-line: object-literal-shorthand\n        participantId: this.privRoom.participantId,\n        roomid: this.privRoom.roomId,\n        type: ConversationTranslatorMessageTypes.participantCommand,\n        value: nickname\n      };\n      this.sendMessage(JSON.stringify(command), cb, err);\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      } // Destroy the recognizer.\n\n\n      this.dispose(true);\n    }\n  }\n  /**\n   * Close and dispose the recognizer\n   */\n\n\n  close() {\n    Contracts.throwIfDisposed(this.privIsDisposed);\n    this.dispose(true);\n  }\n  /**\n   * Dispose the recognizer\n   * @param disposing\n   */\n\n\n  dispose(disposing) {\n    if (this.privIsDisposed) {\n      return;\n    }\n\n    if (disposing) {\n      this.privIsDisposed = true;\n      super.dispose(disposing);\n    }\n  }\n  /**\n   * Create the config for the recognizer\n   * @param speechConfig\n   */\n\n\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.privProperties);\n  }\n  /**\n   * Create the service recognizer.\n   * The audio source is redundnant here but is required by the implementation.\n   * @param authentication\n   * @param connectionFactory\n   * @param audioConfig\n   * @param recognizerConfig\n   */\n\n\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const audioSource = audioConfig;\n    return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\n  }\n\n  sendMessage(msg, cb, err) {\n    const withAsync = this.privReco;\n    PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/Transcription/ConversationTranslatorRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../../common.speech/Exports\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { AudioConfig,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig} from \"../../sdk/Exports\";\r\nimport { SpeechTranslationConfigImpl } from \"../../sdk/SpeechTranslationConfig\";\r\nimport { Callback } from \"../../sdk/Transcription/IConversation\";\r\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory\";\r\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs\";\r\nimport {\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IChangeNicknameCommand,\r\n    IConversationTranslatorRecognizer,\r\n    IEjectParticipantCommand,\r\n    IInstantMessageCommand,\r\n    IInternalConversation,\r\n    ILockConversationCommand,\r\n    IMuteAllCommand,\r\n    IMuteCommand} from \"./ConversationTranslatorInterfaces\";\r\nimport { PromiseToEmptyCallback } from \"./ConversationUtils\";\r\n\r\n/**\r\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\r\n * Based off the recognizers in the SDK folder.\r\n */\r\nexport class ConversationTranslatorRecognizer extends Recognizer implements IConversationTranslatorRecognizer {\r\n\r\n    private privIsDisposed: boolean;\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privRoom: IInternalConversation;\r\n\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const serviceConfigImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\r\n\r\n        this.privIsDisposed = false;\r\n        this.privProperties = serviceConfigImpl.properties.clone();\r\n\r\n    }\r\n\r\n    public canceled: (sender: IConversationTranslatorRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: IConversationTranslatorRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    public lockRoomCommandReceived: (sender: IConversationTranslatorRecognizer, event: LockRoomEventArgs) => void;\r\n    public muteAllCommandReceived: (sender: IConversationTranslatorRecognizer, event: MuteAllEventArgs) => void;\r\n    public participantJoinCommandReceived: (sender: IConversationTranslatorRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantLeaveCommandReceived: (sender: IConversationTranslatorRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantUpdateCommandReceived: (sender: IConversationTranslatorRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    public connectionOpened: (sender: IConversationTranslatorRecognizer, event: SessionEventArgs) => void;\r\n    public connectionClosed: (sender: IConversationTranslatorRecognizer, event: SessionEventArgs) => void;\r\n    public translationReceived: (sender: IConversationTranslatorRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    public participantsListReceived: (sender: IConversationTranslatorRecognizer, event: ParticipantsListEventArgs) => void;\r\n    public participantsChanged: (sender: IConversationTranslatorRecognizer, event: ConversationParticipantsChangedEventArgs) => void;\r\n\r\n    public set conversation(value: IInternalConversation) {\r\n        this.privRoom = value;\r\n    }\r\n\r\n    /**\r\n     * Return the speech language used by the recognizer\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Return the properties for the recognizer\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    /**\r\n     * Connect to the recognizer\r\n     * @param token\r\n     */\r\n    public connect(token: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n            this.privReco.conversationTranslatorToken = token;\r\n            this.privReco.connectAsync(cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnect from the recognizer\r\n     */\r\n    public disconnect(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            this.privRoom = undefined;\r\n            this.privReco.disconnectAsync(cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the text message command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param message\r\n     */\r\n    public sendMessageRequest(message: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n            Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n            const command: IInstantMessageCommand = {\r\n                // tslint:disable-next-line: object-literal-shorthand\r\n                participantId: this.privRoom.participantId,\r\n                roomId: this.privRoom.roomId,\r\n                text: message,\r\n                type: ConversationTranslatorMessageTypes.instantMessage\r\n            };\r\n\r\n            this.sendMessage(JSON.stringify(command), cb, err);\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the lock conversation command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isLocked\r\n     */\r\n    public sendLockRequest(isLocked: boolean, cb?: () => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n            Contracts.throwIfNullOrUndefined(isLocked, \"isLocked\");\r\n\r\n            const command: ILockConversationCommand = {\r\n                command: ConversationTranslatorCommandTypes.setLockState,\r\n                // tslint:disable-next-line: object-literal-shorthand\r\n                participantId: this.privRoom.participantId,\r\n                roomid: this.privRoom.roomId,\r\n                type: ConversationTranslatorMessageTypes.participantCommand,\r\n                value: isLocked\r\n            };\r\n\r\n            this.sendMessage(JSON.stringify(command), cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the mute all participants command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isMuted\r\n     */\r\n    public sendMuteAllRequest(isMuted: boolean, cb?: () => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n            Contracts.throwIfNullOrUndefined(isMuted, \"isMuted\");\r\n\r\n            const command: IMuteAllCommand = {\r\n                command: ConversationTranslatorCommandTypes.setMuteAll,\r\n                // tslint:disable-next-line: object-literal-shorthand\r\n                participantId: this.privRoom.participantId, // the id of the host\r\n                roomid: this.privRoom.roomId,\r\n                type: ConversationTranslatorMessageTypes.participantCommand,\r\n                value: isMuted\r\n            };\r\n\r\n            this.sendMessage(JSON.stringify(command), cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the mute participant command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isMuted\r\n     */\r\n    public sendMuteRequest(participantId: string, isMuted: boolean, cb?: () => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n            Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n            Contracts.throwIfNullOrUndefined(isMuted, \"isMuted\");\r\n\r\n            const command: IMuteCommand = {\r\n                command: ConversationTranslatorCommandTypes.setMute,\r\n                // tslint:disable-next-line: object-literal-shorthand\r\n                participantId: participantId, // the id of the participant\r\n                roomid: this.privRoom.roomId,\r\n                type: ConversationTranslatorMessageTypes.participantCommand,\r\n                value: isMuted\r\n            };\r\n\r\n            this.sendMessage(JSON.stringify(command), cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the eject participant command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     */\r\n    public sendEjectRequest(participantId: string, cb?: () => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n            Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n            const command: IEjectParticipantCommand = {\r\n                command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n                // tslint:disable-next-line: object-literal-shorthand\r\n                participantId: participantId,\r\n                roomid: this.privRoom.roomId,\r\n                type: ConversationTranslatorMessageTypes.participantCommand,\r\n            };\r\n\r\n            this.sendMessage(JSON.stringify(command), cb, err);\r\n\r\n            if (!!cb) {\r\n                try {\r\n                    cb();\r\n                } catch (e) {\r\n                    if (!!err) {\r\n                        err(e);\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the mute participant command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isMuted\r\n     */\r\n    public sendChangeNicknameRequest(nickname: string, cb?: () => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n\r\n            const command: IChangeNicknameCommand = {\r\n                command: ConversationTranslatorCommandTypes.changeNickname,\r\n                nickname,\r\n                // tslint:disable-next-line: object-literal-shorthand\r\n                participantId: this.privRoom.participantId, // the id of the host\r\n                roomid: this.privRoom.roomId,\r\n                type: ConversationTranslatorMessageTypes.participantCommand,\r\n                value: nickname\r\n            };\r\n\r\n            this.sendMessage(JSON.stringify(command), cb, err);\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Close and dispose the recognizer\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.privIsDisposed);\r\n        this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Dispose the recognizer\r\n     * @param disposing\r\n     */\r\n    protected dispose(disposing: boolean): boolean {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n        if (disposing) {\r\n            this.privIsDisposed = true;\r\n            super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the config for the recognizer\r\n     * @param speechConfig\r\n     */\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    /**\r\n     * Create the service recognizer.\r\n     * The audio source is redundnant here but is required by the implementation.\r\n     * @param authentication\r\n     * @param connectionFactory\r\n     * @param audioConfig\r\n     * @param recognizerConfig\r\n     */\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private sendMessage(msg: string, cb?: Callback, err?: Callback): void {\r\n        const withAsync = this.privReco as ConversationServiceAdapter;\r\n        PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}