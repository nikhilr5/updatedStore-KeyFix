{"ast":null,"code":"var _jsxFileName = \"/Users/nikhilr5/Desktop/ScribeAR/updatedStore/src/components/AzureCaptions/AzureRecognition/index.js\";\nimport React from 'react';\nimport { isPureish } from '@babel/types';\nimport * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';\nimport AzureKey from '../../AzureTopSpace/AzureOptions/Key';\nimport store from '../../../store/';\nimport { useSelector, connect } from 'react-redux';\nimport { bindActionCreators } from \"redux\"; //const key = (state) =>state.azureKey\n//7882896e3ffc4fe3b2f4c055f0914d67\n\nvar key = 'empty'; //const key = this.props.key;\n\nvar regionOption = 'empty';\nvar lang = 'en-US';\nvar speechConfig = null;\nconst audioConfig = SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();\nvar reco = null;\n\nclass AzureRecognition extends React.PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      line: ''\n    };\n    key = store.azureKeyReducer;\n    regionOption = store.azureRegionOptionsReducer;\n    speechConfig = SpeechSDK.SpeechConfig.fromSubscription(key, regionOption); //alert(speechConfig.region);\n\n    speechConfig.speechRecognitionLanguage = lang;\n    speechConfig.setProfanity(2); //raw\n\n    reco = new SpeechSDK.SpeechRecognizer(speechConfig, audioConfig);\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n  }\n\n  componentDidMount() {\n    this.start();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.isRecording === this.props.isRecording) return;\n    if (this.props.isRecording) this.start();else this.stop();\n  }\n\n  start() {\n    key = store.azureKeyReducer;\n    console.log(key);\n    var out = document.getElementById('out');\n    var lastRecognized = out.innerHTML; // reco.recognizeOnceAsync(\n    //     (result) => {\n    //         switch (result.reason) {\n    //             case SpeechSDK.ResultReason.RecognizedSpeech:\n    //                 var div = document.createElement('div');\n    //                 div.textContent = result.text;\n    //                 out.appendChild(div);\n    //                 break;\n    //         }\n    //     }\n    // );\n\n    reco.recognizing = function (s, e) {\n      window.console.log(e);\n      out.innerHTML = lastRecognized + e.result.text;\n    };\n\n    reco.recognized = function (s, e) {\n      window.console.log(e);\n\n      if (e.result.reason == SpeechSDK.ResultReason.NoMatch) {\n        var noMatchDetail = SpeechSDK.NoMatchDetails.fromResult(e.result);\n      }\n\n      lastRecognized += e.result.text + \"\\r\\n\";\n      out.innerHTML = lastRecognized;\n    };\n\n    reco.startContinuousRecognitionAsync();\n  }\n\n  stop() {\n    reco.stopContinuousRecognitionAsync(function () {\n      reco.close();\n      reco = undefined;\n    }, function (err) {\n      reco.close();\n      reco = undefined;\n    });\n  }\n\n  render() {\n    // out holds all past lines. curr holds the current line.\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"out\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, this.props.key));\n  }\n\n}\n\nexport default AzureRecognition;","map":{"version":3,"sources":["/Users/nikhilr5/Desktop/ScribeAR/updatedStore/src/components/AzureCaptions/AzureRecognition/index.js"],"names":["React","isPureish","SpeechSDK","AzureKey","store","useSelector","connect","bindActionCreators","key","regionOption","lang","speechConfig","audioConfig","AudioConfig","fromDefaultMicrophoneInput","reco","AzureRecognition","PureComponent","constructor","state","line","azureKeyReducer","azureRegionOptionsReducer","SpeechConfig","fromSubscription","speechRecognitionLanguage","setProfanity","SpeechRecognizer","start","bind","stop","componentDidMount","componentDidUpdate","prevProps","prevState","isRecording","props","console","log","out","document","getElementById","lastRecognized","innerHTML","recognizing","s","e","window","result","text","recognized","reason","ResultReason","NoMatch","noMatchDetail","NoMatchDetails","fromResult","startContinuousRecognitionAsync","stopContinuousRecognitionAsync","close","undefined","err","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { isPureish } from '@babel/types';\nimport * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk'\nimport AzureKey from '../../AzureTopSpace/AzureOptions/Key';\nimport store from '../../../store/';\nimport {useSelector, connect} from 'react-redux'\nimport {bindActionCreators} from \"redux\"\n\n\n//const key = (state) =>state.azureKey\n//7882896e3ffc4fe3b2f4c055f0914d67\nvar key = 'empty';\n//const key = this.props.key;\nvar regionOption = 'empty';\nvar lang = 'en-US';\n\nvar speechConfig = null;\n\nconst audioConfig = SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();\nvar reco = null;\n\nclass AzureRecognition extends React.PureComponent {\n    constructor() {\n\n        super()\n        this.state = {\n           line: '',\n        }\n        key = store.azureKeyReducer;\n        regionOption = store.azureRegionOptionsReducer;\n        \n        speechConfig = SpeechSDK.SpeechConfig.fromSubscription(key, regionOption);\n        //alert(speechConfig.region);\n        \n        speechConfig.speechRecognitionLanguage = lang;\n        speechConfig.setProfanity(2); //raw\n        reco = new SpeechSDK.SpeechRecognizer(speechConfig, audioConfig);\n        this.start = this.start.bind(this)\n        this.stop = this.stop.bind(this)\n    }\n\n    componentDidMount() {\n        this.start();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.isRecording === this.props.isRecording)\n             return\n        if (this.props.isRecording)\n             this.start()\n        else this.stop()\n   }\n\n\n    start() {\n        key = store.azureKeyReducer;\n        console.log(key);\n        var out = document.getElementById('out');\n        var lastRecognized = out.innerHTML;\n        // reco.recognizeOnceAsync(\n        //     (result) => {\n        //         switch (result.reason) {\n        //             case SpeechSDK.ResultReason.RecognizedSpeech:\n        //                 var div = document.createElement('div');\n        //                 div.textContent = result.text;\n        //                 out.appendChild(div);\n        //                 break;\n        //         }\n        //     }\n\n        // );\n\n        reco.recognizing = function(s, e) {\n            window.console.log(e);\n            out.innerHTML = lastRecognized + e.result.text;\n        }\n\n        reco.recognized = function (s,e) {\n            window.console.log(e);\n\n            if(e.result.reason == SpeechSDK.ResultReason.NoMatch) {\n                var noMatchDetail = SpeechSDK.NoMatchDetails.fromResult(e.result);\n            }\n            lastRecognized += e.result.text + \"\\r\\n\";\n            out.innerHTML = lastRecognized;\n        }\n\n        reco.startContinuousRecognitionAsync();\n\n    }\n\n    stop() {\n        reco.stopContinuousRecognitionAsync(\n            function() {\n                reco.close();\n                reco = undefined;\n\n            },\n            function (err) {\n                reco.close();\n                reco = undefined;\n            }\n        )\n    }\n    render() {\n        // out holds all past lines. curr holds the current line.\n        return (\n             <div>\n\n                  <div id='out'></div>\n                    <p>{this.props.key}</p>\n\n             </div>\n        )\n   }\n}\n\nexport default AzureRecognition\n"]},"metadata":{},"sourceType":"module"}