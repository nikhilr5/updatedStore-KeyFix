{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { InvalidOperationError } from \"./Error\";\nimport { createNoDashGuid } from \"./Guid\";\nexport var MessageType;\n\n(function (MessageType) {\n  MessageType[MessageType[\"Text\"] = 0] = \"Text\";\n  MessageType[MessageType[\"Binary\"] = 1] = \"Binary\";\n})(MessageType || (MessageType = {}));\n\nexport class ConnectionMessage {\n  constructor(messageType, body, headers, id) {\n    this.privBody = null;\n\n    if (messageType === MessageType.Text && body && !(typeof body === \"string\")) {\n      throw new InvalidOperationError(\"Payload must be a string\");\n    }\n\n    if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\n      throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\n    }\n\n    this.privMessageType = messageType;\n    this.privBody = body;\n    this.privHeaders = headers ? headers : {};\n    this.privId = id ? id : createNoDashGuid();\n\n    switch (this.messageType) {\n      case MessageType.Binary:\n        this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\n        break;\n\n      case MessageType.Text:\n        this.privSize = this.textBody.length;\n    }\n  }\n\n  get messageType() {\n    return this.privMessageType;\n  }\n\n  get headers() {\n    return this.privHeaders;\n  }\n\n  get body() {\n    return this.privBody;\n  }\n\n  get textBody() {\n    if (this.privMessageType === MessageType.Binary) {\n      throw new InvalidOperationError(\"Not supported for binary message\");\n    }\n\n    return this.privBody;\n  }\n\n  get binaryBody() {\n    if (this.privMessageType === MessageType.Text) {\n      throw new InvalidOperationError(\"Not supported for text message\");\n    }\n\n    return this.privBody;\n  }\n\n  get id() {\n    return this.privId;\n  }\n\n}","map":{"version":3,"sources":["src/common/ConnectionMessage.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,qBAAT,QAAsC,SAAtC;AACA,SAAS,gBAAT,QAAiC,QAAjC;AAGA,OAAA,IAAY,WAAZ;;AAAA,CAAA,UAAY,WAAZ,EAAuB;AACnB,EAAA,WAAA,CAAA,WAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACH,CAHD,EAAY,WAAW,KAAX,WAAW,GAAA,EAAA,CAAvB;;AAKA,OAAM,MAAO,iBAAP,CAAwB;AAS1B,EAAA,WAAA,CACI,WADJ,EAEI,IAFJ,EAGI,OAHJ,EAII,EAJJ,EAIe;AATP,SAAA,QAAA,GAAgB,IAAhB;;AAWJ,QAAI,WAAW,KAAK,WAAW,CAAC,IAA5B,IAAoC,IAApC,IAA4C,EAAE,OAAQ,IAAR,KAAkB,QAApB,CAAhD,EAA+E;AAC3E,YAAM,IAAI,qBAAJ,CAA0B,0BAA1B,CAAN;AACH;;AAED,QAAI,WAAW,KAAK,WAAW,CAAC,MAA5B,IAAsC,IAAtC,IAA8C,EAAE,IAAI,YAAY,WAAlB,CAAlD,EAAkF;AAC9E,YAAM,IAAI,qBAAJ,CAA0B,6BAA1B,CAAN;AACH;;AAED,SAAK,eAAL,GAAuB,WAAvB;AACA,SAAK,QAAL,GAAgB,IAAhB;AACA,SAAK,WAAL,GAAmB,OAAO,GAAG,OAAH,GAAa,EAAvC;AACA,SAAK,MAAL,GAAc,EAAE,GAAG,EAAH,GAAQ,gBAAgB,EAAxC;;AACA,YAAQ,KAAK,WAAb;AACI,WAAK,WAAW,CAAC,MAAjB;AACI,aAAK,QAAL,GAAgB,KAAK,UAAL,KAAoB,IAApB,GAA2B,KAAK,UAAL,CAAgB,UAA3C,GAAwD,CAAxE;AACA;;AACJ,WAAK,WAAW,CAAC,IAAjB;AACI,aAAK,QAAL,GAAgB,KAAK,QAAL,CAAc,MAA9B;AALR;AAOH;;AAED,MAAW,WAAX,GAAsB;AAClB,WAAO,KAAK,eAAZ;AACH;;AAED,MAAW,OAAX,GAAkB;AACd,WAAO,KAAK,WAAZ;AACH;;AAED,MAAW,IAAX,GAAe;AACX,WAAO,KAAK,QAAZ;AACH;;AAED,MAAW,QAAX,GAAmB;AACf,QAAI,KAAK,eAAL,KAAyB,WAAW,CAAC,MAAzC,EAAiD;AAC7C,YAAM,IAAI,qBAAJ,CAA0B,kCAA1B,CAAN;AACH;;AAED,WAAO,KAAK,QAAZ;AACH;;AAED,MAAW,UAAX,GAAqB;AACjB,QAAI,KAAK,eAAL,KAAyB,WAAW,CAAC,IAAzC,EAA+C;AAC3C,YAAM,IAAI,qBAAJ,CAA0B,gCAA1B,CAAN;AACH;;AAED,WAAO,KAAK,QAAZ;AACH;;AAED,MAAW,EAAX,GAAa;AACT,WAAO,KAAK,MAAZ;AACH;;AAlEyB","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\nexport enum MessageType {\r\n    Text,\r\n    Binary,\r\n}\r\n\r\nexport class ConnectionMessage {\r\n\r\n    private privMessageType: MessageType;\r\n    private privHeaders: IStringDictionary<string>;\r\n    private privBody: any = null;\r\n    private privSize: number;\r\n\r\n    private privId: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        this.privBody = body;\r\n        this.privHeaders = headers ? headers : {};\r\n        this.privId = id ? id : createNoDashGuid();\r\n        switch (this.messageType) {\r\n            case MessageType.Binary:\r\n                this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\r\n                break;\r\n            case MessageType.Text:\r\n                this.privSize = this.textBody.length;\r\n        }\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n\r\n    public get body(): any {\r\n        return this.privBody;\r\n    }\r\n\r\n    public get textBody(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privBody as string;\r\n    }\r\n\r\n    public get binaryBody(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privBody;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}