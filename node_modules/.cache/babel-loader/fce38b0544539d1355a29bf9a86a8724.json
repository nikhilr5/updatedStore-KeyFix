{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { FileAudioSource, MicAudioSource, PcmRecorder } from \"../../common.browser/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport { AudioInputStream, PullAudioInputStreamCallback, PullAudioOutputStream, PushAudioOutputStream, PushAudioOutputStreamCallback, SpeakerAudioDestination } from \"../Exports\";\nimport { AudioFileWriter } from \"./AudioFileWriter\";\nimport { PullAudioInputStreamImpl } from \"./AudioInputStream\";\nimport { PushAudioOutputStreamImpl } from \"./AudioOutputStream\";\n/**\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\n * @class AudioConfig\n * Updated in version 1.11.0\n */\n\nexport class AudioConfig {\n  /**\n   * Creates an AudioConfig object representing the default microphone on the system.\n   * @member AudioConfig.fromDefaultMicrophoneInput\n   * @function\n   * @public\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n  static fromDefaultMicrophoneInput() {\n    const pcmRecorder = new PcmRecorder();\n    return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\n  }\n  /**\n   * Creates an AudioConfig object representing a microphone with the specified device ID.\n   * @member AudioConfig.fromMicrophoneInput\n   * @function\n   * @public\n   * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\n   *        Default microphone is used the value is omitted.\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n\n\n  static fromMicrophoneInput(deviceId) {\n    const pcmRecorder = new PcmRecorder();\n    return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\n  }\n  /**\n   * Creates an AudioConfig object representing the specified file.\n   * @member AudioConfig.fromWavFileInput\n   * @function\n   * @public\n   * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM with 16-bit\n   *        samples, 16 kHz sample rate, and a single channel (Mono) is supported.\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n\n\n  static fromWavFileInput(file) {\n    return new AudioConfigImpl(new FileAudioSource(file));\n  }\n  /**\n   * Creates an AudioConfig object representing the specified stream.\n   * @member AudioConfig.fromStreamInput\n   * @function\n   * @public\n   * @param {AudioInputStream | PullAudioInputStreamCallback} audioStream - Specifies the custom audio input\n   *        stream. Currently, only WAV / PCM with 16-bit samples, 16 kHz sample rate, and a single channel\n   *        (Mono) is supported.\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n\n\n  static fromStreamInput(audioStream) {\n    if (audioStream instanceof PullAudioInputStreamCallback) {\n      return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream));\n    }\n\n    if (audioStream instanceof AudioInputStream) {\n      return new AudioConfigImpl(audioStream);\n    }\n\n    throw new Error(\"Not Supported Type\");\n  }\n  /**\n   * Creates an AudioConfig object representing the default speaker.\n   * @member AudioConfig.fromDefaultSpeakerOutput\n   * @function\n   * @public\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.11.0\n   */\n\n\n  static fromDefaultSpeakerOutput() {\n    return new AudioOutputConfigImpl(new SpeakerAudioDestination());\n  }\n  /**\n   * Creates an AudioConfig object representing the custom IPlayer object.\n   * You can use the IPlayer object to control pause, resume, etc.\n   * @member AudioConfig.fromSpeakerOutput\n   * @function\n   * @public\n   * @param {IPlayer} player - the IPlayer object for playback.\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.12.0\n   */\n\n\n  static fromSpeakerOutput(player) {\n    if (player === undefined) {\n      return AudioConfig.fromDefaultSpeakerOutput();\n    }\n\n    if (player instanceof SpeakerAudioDestination) {\n      return new AudioOutputConfigImpl(player);\n    }\n\n    throw new Error(\"Not Supported Type\");\n  }\n  /**\n   * Creates an AudioConfig object representing a specified output audio file\n   * @member AudioConfig.fromAudioFileOutput\n   * @function\n   * @public\n   * @param {PathLike} filename - the filename of the output audio file\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.11.0\n   */\n\n\n  static fromAudioFileOutput(filename) {\n    return new AudioOutputConfigImpl(new AudioFileWriter(filename));\n  }\n  /**\n   * Creates an AudioConfig object representing a specified audio output stream\n   * @member AudioConfig.fromStreamOutput\n   * @function\n   * @public\n   * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\n   *        stream.\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.11.0\n   */\n\n\n  static fromStreamOutput(audioStream) {\n    if (audioStream instanceof PushAudioOutputStreamCallback) {\n      return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream));\n    }\n\n    if (audioStream instanceof PushAudioOutputStream) {\n      return new AudioOutputConfigImpl(audioStream);\n    }\n\n    if (audioStream instanceof PullAudioOutputStream) {\n      return new AudioOutputConfigImpl(audioStream);\n    }\n\n    throw new Error(\"Not Supported Type\");\n  }\n\n}\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @private\n * @class AudioConfigImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport class AudioConfigImpl extends AudioConfig {\n  /**\n   * Creates and initializes an instance of this class.\n   * @constructor\n   * @param {IAudioSource} source - An audio source.\n   */\n  constructor(source) {\n    super();\n    this.privSource = source;\n  }\n  /**\n   * Format information for the audio\n   */\n\n\n  get format() {\n    return this.privSource.format;\n  }\n  /**\n   * @member AudioConfigImpl.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close() {\n    this.privSource.turnOff();\n  }\n  /**\n   * @member AudioConfigImpl.prototype.id\n   * @function\n   * @public\n   */\n\n\n  id() {\n    return this.privSource.id();\n  }\n  /**\n   * @member AudioConfigImpl.prototype.turnOn\n   * @function\n   * @public\n   * @returns {Promise<boolean>} A promise.\n   */\n\n\n  turnOn() {\n    return this.privSource.turnOn();\n  }\n  /**\n   * @member AudioConfigImpl.prototype.attach\n   * @function\n   * @public\n   * @param {string} audioNodeId - The audio node id.\n   * @returns {Promise<IAudioStreamNode>} A promise.\n   */\n\n\n  attach(audioNodeId) {\n    return this.privSource.attach(audioNodeId);\n  }\n  /**\n   * @member AudioConfigImpl.prototype.detach\n   * @function\n   * @public\n   * @param {string} audioNodeId - The audio node id.\n   */\n\n\n  detach(audioNodeId) {\n    return this.privSource.detach(audioNodeId);\n  }\n  /**\n   * @member AudioConfigImpl.prototype.turnOff\n   * @function\n   * @public\n   * @returns {Promise<boolean>} A promise.\n   */\n\n\n  turnOff() {\n    return this.privSource.turnOff();\n  }\n  /**\n   * @member AudioConfigImpl.prototype.events\n   * @function\n   * @public\n   * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\n   */\n\n\n  get events() {\n    return this.privSource.events;\n  }\n\n  setProperty(name, value) {\n    Contracts.throwIfNull(value, \"value\");\n\n    if (undefined !== this.privSource.setProperty) {\n      this.privSource.setProperty(name, value);\n    } else {\n      throw new Error(\"This AudioConfig instance does not support setting properties.\");\n    }\n  }\n\n  getProperty(name, def) {\n    if (undefined !== this.privSource.getProperty) {\n      return this.privSource.getProperty(name, def);\n    } else {\n      throw new Error(\"This AudioConfig instance does not support getting properties.\");\n    }\n\n    return def;\n  }\n\n  get deviceInfo() {\n    return this.privSource.deviceInfo;\n  }\n\n} // tslint:disable-next-line:max-classes-per-file\n\nexport class AudioOutputConfigImpl extends AudioConfig {\n  /**\n   * Creates and initializes an instance of this class.\n   * @constructor\n   * @param {IAudioDestination} destination - An audio destination.\n   */\n  constructor(destination) {\n    super();\n    this.privDestination = destination;\n  }\n\n  set format(format) {\n    this.privDestination.format = format;\n  }\n\n  write(buffer) {\n    this.privDestination.write(buffer);\n  }\n\n  close() {\n    this.privDestination.close();\n  }\n\n  id() {\n    return this.privDestination.id();\n  }\n\n  setProperty(name, value) {\n    throw new Error(\"This AudioConfig instance does not support setting properties.\");\n  }\n\n  getProperty(name, def) {\n    throw new Error(\"This AudioConfig instance does not support getting properties.\");\n  }\n\n}","map":{"version":3,"sources":["src/sdk/Audio/AudioConfig.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PathLike } from \"fs\";\r\nimport {\r\n    FileAudioSource,\r\n    MicAudioSource,\r\n    PcmRecorder,\r\n} from \"../../common.browser/Exports\";\r\nimport { ISpeechConfigAudioDevice } from \"../../common.speech/Exports\";\r\nimport {\r\n    AudioSourceEvent,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    Promise\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioInputStream,\r\n    AudioOutputStream,\r\n    AudioStreamFormat,\r\n    IPlayer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    PullAudioInputStreamCallback,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeakerAudioDestination\r\n} from \"../Exports\";\r\nimport { AudioFileWriter } from \"./AudioFileWriter\";\r\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream\";\r\nimport { PullAudioOutputStreamImpl, PushAudioOutputStreamImpl } from \"./AudioOutputStream\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n * Updated in version 1.11.0\r\n */\r\nexport abstract class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromDefaultMicrophoneInput(): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder();\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\r\n     * @member AudioConfig.fromMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\r\n     *        Default microphone is used the value is omitted.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromMicrophoneInput(deviceId?: string): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder();\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM with 16-bit\r\n     *        samples, 16 kHz sample rate, and a single channel (Mono) is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromWavFileInput(file: File): AudioConfig {\r\n        return new AudioConfigImpl(new FileAudioSource(file));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback} audioStream - Specifies the custom audio input\r\n     *        stream. Currently, only WAV / PCM with 16-bit samples, 16 kHz sample rate, and a single channel\r\n     *        (Mono) is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream as PullAudioInputStreamCallback));\r\n        }\r\n\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the default speaker.\r\n     * @member AudioConfig.fromDefaultSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromDefaultSpeakerOutput(): AudioConfig {\r\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the custom IPlayer object.\r\n     * You can use the IPlayer object to control pause, resume, etc.\r\n     * @member AudioConfig.fromSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @param {IPlayer} player - the IPlayer object for playback.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.12.0\r\n     */\r\n    public static fromSpeakerOutput(player?: IPlayer): AudioConfig {\r\n        if (player === undefined) {\r\n            return AudioConfig.fromDefaultSpeakerOutput();\r\n        }\r\n        if (player instanceof SpeakerAudioDestination) {\r\n            return new AudioOutputConfigImpl(player as SpeakerAudioDestination);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified output audio file\r\n     * @member AudioConfig.fromAudioFileOutput\r\n     * @function\r\n     * @public\r\n     * @param {PathLike} filename - the filename of the output audio file\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromAudioFileOutput(filename: PathLike): AudioConfig {\r\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified audio output stream\r\n     * @member AudioConfig.fromStreamOutput\r\n     * @function\r\n     * @public\r\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\r\n     *        stream.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromStreamOutput(audioStream: AudioOutputStream | PushAudioOutputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\r\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream as PushAudioOutputStreamCallback));\r\n        }\r\n\r\n        if (audioStream instanceof PushAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PushAudioOutputStreamImpl);\r\n        }\r\n\r\n        if (audioStream instanceof PullAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PullAudioOutputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\r\n    private privSource: IAudioSource;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    public constructor(source: IAudioSource) {\r\n        super();\r\n        this.privSource = source;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privSource.format;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.id\r\n     * @function\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privSource.id();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<boolean>} A promise.\r\n     */\r\n    public turnOn(): Promise<boolean> {\r\n        return this.privSource.turnOn();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        return this.privSource.attach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    public detach(audioNodeId: string): void {\r\n        return this.privSource.detach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<boolean>} A promise.\r\n     */\r\n    public turnOff(): Promise<boolean> {\r\n        return this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privSource.events;\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        if (undefined !== this.privSource.setProperty) {\r\n            this.privSource.setProperty(name, value);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n        }\r\n\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        if (undefined !== this.privSource.getProperty) {\r\n            return this.privSource.getProperty(name, def);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privSource.deviceInfo;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioOutputConfigImpl extends AudioConfig implements IAudioDestination {\r\n    private privDestination: IAudioDestination;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioDestination} destination - An audio destination.\r\n     */\r\n    public constructor(destination: IAudioDestination) {\r\n        super();\r\n        this.privDestination = destination;\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        this.privDestination.format = format;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        this.privDestination.write(buffer);\r\n    }\r\n\r\n    public close(): void {\r\n        this.privDestination.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privDestination.id();\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}