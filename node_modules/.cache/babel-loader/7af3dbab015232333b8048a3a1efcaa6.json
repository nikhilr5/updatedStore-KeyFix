{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/** Users participating in the conversation */\nexport class InternalParticipants {\n  constructor(participants = [], meId) {\n    this.participants = participants;\n    this.meId = meId;\n  }\n  /**\n   * Add or update a participant\n   * @param value\n   */\n\n\n  addOrUpdateParticipant(value) {\n    if (value === undefined) {\n      return;\n    }\n\n    const exists = this.getParticipantIndex(value.id);\n\n    if (exists > -1) {\n      this.participants.splice(exists, 1, value);\n    } else {\n      this.participants.push(value);\n    } // ensure it was added ok\n\n\n    return this.getParticipant(value.id);\n  }\n  /**\n   * Find the participant's position in the participants list.\n   * @param id\n   */\n\n\n  getParticipantIndex(id) {\n    return this.participants.findIndex(p => p.id === id);\n  }\n  /**\n   * Find the participant by id.\n   * @param id\n   */\n\n\n  getParticipant(id) {\n    return this.participants.find(p => p.id === id);\n  }\n  /***\n   * Remove a participant from the participants list.\n   */\n\n\n  deleteParticipant(id) {\n    this.participants = this.participants.filter(p => p.id !== id);\n  }\n  /***\n   * Helper to return the conversation host.\n   */\n\n\n  get host() {\n    return this.participants.find(p => p.isHost === true);\n  }\n  /**\n   * Helper to return the current user.\n   */\n\n\n  get me() {\n    return this.getParticipant(this.meId);\n  }\n\n}\n/**\n * List of command message types\n */\n\nexport const ConversationTranslatorMessageTypes = {\n  command: \"command\",\n  final: \"final\",\n  info: \"info\",\n  instantMessage: \"instant_message\",\n  partial: \"partial\",\n  participantCommand: \"participant_command\",\n  translatedMessage: \"translated_message\"\n};\n/**\n * List of command types\n */\n\nexport const ConversationTranslatorCommandTypes = {\n  changeNickname: \"ChangeNickname\",\n  disconnectSession: \"DisconnectSession\",\n  ejectParticipant: \"EjectParticipant\",\n  instant_message: \"instant_message\",\n  joinSession: \"JoinSession\",\n  leaveSession: \"LeaveSession\",\n  participantList: \"ParticipantList\",\n  roomExpirationWarning: \"RoomExpirationWarning\",\n  setLockState: \"SetLockState\",\n  setMute: \"SetMute\",\n  setMuteAll: \"SetMuteAll\",\n  setProfanityFiltering: \"SetProfanityFiltering\",\n  setTranslateToLanguages: \"SetTranslateToLanguages\",\n  setUseTTS: \"SetUseTTS\"\n};","map":{"version":3,"sources":["src/common.speech/Transcription/ConversationTranslatorInterfaces.ts"],"names":[],"mappings":"AAAA;AACA;;AAgEA;AACA,OAAM,MAAO,oBAAP,CAA2B;AAE7B,EAAA,WAAA,CAAmB,YAAA,GAAuC,EAA1D,EAAqE,IAArE,EAAkF;AAA/D,SAAA,YAAA,GAAA,YAAA;AAAkD,SAAA,IAAA,GAAA,IAAA;AAEpE;AAED;;;;;;AAIO,EAAA,sBAAsB,CAAC,KAAD,EAA4B;AACrD,QAAI,KAAK,KAAK,SAAd,EAAyB;AACrB;AACH;;AAED,UAAM,MAAM,GAAW,KAAK,mBAAL,CAAyB,KAAK,CAAC,EAA/B,CAAvB;;AACA,QAAI,MAAM,GAAG,CAAC,CAAd,EAAiB;AACb,WAAK,YAAL,CAAkB,MAAlB,CAAyB,MAAzB,EAAiC,CAAjC,EAAoC,KAApC;AACH,KAFD,MAEO;AACH,WAAK,YAAL,CAAkB,IAAlB,CAAuB,KAAvB;AACH,KAVoD,CAYrD;;;AACA,WAAO,KAAK,cAAL,CAAoB,KAAK,CAAC,EAA1B,CAAP;AACH;AAED;;;;;;AAIO,EAAA,mBAAmB,CAAC,EAAD,EAAW;AACjC,WAAO,KAAK,YAAL,CAAkB,SAAlB,CAA6B,CAAD,IAA6B,CAAC,CAAC,EAAF,KAAS,EAAlE,CAAP;AACH;AAED;;;;;;AAIO,EAAA,cAAc,CAAC,EAAD,EAAW;AAC5B,WAAO,KAAK,YAAL,CAAkB,IAAlB,CAAwB,CAAD,IAA6B,CAAC,CAAC,EAAF,KAAS,EAA7D,CAAP;AACH;AAED;;;;;AAGO,EAAA,iBAAiB,CAAC,EAAD,EAAW;AAC/B,SAAK,YAAL,GAAoB,KAAK,YAAL,CAAkB,MAAlB,CAA0B,CAAD,IAA6B,CAAC,CAAC,EAAF,KAAS,EAA/D,CAApB;AACH;AAED;;;;;AAGA,MAAW,IAAX,GAAe;AACX,WAAO,KAAK,YAAL,CAAkB,IAAlB,CAAwB,CAAD,IAA6B,CAAC,CAAC,MAAF,KAAa,IAAjE,CAAP;AACH;AAED;;;;;AAGA,MAAW,EAAX,GAAa;AACT,WAAO,KAAK,cAAL,CAAoB,KAAK,IAAzB,CAAP;AACH;;AA7D4B;AA0KjC;;;;AAGA,OAAO,MAAM,kCAAkC,GAAG;AAC9C,EAAA,OAAO,EAAE,SADqC;AAE9C,EAAA,KAAK,EAAE,OAFuC;AAG9C,EAAA,IAAI,EAAE,MAHwC;AAI9C,EAAA,cAAc,EAAE,iBAJ8B;AAK9C,EAAA,OAAO,EAAE,SALqC;AAM9C,EAAA,kBAAkB,EAAE,qBAN0B;AAO9C,EAAA,iBAAiB,EAAE;AAP2B,CAA3C;AAUP;;;;AAGA,OAAO,MAAM,kCAAkC,GAAG;AAC9C,EAAA,cAAc,EAAE,gBAD8B;AAE9C,EAAA,iBAAiB,EAAE,mBAF2B;AAG9C,EAAA,gBAAgB,EAAE,kBAH4B;AAI9C,EAAA,eAAe,EAAE,iBAJ6B;AAK9C,EAAA,WAAW,EAAE,aALiC;AAM9C,EAAA,YAAY,EAAE,cANgC;AAO9C,EAAA,eAAe,EAAE,iBAP6B;AAQ9C,EAAA,qBAAqB,EAAE,uBARuB;AAS9C,EAAA,YAAY,EAAE,cATgC;AAU9C,EAAA,OAAO,EAAE,SAVqC;AAW9C,EAAA,UAAU,EAAE,YAXkC;AAY9C,EAAA,qBAAqB,EAAE,uBAZuB;AAa9C,EAAA,uBAAuB,EAAE,yBAbqB;AAc9C,EAAA,SAAS,EAAE;AAdmC,CAA3C","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    SessionEventArgs } from \"../../sdk/Exports\";\r\n// import { ConversationClient } from \"./ConversationConnection\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs\";\r\n\r\n/**\r\n * Internal conversation data\r\n */\r\nexport interface IInternalConversation {\r\n    // the token to use for connecting to the Speech Service\r\n    cognitiveSpeechAuthToken: string;\r\n    // the region to use for connecting to the Speech Service\r\n    cognitiveSpeechRegion: string;\r\n    // the unique id of the user who started or joined the Conversation\r\n    participantId: string;\r\n    // a descriptive name for the Conversation\r\n    name: string;\r\n    // a descriptive name for the Conversation\r\n    description: string;\r\n    // the speech model ID for custom speech\r\n    speechModel: string;\r\n    // represents the level of speech supported in the Conversation (0: everyone can speak, 2: only host can speak, 3: no-one can speak)\r\n    modalities: number;\r\n    // ?\r\n    isApproved: boolean;\r\n    // the mute flag has been set at conversation level and only the host can speak\r\n    isMuted: boolean;\r\n    // the 5 character conversation Id\r\n    roomId: string;\r\n    // the hex color string to represent a user. If there are many users this hex color may be reused (?).\r\n    avatar: string;\r\n    // the token to use when calling the websocket\r\n    token: string;\r\n    // used for tracking the session and help with troubleshooting problems in the logs\r\n    correlationId: string;\r\n    // extracted from the headers\r\n    requestId: string;\r\n}\r\n\r\n/**\r\n * The user who is participating in the conversation.\r\n */\r\nexport interface IInternalParticipant {\r\n    avatar?: string;\r\n    displayName?: string;\r\n    id?: string;\r\n    isHost?: boolean;\r\n    isMuted?: boolean;\r\n    isUsingTts?: boolean;\r\n    preferredLanguage?: string;\r\n}\r\n\r\n/** Users participating in the conversation */\r\nexport class InternalParticipants {\r\n\r\n    constructor(public participants: IInternalParticipant[] = [], public meId?: string) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Add or update a participant\r\n     * @param value\r\n     */\r\n    public addOrUpdateParticipant(value: IInternalParticipant): IInternalParticipant {\r\n        if (value === undefined) {\r\n            return;\r\n        }\r\n\r\n        const exists: number = this.getParticipantIndex(value.id);\r\n        if (exists > -1) {\r\n            this.participants.splice(exists, 1, value);\r\n        } else {\r\n            this.participants.push(value);\r\n        }\r\n\r\n        // ensure it was added ok\r\n        return this.getParticipant(value.id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant's position in the participants list.\r\n     * @param id\r\n     */\r\n    public getParticipantIndex(id: string): number {\r\n        return this.participants.findIndex((p: IInternalParticipant) => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant by id.\r\n     * @param id\r\n     */\r\n    public getParticipant(id: string): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant) => p.id === id);\r\n    }\r\n\r\n    /***\r\n     * Remove a participant from the participants list.\r\n     */\r\n    public deleteParticipant(id: string): void {\r\n        this.participants = this.participants.filter((p: IInternalParticipant) => p.id !== id);\r\n    }\r\n\r\n    /***\r\n     * Helper to return the conversation host.\r\n     */\r\n    public get host(): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant) => p.isHost === true );\r\n    }\r\n\r\n    /**\r\n     * Helper to return the current user.\r\n     */\r\n    public get me(): IInternalParticipant {\r\n        return this.getParticipant(this.meId);\r\n    }\r\n}\r\n\r\n/**\r\n * Recognizer for handling Conversation Translator websocket messages\r\n */\r\nexport interface IConversationTranslatorRecognizer {\r\n    canceled: (sender: IConversationTranslatorRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    connectionOpened: (sender: IConversationTranslatorRecognizer, event: SessionEventArgs) => void;\r\n    connectionClosed: (sender: IConversationTranslatorRecognizer, event: SessionEventArgs) => void;\r\n    participantsListReceived: (sender: IConversationTranslatorRecognizer, event: ParticipantsListEventArgs) => void;\r\n    translationReceived: (sender: IConversationTranslatorRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    lockRoomCommandReceived: (sender: IConversationTranslatorRecognizer, event: LockRoomEventArgs) => void;\r\n    muteAllCommandReceived: (sender: IConversationTranslatorRecognizer, event: MuteAllEventArgs) => void;\r\n    participantJoinCommandReceived: (sender: IConversationTranslatorRecognizer, event: ParticipantEventArgs) => void;\r\n    participantLeaveCommandReceived: (sender: IConversationTranslatorRecognizer, event: ParticipantEventArgs) => void;\r\n    participantUpdateCommandReceived: (sender: IConversationTranslatorRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n}\r\n\r\n/**\r\n * Error message returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseErrorMessage {\r\n    code: string;\r\n    message: string;\r\n}\r\n\r\n/**\r\n * Error returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseError {\r\n    error: IConversationResponseErrorMessage;\r\n}\r\n\r\n/**\r\n * Base message command\r\n */\r\nexport interface IClientMessage {\r\n    type: any;\r\n}\r\n\r\n/**\r\n * Command message\r\n */\r\nexport interface ICommandMessage extends IClientMessage {\r\n    command?: string;\r\n}\r\n\r\n/**\r\n * Text message command\r\n */\r\nexport interface IInstantMessageCommand extends ICommandMessage {\r\n    roomId: string;\r\n    nickname?: string;\r\n    participantId: string;\r\n    text: string;\r\n}\r\n\r\n/**\r\n * Lock command\r\n */\r\nexport interface ILockConversationCommand extends ICommandMessage {\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId: string; // host - incoming ws\r\n    roomid: string;\r\n    value: boolean;\r\n}\r\n\r\n/**\r\n * Mute all command\r\n */\r\nexport interface IMuteAllCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;  // incoming ws\r\n    participantId: string; // host\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Mute participant command\r\n */\r\nexport interface IMuteCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;\r\n    participantId: string; // participant\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Remove participant command\r\n */\r\nexport interface IEjectParticipantCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string; // participant\r\n}\r\n\r\n/**\r\n * Change nickname command\r\n */\r\nexport interface IChangeNicknameCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string;\r\n    nickname: string;\r\n    value: string;\r\n}\r\n\r\n/**\r\n * List of command message types\r\n */\r\nexport const ConversationTranslatorMessageTypes = {\r\n    command: \"command\",\r\n    final: \"final\",\r\n    info: \"info\",\r\n    instantMessage: \"instant_message\",\r\n    partial: \"partial\",\r\n    participantCommand: \"participant_command\",\r\n    translatedMessage: \"translated_message\"\r\n};\r\n\r\n/**\r\n * List of command types\r\n */\r\nexport const ConversationTranslatorCommandTypes = {\r\n    changeNickname: \"ChangeNickname\",\r\n    disconnectSession: \"DisconnectSession\",\r\n    ejectParticipant: \"EjectParticipant\",\r\n    instant_message: \"instant_message\",\r\n    joinSession: \"JoinSession\",\r\n    leaveSession: \"LeaveSession\",\r\n    participantList: \"ParticipantList\",\r\n    roomExpirationWarning: \"RoomExpirationWarning\",\r\n    setLockState: \"SetLockState\",\r\n    setMute: \"SetMute\",\r\n    setMuteAll: \"SetMuteAll\",\r\n    setProfanityFiltering: \"SetProfanityFiltering\",\r\n    setTranslateToLanguages: \"SetTranslateToLanguages\",\r\n    setUseTTS: \"SetUseTTS\"\r\n};\r\n\r\n/**\r\n * HTTP request helper\r\n */\r\nexport interface IRequestOptions {\r\n    headers?: {[key: string]: string};\r\n    ignoreCache?: boolean;\r\n    timeout?: number;\r\n}\r\n\r\n/**\r\n * HTTP response helper\r\n */\r\nexport interface IResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: <T>() => T;\r\n    headers: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}