{"ast":null,"code":"var _jsxFileName = \"/Users/nikhilr5/Desktop/ScribeAR/updatedStore/src/components/MiddleSpace/Loudness/AudioVisualiser.js\";\nimport React, { Component } from 'react';\n\nclass AudioVisualiser extends Component {\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n\n  draw() {\n    const {\n      audioData\n    } = this.props;\n    const canvas = this.canvas.current;\n    const height = canvas.height;\n    const width = canvas.width;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, width, height);\n\n    if (this.props.mic == 1) {\n      // Line visualization\n      this.drawLine(audioData, context, height, width);\n    } else if (this.props.mic == 2) {\n      // Spectrum visualization\n      this.drawSpectrum(audioData, context, height, width);\n    } else if (this.props.mic == 3) {\n      // Circular visualization\n      this.drawCircular(audioData, context, height, width);\n    }\n  }\n\n  drawLine(audioData, context, height, width) {\n    let x = 0;\n    const sliceWidth = width * 1.0 / audioData.length;\n    context.lineWidth = 2;\n    context.beginPath();\n    context.moveTo(0, height / 2);\n\n    for (const item of audioData) {\n      const y = item / 255.0 * height;\n      context.lineTo(x, y);\n      x += sliceWidth;\n    }\n\n    context.lineTo(x, height / 2);\n    context.strokeStyle = this.props.iscolor ? '#000000' : '#F8F8FF';\n    context.stroke();\n  }\n\n  drawSpectrum(audioData, context, height, width) {\n    let x = 0;\n    const barWidth = width / audioData.length * 2.5;\n    let barHeight;\n\n    for (const item of audioData) {\n      barHeight = item / 2;\n      context.fillStyle = this.props.iscolor ? '#000000' : '#F8F8FF';\n      context.fillRect(x, height / 2 - barHeight / 2, barWidth, barHeight);\n      x += barWidth + 1;\n    }\n  }\n\n  drawCircular(audioData, context, height, width) {\n    const RADIUS = 80;\n    const POINTS = 360;\n    let sum = audioData.reduce((previous, current) => current += previous);\n    let avg = sum / audioData.length;\n\n    for (let i = 0; i < POINTS; i++) {\n      let rel = ~~(i * (POINTS / audioData.length));\n      let x = width / 2 + RADIUS * Math.cos(i * 2 * Math.PI / POINTS);\n      let y = height / 2 + RADIUS * -Math.sin(i * 2 * Math.PI / POINTS);\n      let x_2 = x + audioData[rel] / 4 * Math.cos(i * 2 * Math.PI / POINTS);\n      let y_2 = y + audioData[rel] / 4 * -Math.sin(i * 2 * Math.PI / POINTS);\n      let x_3 = width / 2 + 1 * avg * Math.cos(i * 2 * Math.PI / POINTS);\n      let y_3 = height / 2 + 1 * avg * -Math.sin(i * 2 * Math.PI / POINTS);\n      let x_4 = x_3 - 0.5 * avg * Math.cos(i * 2 * Math.PI / POINTS);\n      let y_4 = y_3 - 0.5 * avg * -Math.sin(i * 2 * Math.PI / POINTS);\n      let x_5 = x - 0.3 * Math.cos(i * 2 * Math.PI / POINTS);\n      let y_5 = y - 0.3 * -Math.sin(i * 2 * Math.PI / POINTS); //draw the circular spectrum\n\n      context.beginPath();\n      context.moveTo(x, y);\n      context.lineTo(x_2, y_2);\n      context.strokeStyle = this.props.iscolor ? '#000000' : '#F8F8FF';\n      context.stroke(); //draw the margin circle\n\n      context.beginPath();\n      context.moveTo(x, y);\n      context.lineTo(x_5, y_5);\n      context.stroke(); //draw the inner circlew\n\n      context.beginPath();\n      context.moveTo(x_4, y_4);\n      context.lineTo(x_3, y_3);\n\n      if (y_4 - y_3 > 10) {\n        context.strokeStyle = '#ff0000';\n      }\n\n      context.stroke();\n    }\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  render() {\n    let width = \"1700vw\";\n\n    if (this.props.mic == 1) {\n      width = \"1800vw\";\n    } else if (this.props.mic == 2) {\n      width = \"1600vw\";\n    } else if (this.props.mic == 3) {\n      width = \"400vw\";\n    }\n\n    return /*#__PURE__*/React.createElement(\"canvas\", {\n      width: width,\n      height: \"300vh\",\n      ref: this.canvas,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default AudioVisualiser;","map":{"version":3,"sources":["/Users/nikhilr5/Desktop/ScribeAR/updatedStore/src/components/MiddleSpace/Loudness/AudioVisualiser.js"],"names":["React","Component","AudioVisualiser","constructor","props","canvas","createRef","draw","audioData","current","height","width","context","getContext","clearRect","mic","drawLine","drawSpectrum","drawCircular","x","sliceWidth","length","lineWidth","beginPath","moveTo","item","y","lineTo","strokeStyle","iscolor","stroke","barWidth","barHeight","fillStyle","fillRect","RADIUS","POINTS","sum","reduce","previous","avg","i","rel","Math","cos","PI","sin","x_2","y_2","x_3","y_3","x_4","y_4","x_5","y_5","componentDidUpdate","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n\n\nclass AudioVisualiser extends Component {\n\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n  draw() {\n      const { audioData } = this.props;\n      const canvas = this.canvas.current;\n      const height = canvas.height;\n      const width = canvas.width;\n      const context = canvas.getContext('2d');\n      context.clearRect(0, 0, width, height);\n\n      if (this.props.mic == 1){ // Line visualization\n          this.drawLine(audioData,context,height,width);\n      }\n      else if (this.props.mic == 2){// Spectrum visualization\n          this.drawSpectrum(audioData,context,height,width);\n      }\n      else if (this.props.mic == 3){// Circular visualization\n          this.drawCircular(audioData,context,height,width);\n      }\n\n\n}\n\ndrawLine(audioData,context,height,width){\n       let x = 0;\n       const sliceWidth = (width * 1.0) / audioData.length;\n      context.lineWidth = 2;\n      context.beginPath();\n      context.moveTo(0, height / 2);\n      for (const item of audioData) {\n          const y = (item / 255.0) * height;\n          context.lineTo(x, y);\n          x += sliceWidth;\n      }\n      context.lineTo(x, height / 2);\n      context.strokeStyle = this.props.iscolor ? '#000000' : '#F8F8FF';\n      context.stroke();\n}\n\ndrawSpectrum(audioData,context,height,width){\n      let x = 0;\n      const barWidth = (width / audioData.length) * 2.5;\n      let barHeight;\n      for(const item of audioData) {\n          barHeight = item/2;\n          context.fillStyle = this.props.iscolor ? '#000000' : '#F8F8FF';\n          context.fillRect(x,height/2-barHeight/2,barWidth,barHeight);\n          x += barWidth + 1;\n          }\n\n}\n\ndrawCircular(audioData,context,height,width){\n      const RADIUS = 80;\n      const POINTS = 360;\n      let sum = audioData.reduce((previous, current) => current += previous);\n      let avg = sum / audioData.length;\n\n      for(let i = 0; i < POINTS; i++) {\n          let rel = ~~(i * (POINTS/audioData.length));\n          let x = width/2 + RADIUS * Math.cos( (i * 2 * Math.PI) / POINTS );\n          let y = height/2 + RADIUS * -Math.sin( (i * 2 * Math.PI) / POINTS );\n          let x_2 = x + (audioData[rel]/4) * Math.cos( (i * 2 * Math.PI) / POINTS );\n          let y_2 = y + (audioData[rel]/4) * -Math.sin( (i * 2 * Math.PI) / POINTS );\n          let x_3 = width/2 + 1 *  avg * Math.cos((i * 2 * Math.PI) / POINTS );\n          let y_3 = height/2 + 1 * avg * -Math.sin((i * 2 * Math.PI) / POINTS );\n          let x_4 = x_3 - 0.5 *  avg * Math.cos((i * 2 * Math.PI) / POINTS );\n          let y_4 = y_3 - 0.5 * avg * -Math.sin((i * 2 * Math.PI) / POINTS );\n          let x_5 = x - 0.3  * Math.cos((i * 2 * Math.PI) / POINTS );\n          let y_5 = y - 0.3  * -Math.sin((i * 2 * Math.PI) / POINTS);\n          //draw the circular spectrum\n          context.beginPath();\n          context.moveTo(x, y);\n          context.lineTo(x_2, y_2);\n          context.strokeStyle = this.props.iscolor ? '#000000' : '#F8F8FF';\n          context.stroke();\n          //draw the margin circle\n          context.beginPath();\n          context.moveTo(x,y);\n          context.lineTo(x_5,y_5);\n          context.stroke();\n          //draw the inner circlew\n          context.beginPath();\n          context.moveTo(x_4,y_4);\n          context.lineTo(x_3,y_3);\n          if(y_4 - y_3 > 10){\n              context.strokeStyle = '#ff0000';\n          }\n          context.stroke();\n          }\n\n}\ncomponentDidUpdate() {\n    this.draw();\n  }\n\n  render() {\n      let width = \"1700vw\"\n      if (this.props.mic == 1){\n          width = \"1800vw\"\n      }else if (this.props.mic == 2){\n          width = \"1600vw\"\n      }else if (this.props.mic == 3){\n          width = \"400vw\"\n\n      }\n\n    return <canvas width={width} height=\"300vh\" ref={this.canvas} />;\n  }\n\n}\n\nexport default AudioVisualiser;\n"]},"metadata":{},"sourceType":"module"}