{"version":3,"sources":["src/common.speech/Transcription/ConversationUtils.ts"],"names":[],"mappings":"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","file":"ConversationUtils.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Promise, PromiseResult } from \"../../common/Promise\";\r\nimport { Callback } from \"../../sdk/Transcription/IConversation\";\r\nimport { IRequestOptions, IResponse } from \"./ConversationTranslatorInterfaces\";\r\n\r\n/**\r\n * Config settings for Conversation Translator\r\n */\r\nexport const ConversationTranslatorConfig = {\r\n    apiVersion: \"2.0\",\r\n    auth: {\r\n        placeholderRegion: \"westus\",\r\n        placeholderSubscriptionKey: \"abcdefghijklmnopqrstuvwxyz012345\",\r\n    },\r\n    clientAppId: \"FC539C22-1767-4F1F-84BC-B4D811114F15\",\r\n    defaultLanguageCode: \"en-US\",\r\n    defaultRequestOptions: {\r\n        headers: {\r\n            Accept: \"application/json\",\r\n        },\r\n        ignoreCache: false,\r\n        timeout: 5000,\r\n    },\r\n    host: \"dev.microsofttranslator.com\",\r\n    params: {\r\n        apiVersion: \"api-version\",\r\n        authorization: \"Authorization\",\r\n        clientAppId: \"X-ClientAppId\",\r\n        correlationId: \"X-CorrelationId\",\r\n        languageCode: \"language\",\r\n        nickname: \"nickname\",\r\n        profanity: \"profanity\",\r\n        requestId: \"X-RequestId\",\r\n        roomId: \"roomid\",\r\n        sessionToken: \"token\",\r\n        subscriptionKey: \"Ocp-Apim-Subscription-Key\",\r\n        subscriptionRegion: \"Ocp-Apim-Subscription-Region\",\r\n        token: \"X-CapitoToken\",\r\n    },\r\n    restPath: \"/capito/room\",\r\n    speechHost: \"{region}.s2s.speech.microsoft.com\",\r\n    speechPath: \"/speech/translation/cognitiveservices/v1\",\r\n    strings: {\r\n        authInvalidSubscriptionKey: \"You must specify either an authentication token to use, or a Cognitive Speech subscription key.\",\r\n        authInvalidSubscriptionRegion: \"You must specify the Cognitive Speech region to use.\",\r\n        invalidArgs: \"Required input not found: {arg}.\",\r\n        invalidCreateJoinConversationResponse: \"Creating/Joining conversation failed with HTTP {status}.\",\r\n        invalidParticipantRequest: \"The requested participant was not found.\",\r\n        permissionDeniedConnect: \"Required credentials not found.\",\r\n        permissionDeniedConversation: \"Invalid operation: only the host can {command} the conversation.\",\r\n        permissionDeniedParticipant: \"Invalid operation: only the host can {command} a participant.\",\r\n        permissionDeniedSend: \"Invalid operation: the conversation is not in a connected state.\",\r\n        permissionDeniedStart: \"Invalid operation: there is already an active conversation.\",\r\n    },\r\n    textMessageMaxLength: 1000,\r\n    webSocketPath: \"/capito/translate\"\r\n};\r\n\r\n/**\r\n * Helpers for sending / receiving HTTPS requests / responses.\r\n * @param params\r\n */\r\nfunction queryParams(params: any = {}): any {\r\n    return Object.keys(params)\r\n        .map((k: any) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n        .join(\"&\");\r\n}\r\n\r\nfunction withQuery(url: string, params: any = {}): any {\r\n    const queryString = queryParams(params);\r\n    return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\r\n}\r\n\r\nfunction parseXHRResult(xhr: XMLHttpRequest): IResponse {\r\n    return {\r\n        data: xhr.responseText,\r\n        headers: xhr.getAllResponseHeaders(),\r\n        json: <T>() => JSON.parse(xhr.responseText) as T,\r\n        ok: xhr.status >= 200 && xhr.status < 300,\r\n        status: xhr.status,\r\n        statusText: xhr.statusText,\r\n    };\r\n}\r\n\r\nfunction errorResponse(xhr: XMLHttpRequest, message: string | null = null): IResponse {\r\n    return {\r\n        data: message || xhr.statusText,\r\n        headers: xhr.getAllResponseHeaders(),\r\n        json: <T>() => JSON.parse(message || (\"\\\"\" + xhr.statusText + \"\\\"\")) as T,\r\n      ok: false,\r\n      status: xhr.status,\r\n      statusText: xhr.statusText,\r\n    };\r\n}\r\n\r\nexport function extractHeaderValue(headerKey: string, headers: string): string {\r\n\r\n    let headerValue: string = \"\";\r\n\r\n    try {\r\n      const arr = headers.trim().split(/[\\r\\n]+/);\r\n      const headerMap: any = {};\r\n      arr.forEach((line: any) => {\r\n        const parts = line.split(\": \");\r\n        const header = parts.shift().toLowerCase();\r\n        const value = parts.join(\": \");\r\n        headerMap[header] = value;\r\n      });\r\n\r\n      headerValue = headerMap[headerKey.toLowerCase()];\r\n    } catch (e) {\r\n      // ignore the error\r\n    }\r\n\r\n    return headerValue;\r\n}\r\n\r\nexport function request(method: \"get\" | \"post\" | \"delete\",\r\n                        url: string,\r\n                        queryParams: any = {},\r\n                        body: any = null,\r\n                        options: IRequestOptions = ConversationTranslatorConfig.defaultRequestOptions,\r\n                        callback: any): any {\r\n\r\n    const ignoreCache = options.ignoreCache || ConversationTranslatorConfig.defaultRequestOptions.ignoreCache;\r\n    const headers = options.headers || ConversationTranslatorConfig.defaultRequestOptions.headers;\r\n    const timeout = options.timeout || ConversationTranslatorConfig.defaultRequestOptions.timeout;\r\n\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open(method, withQuery(url, queryParams), true);\r\n\r\n    if (headers) {\r\n        Object.keys(headers).forEach((key: any) => xhr.setRequestHeader(key, headers[key]));\r\n    }\r\n\r\n    if (ignoreCache) {\r\n        xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\r\n    }\r\n\r\n    xhr.timeout = timeout;\r\n\r\n    xhr.onload = (evt: any) => {\r\n        callback(parseXHRResult(xhr));\r\n    };\r\n\r\n    xhr.onerror = (evt: any) => {\r\n        callback(errorResponse(xhr, \"Failed to make request.\"));\r\n    };\r\n\r\n    xhr.ontimeout = (evt: any) => {\r\n        callback(errorResponse(xhr, \"Request took longer than expected.\"));\r\n    };\r\n\r\n    if (method === \"post\" && body) {\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n        xhr.send(JSON.stringify(body));\r\n    } else {\r\n        xhr.send();\r\n    }\r\n}\r\n\r\nexport function PromiseToEmptyCallback<T>(promise: Promise<T>, cb?: Callback, err?: Callback): void {\r\n    if (!!promise) {\r\n        promise.continueWith((antecedent: PromiseResult<T>): void => {\r\n            try {\r\n                if (antecedent.isError) {\r\n                    if (!!err) {\r\n                        err(antecedent.error);\r\n                    }\r\n                } else {\r\n                    if (!!cb) {\r\n                        cb();\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(`'Unhandled error on promise callback: ${e}. InnerError: ${antecedent.error}'`);\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        if (!!err) {\r\n            err(\"Null promise\");\r\n        }\r\n    }\r\n}\r\n"]}