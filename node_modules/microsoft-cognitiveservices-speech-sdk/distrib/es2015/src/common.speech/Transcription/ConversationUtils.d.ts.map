{"version":3,"sources":["src/common.speech/Transcription/ConversationUtils.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,OAAO,EAAiB,MAAM,sBAAsB,CAAC;AAC9D,OAAO,EAAE,QAAQ,EAAE,MAAM,uCAAuC,CAAC;AACjE,OAAO,EAAE,eAAe,EAAa,MAAM,oCAAoC,CAAC;AAEhF;;GAEG;AACH,eAAO,MAAM,4BAA4B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgDxC,CAAC;AAuCF,wBAAgB,kBAAkB,CAAC,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,GAAG,MAAM,CAoB7E;AAED,wBAAgB,OAAO,CAAC,MAAM,EAAE,KAAK,GAAG,MAAM,GAAG,QAAQ,EACjC,GAAG,EAAE,MAAM,EACX,WAAW,EAAE,GAAQ,EACrB,IAAI,EAAE,GAAU,EAChB,OAAO,EAAE,eAAoE,EAC7E,QAAQ,EAAE,GAAG,GAAG,GAAG,CAqC1C;AAED,wBAAgB,sBAAsB,CAAC,CAAC,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,GAAG,CAAC,EAAE,QAAQ,GAAG,IAAI,CAwBlG","file":"ConversationUtils.d.ts","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Promise, PromiseResult } from \"../../common/Promise\";\r\nimport { Callback } from \"../../sdk/Transcription/IConversation\";\r\nimport { IRequestOptions, IResponse } from \"./ConversationTranslatorInterfaces\";\r\n\r\n/**\r\n * Config settings for Conversation Translator\r\n */\r\nexport const ConversationTranslatorConfig = {\r\n    apiVersion: \"2.0\",\r\n    auth: {\r\n        placeholderRegion: \"westus\",\r\n        placeholderSubscriptionKey: \"abcdefghijklmnopqrstuvwxyz012345\",\r\n    },\r\n    clientAppId: \"FC539C22-1767-4F1F-84BC-B4D811114F15\",\r\n    defaultLanguageCode: \"en-US\",\r\n    defaultRequestOptions: {\r\n        headers: {\r\n            Accept: \"application/json\",\r\n        },\r\n        ignoreCache: false,\r\n        timeout: 5000,\r\n    },\r\n    host: \"dev.microsofttranslator.com\",\r\n    params: {\r\n        apiVersion: \"api-version\",\r\n        authorization: \"Authorization\",\r\n        clientAppId: \"X-ClientAppId\",\r\n        correlationId: \"X-CorrelationId\",\r\n        languageCode: \"language\",\r\n        nickname: \"nickname\",\r\n        profanity: \"profanity\",\r\n        requestId: \"X-RequestId\",\r\n        roomId: \"roomid\",\r\n        sessionToken: \"token\",\r\n        subscriptionKey: \"Ocp-Apim-Subscription-Key\",\r\n        subscriptionRegion: \"Ocp-Apim-Subscription-Region\",\r\n        token: \"X-CapitoToken\",\r\n    },\r\n    restPath: \"/capito/room\",\r\n    speechHost: \"{region}.s2s.speech.microsoft.com\",\r\n    speechPath: \"/speech/translation/cognitiveservices/v1\",\r\n    strings: {\r\n        authInvalidSubscriptionKey: \"You must specify either an authentication token to use, or a Cognitive Speech subscription key.\",\r\n        authInvalidSubscriptionRegion: \"You must specify the Cognitive Speech region to use.\",\r\n        invalidArgs: \"Required input not found: {arg}.\",\r\n        invalidCreateJoinConversationResponse: \"Creating/Joining conversation failed with HTTP {status}.\",\r\n        invalidParticipantRequest: \"The requested participant was not found.\",\r\n        permissionDeniedConnect: \"Required credentials not found.\",\r\n        permissionDeniedConversation: \"Invalid operation: only the host can {command} the conversation.\",\r\n        permissionDeniedParticipant: \"Invalid operation: only the host can {command} a participant.\",\r\n        permissionDeniedSend: \"Invalid operation: the conversation is not in a connected state.\",\r\n        permissionDeniedStart: \"Invalid operation: there is already an active conversation.\",\r\n    },\r\n    textMessageMaxLength: 1000,\r\n    webSocketPath: \"/capito/translate\"\r\n};\r\n\r\n/**\r\n * Helpers for sending / receiving HTTPS requests / responses.\r\n * @param params\r\n */\r\nfunction queryParams(params: any = {}): any {\r\n    return Object.keys(params)\r\n        .map((k: any) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n        .join(\"&\");\r\n}\r\n\r\nfunction withQuery(url: string, params: any = {}): any {\r\n    const queryString = queryParams(params);\r\n    return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\r\n}\r\n\r\nfunction parseXHRResult(xhr: XMLHttpRequest): IResponse {\r\n    return {\r\n        data: xhr.responseText,\r\n        headers: xhr.getAllResponseHeaders(),\r\n        json: <T>() => JSON.parse(xhr.responseText) as T,\r\n        ok: xhr.status >= 200 && xhr.status < 300,\r\n        status: xhr.status,\r\n        statusText: xhr.statusText,\r\n    };\r\n}\r\n\r\nfunction errorResponse(xhr: XMLHttpRequest, message: string | null = null): IResponse {\r\n    return {\r\n        data: message || xhr.statusText,\r\n        headers: xhr.getAllResponseHeaders(),\r\n        json: <T>() => JSON.parse(message || (\"\\\"\" + xhr.statusText + \"\\\"\")) as T,\r\n      ok: false,\r\n      status: xhr.status,\r\n      statusText: xhr.statusText,\r\n    };\r\n}\r\n\r\nexport function extractHeaderValue(headerKey: string, headers: string): string {\r\n\r\n    let headerValue: string = \"\";\r\n\r\n    try {\r\n      const arr = headers.trim().split(/[\\r\\n]+/);\r\n      const headerMap: any = {};\r\n      arr.forEach((line: any) => {\r\n        const parts = line.split(\": \");\r\n        const header = parts.shift().toLowerCase();\r\n        const value = parts.join(\": \");\r\n        headerMap[header] = value;\r\n      });\r\n\r\n      headerValue = headerMap[headerKey.toLowerCase()];\r\n    } catch (e) {\r\n      // ignore the error\r\n    }\r\n\r\n    return headerValue;\r\n}\r\n\r\nexport function request(method: \"get\" | \"post\" | \"delete\",\r\n                        url: string,\r\n                        queryParams: any = {},\r\n                        body: any = null,\r\n                        options: IRequestOptions = ConversationTranslatorConfig.defaultRequestOptions,\r\n                        callback: any): any {\r\n\r\n    const ignoreCache = options.ignoreCache || ConversationTranslatorConfig.defaultRequestOptions.ignoreCache;\r\n    const headers = options.headers || ConversationTranslatorConfig.defaultRequestOptions.headers;\r\n    const timeout = options.timeout || ConversationTranslatorConfig.defaultRequestOptions.timeout;\r\n\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open(method, withQuery(url, queryParams), true);\r\n\r\n    if (headers) {\r\n        Object.keys(headers).forEach((key: any) => xhr.setRequestHeader(key, headers[key]));\r\n    }\r\n\r\n    if (ignoreCache) {\r\n        xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\r\n    }\r\n\r\n    xhr.timeout = timeout;\r\n\r\n    xhr.onload = (evt: any) => {\r\n        callback(parseXHRResult(xhr));\r\n    };\r\n\r\n    xhr.onerror = (evt: any) => {\r\n        callback(errorResponse(xhr, \"Failed to make request.\"));\r\n    };\r\n\r\n    xhr.ontimeout = (evt: any) => {\r\n        callback(errorResponse(xhr, \"Request took longer than expected.\"));\r\n    };\r\n\r\n    if (method === \"post\" && body) {\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n        xhr.send(JSON.stringify(body));\r\n    } else {\r\n        xhr.send();\r\n    }\r\n}\r\n\r\nexport function PromiseToEmptyCallback<T>(promise: Promise<T>, cb?: Callback, err?: Callback): void {\r\n    if (!!promise) {\r\n        promise.continueWith((antecedent: PromiseResult<T>): void => {\r\n            try {\r\n                if (antecedent.isError) {\r\n                    if (!!err) {\r\n                        err(antecedent.error);\r\n                    }\r\n                } else {\r\n                    if (!!cb) {\r\n                        cb();\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(`'Unhandled error on promise callback: ${e}. InnerError: ${antecedent.error}'`);\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        if (!!err) {\r\n            err(\"Null promise\");\r\n        }\r\n    }\r\n}\r\n"]}