// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
import { Contracts } from "../../sdk/Contracts";
import { PropertyId } from "../../sdk/Exports";
import { ConversationTranslatorConfig, extractHeaderValue, request } from "./ConversationUtils";
export class ConversationManager {
    constructor() {
        //
    }
    /**
     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.
     * @param args
     * @param conversationCode
     * @param callback
     * @param errorCallback
     */
    createOrJoin(args, conversationCode, cb, err) {
        try {
            Contracts.throwIfNullOrUndefined(args, "args");
            const languageCode = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationTranslatorConfig.defaultLanguageCode);
            const nickname = args.getProperty(PropertyId.ConversationTranslator_Name);
            const endpointHost = args.getProperty(PropertyId.ConversationTranslator_Host, ConversationTranslatorConfig.host);
            const correlationId = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);
            const subscriptionKey = args.getProperty(PropertyId.SpeechServiceConnection_Key);
            const subscriptionRegion = args.getProperty(PropertyId.SpeechServiceConnection_Region);
            const authToken = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);
            Contracts.throwIfNullOrWhitespace(languageCode, "languageCode");
            Contracts.throwIfNullOrWhitespace(nickname, "nickname");
            Contracts.throwIfNullOrWhitespace(endpointHost, "endpointHost");
            const queryParams = {};
            queryParams[ConversationTranslatorConfig.params.apiVersion] = ConversationTranslatorConfig.apiVersion;
            queryParams[ConversationTranslatorConfig.params.languageCode] = languageCode;
            queryParams[ConversationTranslatorConfig.params.nickname] = nickname;
            const headers = {};
            if (correlationId) {
                headers[ConversationTranslatorConfig.params.correlationId] = correlationId;
            }
            headers[ConversationTranslatorConfig.params.clientAppId] = ConversationTranslatorConfig.clientAppId;
            if (conversationCode !== undefined) {
                queryParams[ConversationTranslatorConfig.params.roomId] = conversationCode;
            }
            else {
                Contracts.throwIfNullOrUndefined(subscriptionRegion, ConversationTranslatorConfig.strings.authInvalidSubscriptionRegion);
                headers[ConversationTranslatorConfig.params.subscriptionRegion] = subscriptionRegion;
                if (subscriptionKey) {
                    headers[ConversationTranslatorConfig.params.subscriptionKey] = subscriptionKey;
                }
                else if (authToken) {
                    headers[ConversationTranslatorConfig.params.authorization] = `Bearer ${authToken}`;
                }
                else {
                    Contracts.throwIfNullOrUndefined(subscriptionKey, ConversationTranslatorConfig.strings.authInvalidSubscriptionKey);
                }
            }
            const config = {};
            config.headers = headers;
            const endpoint = `https://${endpointHost}${ConversationTranslatorConfig.restPath}`;
            // TODO: support a proxy and certificate validation
            request("post", endpoint, queryParams, null, config, (response) => {
                const requestId = extractHeaderValue(ConversationTranslatorConfig.params.requestId, response.headers);
                if (!response.ok) {
                    if (!!err) {
                        // get the error
                        let errorMessage = ConversationTranslatorConfig.strings.invalidCreateJoinConversationResponse.replace("{status}", response.status.toString());
                        let errMessageRaw;
                        try {
                            errMessageRaw = JSON.parse(response.data);
                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;
                        }
                        catch (e) {
                            errorMessage += ` [${response.data}]`;
                        }
                        if (requestId) {
                            errorMessage += ` ${requestId}`;
                        }
                        err(errorMessage);
                    }
                    return;
                }
                const conversation = JSON.parse(response.data);
                if (conversation) {
                    conversation.requestId = requestId;
                }
                if (!!cb) {
                    try {
                        cb(conversation);
                    }
                    catch (e) {
                        if (!!err) {
                            err(e);
                        }
                    }
                    cb = undefined;
                }
            });
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    const typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
        }
    }
    /**
     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.
     * @param args
     * @param sessionToken
     * @param callback
     */
    leave(args, sessionToken, cb, err) {
        try {
            Contracts.throwIfNullOrUndefined(args, ConversationTranslatorConfig.strings.invalidArgs.replace("{arg}", "config"));
            Contracts.throwIfNullOrWhitespace(sessionToken, ConversationTranslatorConfig.strings.invalidArgs.replace("{arg}", "token"));
            const endpointHost = args.getProperty(PropertyId.ConversationTranslator_Host, ConversationTranslatorConfig.host);
            const correlationId = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);
            const queryParams = {};
            queryParams[ConversationTranslatorConfig.params.apiVersion] = ConversationTranslatorConfig.apiVersion;
            queryParams[ConversationTranslatorConfig.params.sessionToken] = sessionToken;
            const headers = {};
            if (correlationId) {
                headers[ConversationTranslatorConfig.params.correlationId] = correlationId;
            }
            const config = {};
            config.headers = headers;
            const endpoint = `https://${endpointHost}${ConversationTranslatorConfig.restPath}`;
            // TODO: support a proxy and certificate validation
            request("delete", endpoint, queryParams, null, config, (response) => {
                if (!response.ok) {
                    // ignore errors on delete
                }
                if (!!cb) {
                    try {
                        cb();
                    }
                    catch (e) {
                        if (!!err) {
                            err(e);
                        }
                    }
                    cb = undefined;
                }
            });
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    const typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
        }
    }
}

//# sourceMappingURL=ConversationManager.js.map
