import { Promise } from "../../common/Promise";
import { Callback } from "../../sdk/Transcription/IConversation";
import { IRequestOptions } from "./ConversationTranslatorInterfaces";
/**
 * Config settings for Conversation Translator
 */
export declare const ConversationTranslatorConfig: {
    apiVersion: string;
    auth: {
        placeholderRegion: string;
        placeholderSubscriptionKey: string;
    };
    clientAppId: string;
    defaultLanguageCode: string;
    defaultRequestOptions: {
        headers: {
            Accept: string;
        };
        ignoreCache: boolean;
        timeout: number;
    };
    host: string;
    params: {
        apiVersion: string;
        authorization: string;
        clientAppId: string;
        correlationId: string;
        languageCode: string;
        nickname: string;
        profanity: string;
        requestId: string;
        roomId: string;
        sessionToken: string;
        subscriptionKey: string;
        subscriptionRegion: string;
        token: string;
    };
    restPath: string;
    speechHost: string;
    speechPath: string;
    strings: {
        authInvalidSubscriptionKey: string;
        authInvalidSubscriptionRegion: string;
        invalidArgs: string;
        invalidCreateJoinConversationResponse: string;
        invalidParticipantRequest: string;
        permissionDeniedConnect: string;
        permissionDeniedConversation: string;
        permissionDeniedParticipant: string;
        permissionDeniedSend: string;
        permissionDeniedStart: string;
    };
    textMessageMaxLength: number;
    webSocketPath: string;
};
export declare function extractHeaderValue(headerKey: string, headers: string): string;
export declare function request(method: "get" | "post" | "delete", url: string, queryParams: any, body: any, options: IRequestOptions, callback: any): any;
export declare function PromiseToEmptyCallback<T>(promise: Promise<T>, cb?: Callback, err?: Callback): void;
